(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-04 00:18:26
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<val_ref> 0)
(declare-sort $MWSF 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<val_ref>To$Snap ($FVF<val_ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<val_ref> ($Snap) $FVF<val_ref>)
(assert (forall ((x $FVF<val_ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<val_ref>($SortWrappers.$FVF<val_ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<val_ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<val_ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<val_ref>To$Snap($SortWrappers.$SnapTo$FVF<val_ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<val_ref> x))
    :qid |$Snap.$FVF<val_ref>To$SnapTo$FVF<val_ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$MWSFTo$Snap ($MWSF) $Snap)
(declare-fun $SortWrappers.$SnapTo$MWSF ($Snap) $MWSF)
(assert (forall ((x $MWSF)) (!
    (= x ($SortWrappers.$SnapTo$MWSF($SortWrappers.$MWSFTo$Snap x)))
    :pattern (($SortWrappers.$MWSFTo$Snap x))
    :qid |$Snap.$SnapTo$MWSFTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MWSFTo$Snap($SortWrappers.$SnapTo$MWSF x)))
    :pattern (($SortWrappers.$SnapTo$MWSF x))
    :qid |$Snap.$MWSFTo$SnapTo$MWSF|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_skolem_diff (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
; /field_value_functions_declarations.smt2 [val_ref: Ref]
(declare-fun $FVF.domain_val_ref ($FVF<val_ref>) Set<$Ref>)
(declare-fun $FVF.lookup_val_ref ($FVF<val_ref> $Ref) $Ref)
(declare-fun $FVF.after_val_ref ($FVF<val_ref> $FVF<val_ref>) Bool)
(declare-fun $FVF.loc_val_ref ($Ref $Ref) Bool)
(declare-fun $FVF.perm_val_ref ($FPM $Ref) $Perm)
(declare-const $fvfTOP_val_ref $FVF<val_ref>)
(declare-fun MWSF_apply ($MWSF $Snap) $Snap)
; Declaring symbols related to program functions (from program analysis)
(declare-fun read$ ($Snap) $Perm)
(declare-fun read$%limited ($Snap) $Perm)
(declare-const read$%stateless Bool)
(declare-fun read$%precondition ($Snap) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%stateless ($Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun builtin$unreach_int__$TY$__$int$ ($Snap) Int)
(declare-fun builtin$unreach_int__$TY$__$int$%limited ($Snap) Int)
(declare-const builtin$unreach_int__$TY$__$int$%stateless Bool)
(declare-fun builtin$unreach_int__$TY$__$int$%precondition ($Snap) Bool)
(declare-fun m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun builtin$undef_int__$TY$__$int$ ($Snap) Int)
(declare-fun builtin$undef_int__$TY$__$int$%limited ($Snap) Int)
(declare-const builtin$undef_int__$TY$__$int$%stateless Bool)
(declare-fun builtin$undef_int__$TY$__$int$%precondition ($Snap) Bool)
(declare-fun builtin$unreach_bool__$TY$__$bool$ ($Snap) Bool)
(declare-fun builtin$unreach_bool__$TY$__$bool$%limited ($Snap) Bool)
(declare-const builtin$unreach_bool__$TY$__$bool$%stateless Bool)
(declare-fun builtin$unreach_bool__$TY$__$bool$%precondition ($Snap) Bool)
(declare-fun builtin$undef_bool__$TY$__$bool$ ($Snap) Bool)
(declare-fun builtin$undef_bool__$TY$__$bool$%limited ($Snap) Bool)
(declare-const builtin$undef_bool__$TY$__$bool$%stateless Bool)
(declare-fun builtin$undef_bool__$TY$__$bool$%precondition ($Snap) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%stateless ($Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap $Ref Int) Int)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap $Ref Int) Int)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%stateless ($Ref Int) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap $Ref Int) Bool)
(declare-fun m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap $Ref) Int)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited ($Snap $Ref) Int)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless ($Ref) Bool)
(declare-fun m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap $Ref) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun DeadBorrowToken$%trigger ($Snap Int) Bool)
(declare-fun bool%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_11$3$14638646224268616196%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_12$4$17001480277194006617%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_13$3$14638646224268616196%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_14$4$15549095298966453791%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_15$5$5075898579489248679%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_16$2$5059396678693552475%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_17$3$13755076842142279428%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_18$5$17753855177215072009%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_19$4$11545708990456197808%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_20$5$1201558823312298186%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_21$4$9662796120604503583%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_30$3$1832632346543900956%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_34$3$9863146735187217849%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_35$3$6764460164408742563%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_36$5$15283588091169721285%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_37$2$17309005470967841763%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_38$5$18364178082525168913%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_39$3$8557536310959760232%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_40$3$439034602103774817%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_41$3$17248028283071546651%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_42$3$3125871853483277348%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_43$3$12509036097101680182%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_44$5$4519369578539410762%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_45$5$2832236683162059153%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_46$3$355636700252117518%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_47$4$9974624642593201658%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_48$4$14834637957093724395%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_49$5$9982319475891260062%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_50$4$18041856802123859140%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_51$5$15456494779183064913%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_52$3$1193994613319519282%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_53$6$30781156464482553%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_54$6$4276298801844591459%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_55$5$15494941592042450304%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_56$3$4759033578015280558%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_57$5$938118686986066325%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_58$3$10522504278762424813%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_59$5$14474626718756964039%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_60$5$13665772721162474095%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_61$3$18399563375980868224%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_62$3$7429684705094907427%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_63$4$4460809016675536475%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_64$4$4068400483846200362%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_65$3$4739617661615336241%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_66$3$7395530204526009362%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_67$4$1770348032394913676%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_68$4$4490636510610601042%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_69$5$13165072392702278976%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_70$3$14555767943206871429%trigger ($Snap $Ref) Bool)
(declare-fun closure$0_1_71$5$14559982558685517666%trigger ($Snap $Ref) Bool)
(declare-fun i32%trigger ($Snap $Ref) Bool)
(declare-fun isize%trigger ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_Some%trigger ($Snap $Ref) Bool)
(declare-fun m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$raw_vec$opensqu$0$closesqu$$$RawVec$opensqu$0$closesqu$$_beg_$i32$_sep_$m_alloc$$alloc$opensqu$0$closesqu$$$Global$opensqu$0$closesqu$$_beg_$_end_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_alloc$$vec$opensqu$0$closesqu$$$Vec$opensqu$0$closesqu$$_beg_$i32$_end_%trigger ($Snap $Ref) Bool)
(declare-fun m_core$$ptr$opensqu$0$closesqu$$$Unique$opensqu$0$closesqu$$_beg_$i32$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_11$3$14638646224268616196%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_12$4$17001480277194006617%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_13$3$14638646224268616196%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_14$4$15549095298966453791%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_15$5$5075898579489248679%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_16$2$5059396678693552475%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_17$3$13755076842142279428%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_18$5$17753855177215072009%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_19$4$11545708990456197808%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_20$5$1201558823312298186%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_21$4$9662796120604503583%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_30$3$1832632346543900956%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_34$3$9863146735187217849%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_35$3$6764460164408742563%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_36$5$15283588091169721285%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_38$5$18364178082525168913%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_39$3$8557536310959760232%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_40$3$439034602103774817%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_41$3$17248028283071546651%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_42$3$3125871853483277348%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_43$3$12509036097101680182%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_44$5$4519369578539410762%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_45$5$2832236683162059153%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_46$3$355636700252117518%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_47$4$9974624642593201658%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_48$4$14834637957093724395%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_49$5$9982319475891260062%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_50$4$18041856802123859140%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_51$5$15456494779183064913%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_52$3$1193994613319519282%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_53$6$30781156464482553%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_54$6$4276298801844591459%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_55$5$15494941592042450304%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_56$3$4759033578015280558%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_57$5$938118686986066325%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_58$3$10522504278762424813%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_59$5$14474626718756964039%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_60$5$13665772721162474095%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_61$3$18399563375980868224%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_62$3$7429684705094907427%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_63$4$4460809016675536475%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_64$4$4068400483846200362%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_65$3$4739617661615336241%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_66$3$7395530204526009362%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_67$4$1770348032394913676%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_68$4$4490636510610601042%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_69$5$13165072392702278976%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_70$3$14555767943206871429%trigger ($Snap $Ref) Bool)
(declare-fun ref$closure$0_1_71$5$14559982558685517666%trigger ($Snap $Ref) Bool)
(declare-fun ref$i32%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$i32%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$ref$m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap $Ref) Bool)
(declare-fun ref$str%trigger ($Snap $Ref) Bool)
(declare-fun ref$tuple3$ref$str$u32$u32%trigger ($Snap $Ref) Bool)
(declare-fun ref$usize%trigger ($Snap $Ref) Bool)
(declare-fun str%trigger ($Snap $Ref) Bool)
(declare-fun tuple0$%trigger ($Snap $Ref) Bool)
(declare-fun tuple2$usize$bool%trigger ($Snap $Ref) Bool)
(declare-fun tuple3$ref$str$u32$u32%trigger ($Snap $Ref) Bool)
(declare-fun u32%trigger ($Snap $Ref) Bool)
(declare-fun u8%trigger ($Snap $Ref) Bool)
(declare-fun usize%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Bool)) (!
  (not (Set_in o (as Set_empty  Set<Bool>)))
  :pattern ((Set_in o (as Set_empty  Set<Bool>)))
  )))
(assert (forall ((s Set<Bool>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Bool))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Bool)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Bool) (o Bool)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Bool)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (o Bool)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (Set_subset a b)
    (forall ((o Bool)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [val_ref: Ref]
(assert (forall ((vs $FVF<val_ref>) (ws $FVF<val_ref>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_val_ref vs) ($FVF.domain_val_ref ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_val_ref vs))
            (= ($FVF.lookup_val_ref vs x) ($FVF.lookup_val_ref ws x)))
          :pattern (($FVF.lookup_val_ref vs x) ($FVF.lookup_val_ref ws x))
          :qid |qp.$FVF<val_ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<val_ref>To$Snap vs)
              ($SortWrappers.$FVF<val_ref>To$Snap ws)
              )
    :qid |qp.$FVF<val_ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_val_ref pm r))
    :pattern (($FVF.perm_val_ref pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_val_ref f r) true)
    :pattern (($FVF.loc_val_ref f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun joined_unfolding@22@00 ($Snap $Ref) Bool)
(declare-fun joined_unfolding@28@00 ($Snap $Ref) Int)
(declare-fun $unresolved@30@00 () $Snap)
(assert (forall ((s@$ $Snap)) (!
  (= (read$%limited s@$) (read$ s@$))
  :pattern ((read$ s@$))
  :qid |quant-u-352|)))
(assert (forall ((s@$ $Snap)) (!
  (as read$%stateless  Bool)
  :pattern ((read$%limited s@$))
  :qid |quant-u-353|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) (=>
    (read$%precondition s@$)
    (and (< $Perm.No result@0@00) (< result@0@00 $Perm.Write))))
  :pattern ((read$%limited s@$))
  :qid |quant-u-376|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) true)
  :pattern ((read$%limited s@$))
  :qid |quant-u-377|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (read$%limited s@$))) true)
  :pattern ((read$%limited s@$))
  :qid |quant-u-378|)))
(assert (forall ((s@$ $Snap) (_pure_1@1@00 $Ref)) (!
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@1@00)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@1@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@1@00))
  :qid |quant-u-354|)))
(assert (forall ((s@$ $Snap) (_pure_1@1@00 $Ref)) (!
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%stateless _pure_1@1@00)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@1@00))
  :qid |quant-u-355|)))
(assert (forall ((s@$ $Snap) (_pure_1@1@00 $Ref)) (!
  (let ((result@2@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@1@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@1@00))
  :qid |quant-u-379|)))
(assert (forall ((s@$ $Snap) (_pure_1@1@00 $Ref)) (!
  (let ((result@2@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@1@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@1@00))
  :qid |quant-u-380|)))
(assert (forall ((s@$ $Snap) (_pure_1@1@00 $Ref)) (!
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition s@$ _pure_1@1@00)
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@1@00)
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))) 0)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@1@00))
  :qid |quant-u-381|)))
(assert (forall ((s@$ $Snap) (_pure_1@1@00 $Ref)) (!
  true
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@1@00))
  :qid |quant-u-382|)))
(assert (forall ((s@$ $Snap) (_pure_1@3@00 $Ref)) (!
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@3@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@3@00))
  :qid |quant-u-356|)))
(assert (forall ((s@$ $Snap) (_pure_1@3@00 $Ref)) (!
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless _pure_1@3@00)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))
  :qid |quant-u-357|)))
(assert (forall ((s@$ $Snap) (_pure_1@3@00 $Ref)) (!
  (let ((result@4@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))) (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ _pure_1@3@00)
    (and (<= 0 result@4@00) (<= result@4@00 18446744073709551615))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))
  :qid |quant-u-383|)))
(assert (forall ((s@$ $Snap) (_pure_1@3@00 $Ref)) (!
  (let ((result@4@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))
  :qid |quant-u-384|)))
(assert (forall ((s@$ $Snap) (_pure_1@3@00 $Ref)) (!
  (let ((result@4@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))
  :qid |quant-u-385|)))
(assert (forall ((s@$ $Snap) (_pure_1@3@00 $Ref)) (!
  (let ((result@4@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@3@00))
  :qid |quant-u-386|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (builtin$unreach_int__$TY$__$int$%limited s@$)
    (builtin$unreach_int__$TY$__$int$ s@$))
  :pattern ((builtin$unreach_int__$TY$__$int$ s@$))
  :qid |quant-u-358|)))
(assert (forall ((s@$ $Snap)) (!
  (as builtin$unreach_int__$TY$__$int$%stateless  Bool)
  :pattern ((builtin$unreach_int__$TY$__$int$%limited s@$))
  :qid |quant-u-359|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (=
    (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@6@00)
    (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@6@00))
  :pattern ((m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@6@00))
  :qid |quant-u-360|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless self@6@00)
  :pattern ((m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@6@00))
  :qid |quant-u-361|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@6@00))) (=>
    (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ self@6@00)
    (and (<= 0 result@7@00) (<= result@7@00 2))))
  :pattern ((m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@6@00))
  :qid |quant-u-387|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@6@00))) true)
  :pattern ((m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@6@00))
  :qid |quant-u-388|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (=>
    (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ self@6@00)
    (=
      (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@6@00)
      ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  :pattern ((m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@6@00))
  :qid |quant-u-389|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  true
  :pattern ((m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@6@00))
  :qid |quant-u-390|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (builtin$undef_int__$TY$__$int$%limited s@$)
    (builtin$undef_int__$TY$__$int$ s@$))
  :pattern ((builtin$undef_int__$TY$__$int$ s@$))
  :qid |quant-u-362|)))
(assert (forall ((s@$ $Snap)) (!
  (as builtin$undef_int__$TY$__$int$%stateless  Bool)
  :pattern ((builtin$undef_int__$TY$__$int$%limited s@$))
  :qid |quant-u-363|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (builtin$unreach_bool__$TY$__$bool$%limited s@$)
    (builtin$unreach_bool__$TY$__$bool$ s@$))
  :pattern ((builtin$unreach_bool__$TY$__$bool$ s@$))
  :qid |quant-u-364|)))
(assert (forall ((s@$ $Snap)) (!
  (as builtin$unreach_bool__$TY$__$bool$%stateless  Bool)
  :pattern ((builtin$unreach_bool__$TY$__$bool$%limited s@$))
  :qid |quant-u-365|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (builtin$undef_bool__$TY$__$bool$%limited s@$)
    (builtin$undef_bool__$TY$__$bool$ s@$))
  :pattern ((builtin$undef_bool__$TY$__$bool$ s@$))
  :qid |quant-u-366|)))
(assert (forall ((s@$ $Snap)) (!
  (as builtin$undef_bool__$TY$__$bool$%stateless  Bool)
  :pattern ((builtin$undef_bool__$TY$__$bool$%limited s@$))
  :qid |quant-u-367|)))
(assert (forall ((s@$ $Snap) (_pure_1@11@00 $Ref)) (!
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@11@00)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@11@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@11@00))
  :qid |quant-u-368|)))
(assert (forall ((s@$ $Snap) (_pure_1@11@00 $Ref)) (!
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%stateless _pure_1@11@00)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@11@00))
  :qid |quant-u-369|)))
(assert (forall ((s@$ $Snap) (_pure_1@11@00 $Ref)) (!
  (let ((result@12@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@11@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@11@00))
  :qid |quant-u-391|)))
(assert (forall ((s@$ $Snap) (_pure_1@11@00 $Ref)) (!
  (let ((result@12@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@11@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%limited s@$ _pure_1@11@00))
  :qid |quant-u-392|)))
(assert (forall ((s@$ $Snap) (_pure_1@11@00 $Ref)) (!
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition s@$ _pure_1@11@00)
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@11@00)
      (not
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
          ($Snap.first s@$)
          $Snap.unit) _pure_1@11@00))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@11@00))
  :qid |quant-u-393|)))
(assert (forall ((s@$ $Snap) (_pure_1@11@00 $Ref)) (!
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition s@$ _pure_1@11@00)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
      ($Snap.first s@$)
      $Snap.unit) _pure_1@11@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ s@$ _pure_1@11@00))
  :qid |quant-u-394|)))
(assert (forall ((s@$ $Snap) (_pure_1@13@00 $Ref) (_pure_2@14@00 Int)) (!
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ s@$ _pure_1@13@00 _pure_2@14@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ s@$ _pure_1@13@00 _pure_2@14@00))
  :qid |quant-u-370|)))
(assert (forall ((s@$ $Snap) (_pure_1@13@00 $Ref) (_pure_2@14@00 Int)) (!
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%stateless _pure_1@13@00 _pure_2@14@00)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))
  :qid |quant-u-371|)))
(assert (forall ((s@$ $Snap) (_pure_1@13@00 $Ref) (_pure_2@14@00 Int)) (!
  (let ((result@15@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))) (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition s@$ _pure_1@13@00 _pure_2@14@00)
    (and (<= (- 0 2147483648) result@15@00) (<= result@15@00 2147483647))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))
  :qid |quant-u-395|)))
(assert (forall ((s@$ $Snap) (_pure_1@13@00 $Ref) (_pure_2@14@00 Int)) (!
  (let ((result@15@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))
  :qid |quant-u-396|)))
(assert (forall ((s@$ $Snap) (_pure_1@13@00 $Ref) (_pure_2@14@00 Int)) (!
  (let ((result@15@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))
  :qid |quant-u-397|)))
(assert (forall ((s@$ $Snap) (_pure_1@13@00 $Ref) (_pure_2@14@00 Int)) (!
  (let ((result@15@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited s@$ _pure_1@13@00 _pure_2@14@00))
  :qid |quant-u-398|)))
(assert (forall ((s@$ $Snap) (self@16@00 $Ref)) (!
  (=
    (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@16@00)
    (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@16@00))
  :pattern ((m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@16@00))
  :qid |quant-u-372|)))
(assert (forall ((s@$ $Snap) (self@16@00 $Ref)) (!
  (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless self@16@00)
  :pattern ((m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@16@00))
  :qid |quant-u-373|)))
(assert (forall ((s@$ $Snap) (self@16@00 $Ref)) (!
  (let ((result@17@00 (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@16@00))) (=>
    (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ self@16@00)
    (and (<= 0 result@17@00) (<= result@17@00 1))))
  :pattern ((m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@16@00))
  :qid |quant-u-399|)))
(assert (forall ((s@$ $Snap) (self@16@00 $Ref)) (!
  (let ((result@17@00 (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@16@00))) true)
  :pattern ((m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ self@16@00))
  :qid |quant-u-400|)))
(assert (forall ((s@$ $Snap) (self@16@00 $Ref)) (!
  (=>
    (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ self@16@00)
    (=
      (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@16@00)
      ($SortWrappers.$SnapToInt ($Snap.first s@$))))
  :pattern ((m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@16@00))
  :qid |quant-u-401|)))
(assert (forall ((s@$ $Snap) (self@16@00 $Ref)) (!
  true
  :pattern ((m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ self@16@00))
  :qid |quant-u-402|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@18@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@18@00))
  :qid |quant-u-374|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless _pure_1@18@00)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))
  :qid |quant-u-375|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (let ((result@19@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))) (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ _pure_1@18@00)
    (and (<= 0 result@19@00) (<= result@19@00 18446744073709551615))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))
  :qid |quant-u-403|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (let ((result@19@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))
  :qid |quant-u-404|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (let ((result@19@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))
  :qid |quant-u-405|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (let ((result@19@00 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))) true)
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%limited s@$ _pure_1@18@00))
  :qid |quant-u-406|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ _pure_1@18@00)
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@18@00)
      (ite
        (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))) 0)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$))))))))
        (builtin$unreach_int__$TY$__$int$ $unresolved@30@00))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@18@00))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%stateless _pure_1@18@00) (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.first s@$) _pure_1@18@00))
  :qid |quant-u-407|)))
(assert (forall ((s@$ $Snap) (_pure_1@18@00 $Ref)) (!
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition s@$ _pure_1@18@00)
    (ite
      (= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))) 0)
      true
      (builtin$unreach_int__$TY$__$int$%precondition $unresolved@30@00)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ s@$ _pure_1@18@00))
  :qid |quant-u-408|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- m_Binary_search$$cmp$opensqu$0$closesqu$ ----------
(declare-const _0@0@01 $Ref)
(declare-const _0@1@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@2@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@3@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@4@01 Bool)
; [exec]
; var __t3: Bool
(declare-const __t3@5@01 Bool)
; [exec]
; var __t4: Bool
(declare-const __t4@6@01 Bool)
; [exec]
; var __t5: Bool
(declare-const __t5@7@01 Bool)
; [exec]
; var __t6: Bool
(declare-const __t6@8@01 Bool)
; [exec]
; var __t7: Bool
(declare-const __t7@9@01 Bool)
; [exec]
; var __t8: Bool
(declare-const __t8@10@01 Bool)
; [exec]
; var _old$pre$0: Ref
(declare-const _old$pre$0@11@01 $Ref)
; [exec]
; var _old$pre$1: Ref
(declare-const _old$pre$1@12@01 $Ref)
; [exec]
; var _1: Ref
(declare-const _1@13@01 $Ref)
; [exec]
; var _2: Ref
(declare-const _2@14@01 $Ref)
; [exec]
; var _3: Ref
(declare-const _3@15@01 $Ref)
; [exec]
; var _4: Int
(declare-const _4@16@01 Int)
; [exec]
; var _5: Int
(declare-const _5@17@01 Int)
; [exec]
; var _6: Ref
(declare-const _6@18@01 $Ref)
; [exec]
; var _7: Int
(declare-const _7@19@01 Int)
; [exec]
; var _8: Int
(declare-const _8@20@01 Int)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; __t3 := false
; [exec]
; __t4 := false
; [exec]
; __t5 := false
; [exec]
; __t6 := false
; [exec]
; inhale acc(_1.val_ref, write) &&
;   (acc(i32(_1.val_ref), write) &&
;   (acc(_2.val_ref, write) && acc(i32(_2.val_ref), write)))
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 ($Snap.combine ($Snap.first $t@21@01) ($Snap.second $t@21@01))))
(assert (not (= _1@13@01 $Ref.null)))
(assert (=
  ($Snap.second $t@21@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@01))
    ($Snap.second ($Snap.second $t@21@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@21@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@13@01 _2@14@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= _2@14@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; _4 := builtin$havoc_int()
(declare-const ret@25@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_1.val_ref), write)
(assert (=
  ($Snap.first ($Snap.second $t@21@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@21@01))))))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@21@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@21@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@21@01)))) $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@21@01))))
  $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  2147483647))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.first ($Snap.second $t@21@01)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; _4 := _1.val_ref.val_int
(declare-const _4@27@01 Int)
(assert (=
  _4@27@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))))
; [exec]
; label l0
; [exec]
; _5 := builtin$havoc_int()
(declare-const ret@28@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(i32(_2.val_ref), write)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@21@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))
  2147483647))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@21@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
; [exec]
; _5 := _2.val_ref.val_int
(declare-const _5@30@01 Int)
(assert (=
  _5@30@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [exec]
; label l1
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@31@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_3.val_bool, write)
(declare-const $t@32@01 Bool)
(assert (not (= ret@31@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _3.val_bool := _4 == _5
; [eval] _4 == _5
(declare-const val_bool@33@01 Bool)
(assert (= val_bool@33@01 (= _4@27@01 _5@30@01)))
; [exec]
; __t7 := _3.val_bool
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not val_bool@33@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not val_bool@33@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | val_bool@33@01 | live]
; [else-branch: 0 | !(val_bool@33@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | val_bool@33@01]
(assert val_bool@33@01)
; [exec]
; label l3
; [exec]
; label bb1
; [exec]
; __t1 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@34@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(declare-const $t@35@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) ==
;   1
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 $Snap.unit))
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) == 1
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
(set-option :timeout 0)
(push) ; 4
; [eval] read$()
(push) ; 5
(assert (read$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@35@01 ret@34@01))
(pop) ; 4
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@35@01 ret@34@01)))
(assert (=
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@35@01 ret@34@01)
  1))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb6
; [exec]
; __t6 := true
; [exec]
; label return
; [exec]
; fold acc(i32(_1.val_ref), write)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@37@01 $Ref)
(assert (= _old$pre$0@37@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; fold acc(i32(_2.val_ref), write)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; _old$pre$1 := _2.val_ref
(declare-const _old$pre$1@38@01 $Ref)
(assert (=
  _old$pre$1@38@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
; [exec]
; assert (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) ==
;   old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int)) &&
;   ((unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;     _0.discriminant) ==
;   1 ?
;     (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) ==
;     (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) :
;     ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;       _0.discriminant) ==
;     0 ?
;       (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) <
;       (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) :
;       (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) >
;       (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@37@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@37@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$0@37@01))
(assert (not (= _old$pre$0@37@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 4
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
    ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$0@37@01)
  (not (= _old$pre$0@37@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int))
; [eval] (unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int)
(set-option :timeout 0)
(push) ; 4
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 4
; Joined path conditions
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@38@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$1@38@01))
(assert (not (= _old$pre$1@38@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 4
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$1@38@01)
  (not (= _old$pre$1@38@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 4
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 4
; Joined path conditions
; [eval] ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 1 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) < (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) > (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)))
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 1
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant)
(push) ; 4
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@35@01 ret@34@01))
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
(assert (not (= ret@34@01 $Ref.null)))
(assert (=
  ($Snap.second $t@35@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@01))
    ($Snap.second ($Snap.second $t@35@01)))))
(assert (= ($Snap.first ($Snap.second $t@35@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@35@01))))
(assert (= ($Snap.second ($Snap.second $t@35@01)) $Snap.unit))
; [eval] self.discriminant <= 2
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)) 2))
(pop) ; 4
; Joined path conditions
(assert (and
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@35@01 ret@34@01)
  (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01)))
  (not (= ret@34@01 $Ref.null))
  (=
    ($Snap.second $t@35@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@35@01))
      ($Snap.second ($Snap.second $t@35@01))))
  (= ($Snap.first ($Snap.second $t@35@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)))
  (= ($Snap.second ($Snap.second $t@35@01)) $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)) 2)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)) 1))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)) 1)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | First:($t@35@01) == 1 | live]
; [else-branch: 1 | First:($t@35@01) != 1 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1 | First:($t@35@01) == 1]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)) 1))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@37@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@37@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 6
; Joined path conditions
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@38@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 6
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@35@01)) 1))
(set-option :timeout 0)
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [exec]
; assert true
; [exec]
; exhale acc(i32(_old$pre$0), write) && acc(i32(_old$pre$1), write)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@37@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@37@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@38@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 0 | !(val_bool@33@01)]
(assert (not val_bool@33@01))
(pop) ; 3
; [eval] !__t7
(push) ; 3
(set-option :timeout 10)
(assert (not val_bool@33@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not val_bool@33@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | !(val_bool@33@01) | live]
; [else-branch: 2 | val_bool@33@01 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2 | !(val_bool@33@01)]
(assert (not val_bool@33@01))
; [exec]
; label l2
; [exec]
; label bb2
; [exec]
; __t2 := true
; [exec]
; _7 := builtin$havoc_int()
(declare-const ret@39@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _7 := _1.val_ref.val_int
(declare-const _7@41@01 Int)
(assert (=
  _7@41@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))))
; [exec]
; label l4
; [exec]
; _8 := builtin$havoc_int()
(declare-const ret@42@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _8 := _2.val_ref.val_int
(declare-const _8@44@01 Int)
(assert (=
  _8@44@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [exec]
; label l5
; [exec]
; _6 := builtin$havoc_ref()
(declare-const ret@45@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_6.val_bool, write)
(declare-const $t@46@01 Bool)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@31@01 ret@45@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@45@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _6.val_bool := _7 < _8
; [eval] _7 < _8
(declare-const val_bool@47@01 Bool)
(assert (= val_bool@47@01 (< _7@41@01 _8@44@01)))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@31@01 ret@45@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t8 := _6.val_bool
; [eval] !__t8
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not val_bool@47@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not val_bool@47@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | !(val_bool@47@01) | live]
; [else-branch: 3 | val_bool@47@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3 | !(val_bool@47@01)]
(assert (not val_bool@47@01))
; [exec]
; label l7
; [exec]
; label bb4
; [exec]
; __t4 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@48@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(declare-const $t@49@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) ==
;   2
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 $Snap.unit))
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) == 2
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(assert (read$%precondition $Snap.unit))
(pop) ; 6
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@49@01 ret@48@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@49@01 ret@48@01)))
(assert (=
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@49@01 ret@48@01)
  2))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb5
; [exec]
; __t5 := true
; [exec]
; label l8
; [exec]
; label bb6
; [exec]
; __t6 := true
; [exec]
; label return
; [exec]
; fold acc(i32(_1.val_ref), write)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@51@01 $Ref)
(assert (= _old$pre$0@51@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; fold acc(i32(_2.val_ref), write)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _old$pre$1 := _2.val_ref
(declare-const _old$pre$1@52@01 $Ref)
(assert (=
  _old$pre$1@52@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
; [exec]
; assert (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) ==
;   old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int)) &&
;   ((unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;     _0.discriminant) ==
;   1 ?
;     (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) ==
;     (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) :
;     ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;       _0.discriminant) ==
;     0 ?
;       (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) <
;       (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) :
;       (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) >
;       (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@51@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@51@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$0@51@01))
(assert (not (= _old$pre$0@51@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
    ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$0@51@01)
  (not (= _old$pre$0@51@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int))
; [eval] (unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int)
(set-option :timeout 0)
(push) ; 5
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@52@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$1@52@01))
(assert (not (= _old$pre$1@52@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$1@52@01)
  (not (= _old$pre$1@52@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 5
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
; [eval] ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 1 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) < (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) > (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)))
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 1
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant)
(push) ; 5
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@49@01 ret@48@01))
(assert (= $t@49@01 ($Snap.combine ($Snap.first $t@49@01) ($Snap.second $t@49@01))))
(assert (not (= ret@48@01 $Ref.null)))
(assert (=
  ($Snap.second $t@49@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@49@01))
    ($Snap.second ($Snap.second $t@49@01)))))
(assert (= ($Snap.first ($Snap.second $t@49@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@49@01))))
(assert (= ($Snap.second ($Snap.second $t@49@01)) $Snap.unit))
; [eval] self.discriminant <= 2
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 2))
(pop) ; 5
; Joined path conditions
(assert (and
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@49@01 ret@48@01)
  (= $t@49@01 ($Snap.combine ($Snap.first $t@49@01) ($Snap.second $t@49@01)))
  (not (= ret@48@01 $Ref.null))
  (=
    ($Snap.second $t@49@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@49@01))
      ($Snap.second ($Snap.second $t@49@01))))
  (= ($Snap.first ($Snap.second $t@49@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)))
  (= ($Snap.second ($Snap.second $t@49@01)) $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 2)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 1))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | First:($t@49@01) == 1 | dead]
; [else-branch: 4 | First:($t@49@01) != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 4 | First:($t@49@01) != 1]
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 1)))
; [eval] ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) < (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) > (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant)
(push) ; 7
; [eval] 0 <= self.discriminant
; [eval] self.discriminant <= 2
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | First:($t@49@01) == 0 | dead]
; [else-branch: 5 | First:($t@49@01) != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 5 | First:($t@49@01) != 0]
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 0)))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) > (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@51@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@51@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 9
; Joined path conditions
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@52@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 1))
  (and
    (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 1))
    (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 0)))))
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@49@01)) 1)))
(set-option :timeout 0)
(push) ; 5
(assert (not (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [exec]
; assert true
; [exec]
; exhale acc(i32(_old$pre$0), write) && acc(i32(_old$pre$1), write)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@51@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@51@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@52@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 3 | val_bool@47@01]
(assert val_bool@47@01)
(pop) ; 4
; [eval] !!__t8
; [eval] !__t8
(push) ; 4
(set-option :timeout 10)
(assert (not (not val_bool@47@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not val_bool@47@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | val_bool@47@01 | live]
; [else-branch: 6 | !(val_bool@47@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | val_bool@47@01]
(assert val_bool@47@01)
; [exec]
; label l6
; [exec]
; label bb3
; [exec]
; __t3 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@53@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(declare-const $t@54@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) ==
;   0
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) == 0
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(assert (read$%precondition $Snap.unit))
(pop) ; 6
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@54@01 ret@53@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@54@01 ret@53@01)))
(assert (=
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@54@01 ret@53@01)
  0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb5
; [exec]
; __t5 := true
; [exec]
; label l8
; [exec]
; label bb6
; [exec]
; __t6 := true
; [exec]
; label return
; [exec]
; fold acc(i32(_1.val_ref), write)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@56@01 $Ref)
(assert (= _old$pre$0@56@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))))
; [exec]
; fold acc(i32(_2.val_ref), write)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _old$pre$1 := _2.val_ref
(declare-const _old$pre$1@57@01 $Ref)
(assert (=
  _old$pre$1@57@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))))
; [exec]
; assert (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) ==
;   old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int)) &&
;   ((unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;     _0.discriminant) ==
;   1 ?
;     (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) ==
;     (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) :
;     ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in
;       _0.discriminant) ==
;     0 ?
;       (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) <
;       (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) :
;       (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) >
;       (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int)
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@56@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@56@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
  ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$0@56@01))
(assert (not (= _old$pre$0@56@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@21@01)))
    ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$0@56@01)
  (not (= _old$pre$0@56@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int))
; [eval] (unfolding acc(i32(_1.val_ref), write) in _1.val_ref.val_int)
(set-option :timeout 0)
(push) ; 5
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@57@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
  ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$1@57@01))
(assert (not (= _old$pre$1@57@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))
    ($Snap.combine $Snap.unit $Snap.unit)) _old$pre$1@57@01)
  (not (= _old$pre$1@57@01 $Ref.null))))
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 5
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
; [eval] ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 1 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) < (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) > (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)))
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 1
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant)
(push) ; 5
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@54@01 ret@53@01))
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (not (= ret@53@01 $Ref.null)))
(assert (=
  ($Snap.second $t@54@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@54@01))
    ($Snap.second ($Snap.second $t@54@01)))))
(assert (= ($Snap.first ($Snap.second $t@54@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@54@01))))
(assert (= ($Snap.second ($Snap.second $t@54@01)) $Snap.unit))
; [eval] self.discriminant <= 2
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 2))
(pop) ; 5
; Joined path conditions
(assert (and
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@54@01 ret@53@01)
  (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01)))
  (not (= ret@53@01 $Ref.null))
  (=
    ($Snap.second $t@54@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@54@01))
      ($Snap.second ($Snap.second $t@54@01))))
  (= ($Snap.first ($Snap.second $t@54@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)))
  (= ($Snap.second ($Snap.second $t@54@01)) $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 2)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 1))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | First:($t@54@01) == 1 | dead]
; [else-branch: 7 | First:($t@54@01) != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 7 | First:($t@54@01) != 1]
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 1)))
; [eval] ((unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0 ? (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) < (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) : (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) > (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant) == 0
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write) in _0.discriminant)
(push) ; 7
; [eval] 0 <= self.discriminant
; [eval] self.discriminant <= 2
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | First:($t@54@01) == 0 | live]
; [else-branch: 8 | First:($t@54@01) != 0 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 8 | First:($t@54@01) == 0]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 0))
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int) < (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
; [eval] (unfolding acc(i32(_old$pre$0), write) in _old$pre$0.val_int)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@56@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@56@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 9
; Joined path conditions
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@57@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 1))
  (and
    (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 1))
    (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 0))))
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@54@01)) 1)))
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@21@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@21@01)))))))
; [exec]
; assert true
; [exec]
; exhale acc(i32(_old$pre$0), write) && acc(i32(_old$pre$1), write)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$0@56@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@21@01)) _old$pre$0@56@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@21@01))))
  _old$pre$1@57@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 6 | !(val_bool@47@01)]
(assert (not val_bool@47@01))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 2 | val_bool@33@01]
(assert val_bool@33@01)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- m_Binary_search$$main$opensqu$0$closesqu$ ----------
(declare-const _0@58@01 $Ref)
(declare-const _0@59@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@60@01 Bool)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; inhale true
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@62@01 $Snap)
(assert (= $t@62@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; _0 := builtin$havoc_ref()
(declare-const ret@65@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_0), write)
(declare-const $t@66@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label return
; [exec]
; assert true
; [exec]
; exhale acc(tuple0$(_0), write)
; [exec]
; label end_of_method
(pop) ; 2
(pop) ; 1
; ---------- m_Binary_search$$binary_search$opensqu$0$closesqu$ ----------
(declare-const _0@67@01 $Ref)
(declare-const _0@68@01 $Ref)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var __t0: Bool
(declare-const __t0@69@01 Bool)
; [exec]
; var __t1: Bool
(declare-const __t1@70@01 Bool)
; [exec]
; var __t2: Bool
(declare-const __t2@71@01 Bool)
; [exec]
; var __t3: Bool
(declare-const __t3@72@01 Bool)
; [exec]
; var __t4: Bool
(declare-const __t4@73@01 Bool)
; [exec]
; var __t5: Bool
(declare-const __t5@74@01 Bool)
; [exec]
; var __t6: Bool
(declare-const __t6@75@01 Bool)
; [exec]
; var __t7: Bool
(declare-const __t7@76@01 Bool)
; [exec]
; var __t8: Bool
(declare-const __t8@77@01 Bool)
; [exec]
; var __t9: Bool
(declare-const __t9@78@01 Bool)
; [exec]
; var __t10: Bool
(declare-const __t10@79@01 Bool)
; [exec]
; var __t11: Bool
(declare-const __t11@80@01 Bool)
; [exec]
; var __t12: Bool
(declare-const __t12@81@01 Bool)
; [exec]
; var __t13: Bool
(declare-const __t13@82@01 Bool)
; [exec]
; var __t14: Bool
(declare-const __t14@83@01 Bool)
; [exec]
; var __t15: Bool
(declare-const __t15@84@01 Bool)
; [exec]
; var __t16: Bool
(declare-const __t16@85@01 Bool)
; [exec]
; var __t17: Bool
(declare-const __t17@86@01 Bool)
; [exec]
; var __t18: Bool
(declare-const __t18@87@01 Bool)
; [exec]
; var __t19: Bool
(declare-const __t19@88@01 Bool)
; [exec]
; var __t20: Bool
(declare-const __t20@89@01 Bool)
; [exec]
; var __t21: Bool
(declare-const __t21@90@01 Bool)
; [exec]
; var __t22: Bool
(declare-const __t22@91@01 Bool)
; [exec]
; var __t23: Bool
(declare-const __t23@92@01 Bool)
; [exec]
; var __t24: Bool
(declare-const __t24@93@01 Bool)
; [exec]
; var __t25: Bool
(declare-const __t25@94@01 Bool)
; [exec]
; var _preserve$0: Ref
(declare-const _preserve$0@95@01 $Ref)
; [exec]
; var _preserve$1: Ref
(declare-const _preserve$1@96@01 $Ref)
; [exec]
; var __t26: Bool
(declare-const __t26@97@01 Bool)
; [exec]
; var __t27: Bool
(declare-const __t27@98@01 Bool)
; [exec]
; var _old$l14$0: Ref
(declare-const _old$l14$0@99@01 $Ref)
; [exec]
; var __t28: Int
(declare-const __t28@100@01 Int)
; [exec]
; var __t29: Bool
(declare-const __t29@101@01 Bool)
; [exec]
; var __t30: Bool
(declare-const __t30@102@01 Bool)
; [exec]
; var __t31: Bool
(declare-const __t31@103@01 Bool)
; [exec]
; var __t32: Bool
(declare-const __t32@104@01 Bool)
; [exec]
; var __t33: Bool
(declare-const __t33@105@01 Bool)
; [exec]
; var _old$pre$0: Ref
(declare-const _old$pre$0@106@01 $Ref)
; [exec]
; var _old$pre$1: Ref
(declare-const _old$pre$1@107@01 $Ref)
; [exec]
; var _1: Ref
(declare-const _1@108@01 $Ref)
; [exec]
; var _2: Ref
(declare-const _2@109@01 $Ref)
; [exec]
; var _3: Ref
(declare-const _3@110@01 $Ref)
; [exec]
; var _4: Ref
(declare-const _4@111@01 $Ref)
; [exec]
; var _5: Ref
(declare-const _5@112@01 $Ref)
; [exec]
; var _6: Ref
(declare-const _6@113@01 $Ref)
; [exec]
; var _7: Ref
(declare-const _7@114@01 $Ref)
; [exec]
; var _8: Int
(declare-const _8@115@01 Int)
; [exec]
; var _9: Ref
(declare-const _9@116@01 $Ref)
; [exec]
; var _10: Ref
(declare-const _10@117@01 $Ref)
; [exec]
; var _11: Ref
(declare-const _11@118@01 $Ref)
; [exec]
; var _12: Ref
(declare-const _12@119@01 $Ref)
; [exec]
; var _47: Int
(declare-const _47@120@01 Int)
; [exec]
; var _48: Int
(declare-const _48@121@01 Int)
; [exec]
; var _49: Ref
(declare-const _49@122@01 $Ref)
; [exec]
; var _50: Ref
(declare-const _50@123@01 $Ref)
; [exec]
; var _51: Int
(declare-const _51@124@01 Int)
; [exec]
; var _52: Int
(declare-const _52@125@01 Int)
; [exec]
; var _53: Ref
(declare-const _53@126@01 $Ref)
; [exec]
; var _54: Ref
(declare-const _54@127@01 $Ref)
; [exec]
; var _55: Ref
(declare-const _55@128@01 $Ref)
; [exec]
; var _56: Int
(declare-const _56@129@01 Int)
; [exec]
; var _57: Ref
(declare-const _57@130@01 $Ref)
; [exec]
; var _58: Ref
(declare-const _58@131@01 $Ref)
; [exec]
; var _59: Ref
(declare-const _59@132@01 $Ref)
; [exec]
; var _60: Ref
(declare-const _60@133@01 $Ref)
; [exec]
; var _61: Int
(declare-const _61@134@01 Int)
; [exec]
; var _62: Ref
(declare-const _62@135@01 $Ref)
; [exec]
; var _63: Int
(declare-const _63@136@01 Int)
; [exec]
; var _64: Ref
(declare-const _64@137@01 $Ref)
; [exec]
; var _65: Ref
(declare-const _65@138@01 $Ref)
; [exec]
; var _66: Ref
(declare-const _66@139@01 $Ref)
; [exec]
; var _67: Ref
(declare-const _67@140@01 $Ref)
; [exec]
; var _68: Int
(declare-const _68@141@01 Int)
; [exec]
; var _69: Ref
(declare-const _69@142@01 $Ref)
; [exec]
; var _70: Ref
(declare-const _70@143@01 $Ref)
; [exec]
; var _71: Ref
(declare-const _71@144@01 $Ref)
; [exec]
; var _72: Int
(declare-const _72@145@01 Int)
; [exec]
; var _73: Ref
(declare-const _73@146@01 $Ref)
; [exec]
; var _74: Ref
(declare-const _74@147@01 $Ref)
; [exec]
; var _75: Ref
(declare-const _75@148@01 $Ref)
; [exec]
; label start
; [exec]
; __t0 := false
; [exec]
; __t1 := false
; [exec]
; __t2 := false
; [exec]
; __t3 := false
; [exec]
; __t4 := false
; [exec]
; __t5 := false
; [exec]
; __t6 := false
; [exec]
; __t7 := false
; [exec]
; __t8 := false
; [exec]
; __t9 := false
; [exec]
; __t10 := false
; [exec]
; __t11 := false
; [exec]
; __t12 := false
; [exec]
; __t13 := false
; [exec]
; __t14 := false
; [exec]
; __t15 := false
; [exec]
; __t16 := false
; [exec]
; __t17 := false
; [exec]
; __t18 := false
; [exec]
; __t19 := false
; [exec]
; __t20 := false
; [exec]
; __t21 := false
; [exec]
; __t22 := false
; [exec]
; __t23 := false
; [exec]
; inhale acc(_1.val_ref, write) &&
;   (acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) &&
;   (acc(_2.val_ref, write) && acc(i32(_2.val_ref), write)))
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 ($Snap.combine ($Snap.first $t@149@01) ($Snap.second $t@149@01))))
(assert (not (= _1@108@01 $Ref.null)))
(assert (=
  ($Snap.second $t@149@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.second ($Snap.second $t@149@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@149@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@149@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@108@01 _2@109@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= _2@109@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall k1: Int, k2: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2) }
;     0 <= k1 &&
;     (k1 < k2 &&
;     k2 <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1) <=
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2))
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] (forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2))
(declare-const k1@153@01 Int)
(declare-const k2@154@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] 0 <= k1
(push) ; 4
; [then-branch: 9 | !(0 <= k1@153@01) | live]
; [else-branch: 9 | 0 <= k1@153@01 | live]
(push) ; 5
; [then-branch: 9 | !(0 <= k1@153@01)]
(assert (not (<= 0 k1@153@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | 0 <= k1@153@01]
(assert (<= 0 k1@153@01))
; [eval] k1 < k2
(push) ; 6
; [then-branch: 10 | !(k1@153@01 < k2@154@01) | live]
; [else-branch: 10 | k1@153@01 < k2@154@01 | live]
(push) ; 7
; [then-branch: 10 | !(k1@153@01 < k2@154@01)]
(assert (not (< k1@153@01 k2@154@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | k1@153@01 < k2@154@01]
(assert (< k1@153@01 k2@154@01))
; [eval] k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 8
; [eval] read$()
(push) ; 9
(assert (read$%precondition $Snap.unit))
(pop) ; 9
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(pop) ; 8
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (< k1@153@01 k2@154@01)
  (and
    (< k1@153@01 k2@154@01)
    (read$%precondition $Snap.unit)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(assert (or (< k1@153@01 k2@154@01) (not (< k1@153@01 k2@154@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 k1@153@01)
  (and
    (<= 0 k1@153@01)
    (=>
      (< k1@153@01 k2@154@01)
      (and
        (< k1@153@01 k2@154@01)
        (read$%precondition $Snap.unit)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
    (or (< k1@153@01 k2@154@01) (not (< k1@153@01 k2@154@01))))))
(assert (or (<= 0 k1@153@01) (not (<= 0 k1@153@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 11 | 0 <= k1@153@01 && k1@153@01 < k2@154@01 && k2@154@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01)) | live]
; [else-branch: 11 | !(0 <= k1@153@01 && k1@153@01 < k2@154@01 && k2@154@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01))) | live]
(push) ; 5
; [then-branch: 11 | 0 <= k1@153@01 && k1@153@01 < k2@154@01 && k2@154@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01))]
(assert (and
  (<= 0 k1@153@01)
  (and
    (< k1@153@01 k2@154@01)
    (<
      k2@154@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1)
(push) ; 6
; [eval] read$()
(push) ; 7
(assert (read$%precondition $Snap.unit))
(pop) ; 7
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(pop) ; 7
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  k1@153@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  k1@153@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 7
(assert (not (<= k1@153@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= k1@153@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (read$%precondition $Snap.unit)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))
  (<
    k1@153@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (<= k1@153@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 7
(assert (not (<= 0 k2@154@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k2@154@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 7
(assert (not (<= k2@154@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= k2@154@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (<= 0 k2@154@01)
  (<= k2@154@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | !(0 <= k1@153@01 && k1@153@01 < k2@154@01 && k2@154@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01)))]
(assert (not
  (and
    (<= 0 k1@153@01)
    (and
      (< k1@153@01 k2@154@01)
      (<
        k2@154@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 k1@153@01)
    (and
      (< k1@153@01 k2@154@01)
      (<
        k2@154@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
  (and
    (<= 0 k1@153@01)
    (< k1@153@01 k2@154@01)
    (<
      k2@154@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (read$%precondition $Snap.unit)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))
    (<
      k1@153@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (<= k1@153@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01)
    (<= 0 k2@154@01)
    (<= k2@154@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k1@153@01)
      (and
        (< k1@153@01 k2@154@01)
        (<
          k2@154@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
  (and
    (<= 0 k1@153@01)
    (and
      (< k1@153@01 k2@154@01)
      (<
        k2@154@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k1@153@01 Int) (k2@154@01 Int)) (!
  (and
    (=>
      (<= 0 k1@153@01)
      (and
        (<= 0 k1@153@01)
        (=>
          (< k1@153@01 k2@154@01)
          (and
            (< k1@153@01 k2@154@01)
            (read$%precondition $Snap.unit)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
        (or (< k1@153@01 k2@154@01) (not (< k1@153@01 k2@154@01)))))
    (or (<= 0 k1@153@01) (not (<= 0 k1@153@01)))
    (=>
      (and
        (<= 0 k1@153@01)
        (and
          (< k1@153@01 k2@154@01)
          (<
            k2@154@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (and
        (<= 0 k1@153@01)
        (< k1@153@01 k2@154@01)
        (<
          k2@154@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (read$%precondition $Snap.unit)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))
        (<
          k1@153@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= k1@153@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01)
        (<= 0 k2@154@01)
        (<= k2@154@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01)))
    (or
      (not
        (and
          (<= 0 k1@153@01)
          (and
            (< k1@153@01 k2@154@01)
            (<
              k2@154@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
      (and
        (<= 0 k1@153@01)
        (and
          (< k1@153@01 k2@154@01)
          (<
            k2@154@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@946@11@946@678-aux|)))
(assert (forall ((k1@153@01 Int) (k2@154@01 Int)) (!
  (=>
    (and
      (<= 0 k1@153@01)
      (and
        (< k1@153@01 k2@154@01)
        (<
          k2@154@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@153@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@946@11@946@678|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label pre
; [exec]
; label bb0
; [exec]
; __t0 := true
; [exec]
; _4 := builtin$havoc_ref()
(declare-const ret@155@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_4.val_ref, write)
(declare-const $t@156@01 $Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@155@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _4.val_ref := _1.val_ref
(declare-const val_ref@157@01 $Ref)
(assert (= val_ref@157@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 3
(assert (read$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (read$%precondition $Snap.unit))
(push) ; 3
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_4.val_ref), read$())
; [eval] read$()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@158@01 $Snap)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) val_ref@157@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $t@159@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@159@01 ($Snap.first ($Snap.second $t@149@01))))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@159@01 $t@158@01))))
(assert (<=
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    (read$ $Snap.unit))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l0
; [exec]
; label l1
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@160@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(usize(_3), write)
(declare-const $t@161@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(usize(_3), write)
(assert (= $t@161@01 ($Snap.combine ($Snap.first $t@161@01) ($Snap.second $t@161@01))))
(assert (not (= ret@160@01 $Ref.null)))
(assert (=
  ($Snap.second $t@161@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@161@01))
    ($Snap.second ($Snap.second $t@161@01)))))
(assert (= ($Snap.first ($Snap.second $t@161@01)) $Snap.unit))
; [eval] 0 <= self.val_int
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))))
(assert (= ($Snap.second ($Snap.second $t@161@01)) $Snap.unit))
; [eval] self.val_int <= 18446744073709551615
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (usize%trigger $t@161@01 ret@160@01))
; [exec]
; inhale _3.val_int ==
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_4.val_ref)
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 $Snap.unit))
; [eval] _3.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_4.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_4.val_ref)
(set-option :timeout 0)
(push) ; 3
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) val_ref@157@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@159@01
  $Snap.unit) val_ref@157@01))
(pop) ; 3
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@159@01
  $Snap.unit) val_ref@157@01))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@159@01
    $Snap.unit) val_ref@157@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l2
; [eval] __t0 && __t0
(set-option :timeout 0)
(push) ; 3
; [then-branch: 12 | False | live]
; [else-branch: 12 | True | live]
(push) ; 4
; [then-branch: 12 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | True | live]
; [else-branch: 13 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 13 | True]
; [exec]
; exhale acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(old[l0](_4.val_ref)), read$())
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] old[l0](_4.val_ref)
(push) ; 4
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) val_ref@157@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@163@01 $Snap)
(declare-const $t@164@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@164@01 $t@159@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@164@01 $t@163@01))))
(assert (<=
  $Perm.No
  (+
    (-
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    (- $Perm.Write (read$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label bb2
; [exec]
; __t1 := true
; [exec]
; _5 := builtin$havoc_ref()
(declare-const ret@165@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_5.val_int, write)
(declare-const $t@166@01 Int)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@160@01 ret@165@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@165@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _5.val_int := 0
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@160@01 ret@165@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; _6 := builtin$havoc_ref()
(declare-const ret@167@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write)
(declare-const $t@168@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) ==
;   1
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 $Snap.unit))
; [eval] m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) == 1
; [eval] m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)
(set-option :timeout 0)
(push) ; 4
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@168@01 ret@167@01))
(pop) ; 4
; Joined path conditions
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@168@01 ret@167@01))
(assert (=
  (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@168@01 ret@167@01)
  1))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _8 := builtin$havoc_int()
(declare-const ret@170@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _8 := _3.val_int
(declare-const _8@172@01 Int)
(assert (= _8@172@01 ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))))
; [exec]
; label l3
; [exec]
; _7 := builtin$havoc_ref()
(declare-const ret@173@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_7.val_bool, write)
(declare-const $t@174@01 Bool)
(assert (not (= ret@173@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _7.val_bool := _8 > 0
; [eval] _8 > 0
(declare-const val_bool@175@01 Bool)
(assert (= val_bool@175@01 (> _8@172@01 0)))
; [exec]
; label loop3_start
; [exec]
; label loop3_group1_bb3
; [exec]
; __t2 := true
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@176@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_10.val_bool, write)
(declare-const $t@177@01 Bool)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@176@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _10.val_bool := _7.val_bool
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= ret@173@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l4
; [exec]
; __t24 := _10.val_bool
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not val_bool@175@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not val_bool@175@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | val_bool@175@01 | live]
; [else-branch: 14 | !(val_bool@175@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 14 | val_bool@175@01]
(assert val_bool@175@01)
; [exec]
; label l6
; [exec]
; label loop3_group2_bb5
; [exec]
; __t3 := true
; [exec]
; __t25 := false
; [exec]
; label loop3_inv_pre
; [exec]
; _preserve$1 := _2.val_ref
(declare-const _preserve$1@178@01 $Ref)
(assert (=
  _preserve$1@178@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))))
; [exec]
; _preserve$0 := _1.val_ref
(declare-const _preserve$0@179@01 $Ref)
(assert (= _preserve$0@179@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
; [exec]
; fold acc(usize(_5), write)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap 0)
  ($Snap.combine $Snap.unit $Snap.unit)) ret@165@01))
; [exec]
; fold acc(usize(_3), write)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(assert (usize%trigger ($Snap.combine
  ($Snap.first $t@161@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ret@160@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@165@01 ret@160@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(bool(_7), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap val_bool@175@01) ret@173@01))
; [exec]
; assert !((unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) <
;   0 ||
;   (unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) >
;   18446744073709551615) &&
;   ((unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;   ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==
;   old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) &&
;   ((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((forall k1: Int, k2: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2) }
;     0 <= k1 &&
;     (k1 < k2 &&
;     k2 <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1) <=
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2)) &&
;   ((forall k: Int ::
;     { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k)) }
;     0 <= k &&
;     k <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k) ==
;     old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k))) &&
;   ((unfolding acc(usize(_5), write) in
;     (unfolding acc(i32(_2.val_ref), write) in
;       (forall k: Int ::
;         { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         k) }
;         0 <= k && k < _5.val_int ==>
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         k) <
;         _2.val_ref.val_int))) &&
;   ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;   (unfolding acc(usize(_5), write) in
;     (unfolding acc(i32(_2.val_ref), write) in
;       (unfolding acc(usize(_3), write) in
;         (let _LET_0 ==
;           (_5.val_int + _3.val_int) in
;           (forall k: Int ::
;             { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;             k) }
;             !(_LET_0 < 0 || _LET_0 > 18446744073709551615) &&
;             (_LET_0 <= k &&
;             k <
;             m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;             _2.val_ref.val_int <
;             m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;             k))))))) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;   0 <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) <
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) ==
;   (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))))))))))))
; [eval] !((unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0 || (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0 || (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 5
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(push) ; 5
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 5
; Joined path conditions
(push) ; 5
; [then-branch: 15 | First:($t@161@01) < 0 | live]
; [else-branch: 15 | !(First:($t@161@01) < 0) | live]
(push) ; 6
; [then-branch: 15 | First:($t@161@01) < 0]
(assert (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0))
(pop) ; 6
(push) ; 6
; [else-branch: 15 | !(First:($t@161@01) < 0)]
(assert (not (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)))
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(push) ; 7
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 7
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(push) ; 7
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 7
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0))
  (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)))
(push) ; 5
(assert (not (not
  (or
    (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
    (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (or
    (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
    (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615))))
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(push) ; 5
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 5
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(push) ; 5
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 5
; Joined path conditions
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@164@01
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@164@01
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(set-option :timeout 0)
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] (unfolding acc(usize(_3), write) in _3.val_int) > 0
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(push) ; 5
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(push) ; 5
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@149@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@149@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
  $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
  $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
  2147483647))
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@149@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@149@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
      $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    2147483647)))
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(push) ; 5
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
; [eval] (forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2))
(declare-const k1@180@01 Int)
(declare-const k2@181@01 Int)
(push) ; 5
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] 0 <= k1
(push) ; 6
; [then-branch: 16 | !(0 <= k1@180@01) | live]
; [else-branch: 16 | 0 <= k1@180@01 | live]
(push) ; 7
; [then-branch: 16 | !(0 <= k1@180@01)]
(assert (not (<= 0 k1@180@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 16 | 0 <= k1@180@01]
(assert (<= 0 k1@180@01))
; [eval] k1 < k2
(push) ; 8
; [then-branch: 17 | !(k1@180@01 < k2@181@01) | live]
; [else-branch: 17 | k1@180@01 < k2@181@01 | live]
(push) ; 9
; [then-branch: 17 | !(k1@180@01 < k2@181@01)]
(assert (not (< k1@180@01 k2@181@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 17 | k1@180@01 < k2@181@01]
(assert (< k1@180@01 k2@181@01))
; [eval] k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (< k1@180@01 k2@181@01) (not (< k1@180@01 k2@181@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 k1@180@01)
  (and
    (<= 0 k1@180@01)
    (or (< k1@180@01 k2@181@01) (not (< k1@180@01 k2@181@01))))))
(assert (or (<= 0 k1@180@01) (not (<= 0 k1@180@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 18 | 0 <= k1@180@01 && k1@180@01 < k2@181@01 && k2@181@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01)) | live]
; [else-branch: 18 | !(0 <= k1@180@01 && k1@180@01 < k2@181@01 && k2@181@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01))) | live]
(push) ; 7
; [then-branch: 18 | 0 <= k1@180@01 && k1@180@01 < k2@181@01 && k2@181@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01))]
(assert (and
  (<= 0 k1@180@01)
  (and
    (< k1@180@01 k2@181@01)
    (<
      k2@181@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  k1@180@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  k1@180@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 9
(assert (not (<= k1@180@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= k1@180@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (<
    k1@180@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@164@01
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (<= k1@180@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 9
(assert (not (<= 0 k2@181@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k2@181@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 9
(assert (not (<= k2@181@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= k2@181@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= 0 k2@181@01)
  (<= k2@181@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 18 | !(0 <= k1@180@01 && k1@180@01 < k2@181@01 && k2@181@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01)))]
(assert (not
  (and
    (<= 0 k1@180@01)
    (and
      (< k1@180@01 k2@181@01)
      (<
        k2@181@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 k1@180@01)
    (and
      (< k1@180@01 k2@181@01)
      (<
        k2@181@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
  (and
    (<= 0 k1@180@01)
    (< k1@180@01 k2@181@01)
    (<
      k2@181@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (<
      k1@180@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (<= k1@180@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)
    (<= 0 k2@181@01)
    (<= k2@181@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k1@180@01)
      (and
        (< k1@180@01 k2@181@01)
        (<
          k2@181@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
  (and
    (<= 0 k1@180@01)
    (and
      (< k1@180@01 k2@181@01)
      (<
        k2@181@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k1@180@01 Int) (k2@181@01 Int)) (!
  (and
    (=>
      (<= 0 k1@180@01)
      (and
        (<= 0 k1@180@01)
        (or (< k1@180@01 k2@181@01) (not (< k1@180@01 k2@181@01)))))
    (or (<= 0 k1@180@01) (not (<= 0 k1@180@01)))
    (=>
      (and
        (<= 0 k1@180@01)
        (and
          (< k1@180@01 k2@181@01)
          (<
            k2@181@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (and
        (<= 0 k1@180@01)
        (< k1@180@01 k2@181@01)
        (<
          k2@181@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<
          k1@180@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= k1@180@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)
        (<= 0 k2@181@01)
        (<= k2@181@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01)))
    (or
      (not
        (and
          (<= 0 k1@180@01)
          (and
            (< k1@180@01 k2@181@01)
            (<
              k2@181@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
      (and
        (<= 0 k1@180@01)
        (and
          (< k1@180@01 k2@181@01)
          (<
            k2@181@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@1332@1898@1999-aux|)))
(assert (forall ((k1@180@01 Int) (k2@181@01 Int)) (!
  (and
    (=>
      (and (<= 0 k1@180@01) (< k1@180@01 k2@181@01))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (=>
      (and
        (<= 0 k1@180@01)
        (and
          (< k1@180@01 k2@181@01)
          (<
            k2@181@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@1332@1898@1999_precondition|)))
(push) ; 5
(assert (not (forall ((k1@180@01 Int) (k2@181@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (and (<= 0 k1@180@01) (< k1@180@01 k2@181@01))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (=>
          (and
            (<= 0 k1@180@01)
            (and
              (< k1@180@01 k2@181@01)
              (<
                k2@181@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              $t@164@01
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              $t@164@01
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))))
      (and
        (<= 0 k1@180@01)
        (and
          (< k1@180@01 k2@181@01)
          (<
            k2@181@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@1332@1898@1999|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k1@180@01 Int) (k2@181@01 Int)) (!
  (=>
    (and
      (<= 0 k1@180@01)
      (and
        (< k1@180@01 k2@181@01)
        (<
          k2@181@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k1@180@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k2@181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@1332@1898@1999|)))
; [eval] (forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
(declare-const k@182@01 Int)
(push) ; 5
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] 0 <= k
(push) ; 6
; [then-branch: 19 | !(0 <= k@182@01) | live]
; [else-branch: 19 | 0 <= k@182@01 | live]
(push) ; 7
; [then-branch: 19 | !(0 <= k@182@01)]
(assert (not (<= 0 k@182@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 19 | 0 <= k@182@01]
(assert (<= 0 k@182@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@182@01) (not (<= 0 k@182@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 20 | 0 <= k@182@01 && k@182@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01)) | live]
; [else-branch: 20 | !(0 <= k@182@01 && k@182@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01))) | live]
(push) ; 7
; [then-branch: 20 | 0 <= k@182@01 && k@182@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01))]
(assert (and
  (<= 0 k@182@01)
  (<
    k@182@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@164@01
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 9
(assert (not (<= k@182@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= k@182@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= k@182@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  k@182@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@182@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (<
    k@182@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 20 | !(0 <= k@182@01 && k@182@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01)))]
(assert (not
  (and
    (<= 0 k@182@01)
    (<
      k@182@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@182@01)
    (<
      k@182@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
  (and
    (<= 0 k@182@01)
    (<
      k@182@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (<= k@182@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)
    (<
      k@182@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@182@01)
      (<
        k@182@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
  (and
    (<= 0 k@182@01)
    (<
      k@182@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@182@01 Int)) (!
  (and
    (or (<= 0 k@182@01) (not (<= 0 k@182@01)))
    (=>
      (and
        (<= 0 k@182@01)
        (<
          k@182@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
      (and
        (<= 0 k@182@01)
        (<
          k@182@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= k@182@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)
        (<
          k@182@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)))
    (or
      (not
        (and
          (<= 0 k@182@01)
          (<
            k@182@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (and
        (<= 0 k@182@01)
        (<
          k@182@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2006@1898@2656-aux|)))
(assert (forall ((k@182@01 Int)) (!
  (and
    (=>
      (<= 0 k@182@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (=>
      (and
        (<= 0 k@182@01)
        (<
          k@182@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2006@1898@2656_precondition|)))
(push) ; 5
(assert (not (forall ((k@182@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (<= 0 k@182@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (=>
          (and
            (<= 0 k@182@01)
            (<
              k@182@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              $t@164@01
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))))
      (and
        (<= 0 k@182@01)
        (<
          k@182@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2006@1898@2656|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@182@01 Int)) (!
  (=>
    (and
      (<= 0 k@182@01)
      (<
        k@182@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@182@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2006@1898@2656|)))
; [eval] (unfolding acc(usize(_5), write) in (unfolding acc(i32(_2.val_ref), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)))
(push) ; 5
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (unfolding acc(i32(_2.val_ref), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ret@165@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)
(declare-const k@183@01 Int)
(set-option :timeout 0)
(push) ; 7
; [eval] 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] 0 <= k && k < _5.val_int
; [eval] 0 <= k
(push) ; 8
; [then-branch: 21 | !(0 <= k@183@01) | live]
; [else-branch: 21 | 0 <= k@183@01 | live]
(push) ; 9
; [then-branch: 21 | !(0 <= k@183@01)]
(assert (not (<= 0 k@183@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 21 | 0 <= k@183@01]
(assert (<= 0 k@183@01))
; [eval] k < _5.val_int
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@183@01) (not (<= 0 k@183@01))))
(push) ; 8
; [then-branch: 22 | 0 <= k@183@01 && k@183@01 < 0 | live]
; [else-branch: 22 | !(0 <= k@183@01 && k@183@01 < 0) | live]
(push) ; 9
; [then-branch: 22 | 0 <= k@183@01 && k@183@01 < 0]
(assert (and (<= 0 k@183@01) (< k@183@01 0)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  k@183@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@183@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 11
(assert (not (<= k@183@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= k@183@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (<
    k@183@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@164@01
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (<= k@183@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 22 | !(0 <= k@183@01 && k@183@01 < 0)]
(assert (not (and (<= 0 k@183@01) (< k@183@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (and (<= 0 k@183@01) (< k@183@01 0))
  (and
    (<= 0 k@183@01)
    (< k@183@01 0)
    (<
      k@183@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (<= k@183@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))))
; Joined path conditions
(assert (or
  (not (and (<= 0 k@183@01) (< k@183@01 0)))
  (and (<= 0 k@183@01) (< k@183@01 0))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@183@01 Int)) (!
  (and
    (or (<= 0 k@183@01) (not (<= 0 k@183@01)))
    (=>
      (and (<= 0 k@183@01) (< k@183@01 0))
      (and
        (<= 0 k@183@01)
        (< k@183@01 0)
        (<
          k@183@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= k@183@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01)))
    (or
      (not (and (<= 0 k@183@01) (< k@183@01 0)))
      (and (<= 0 k@183@01) (< k@183@01 0))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2741@1898@3012-aux|)))
(pop) ; 6
; Joined path conditions
(assert (forall ((k@183@01 Int)) (!
  (and
    (or (<= 0 k@183@01) (not (<= 0 k@183@01)))
    (=>
      (and (<= 0 k@183@01) (< k@183@01 0))
      (and
        (<= 0 k@183@01)
        (< k@183@01 0)
        (<
          k@183@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= k@183@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01)))
    (or
      (not (and (<= 0 k@183@01) (< k@183@01 0)))
      (and (<= 0 k@183@01) (< k@183@01 0))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2741@1898@3012-aux|)))
(pop) ; 5
; Joined path conditions
(assert (forall ((k@183@01 Int)) (!
  (and
    (or (<= 0 k@183@01) (not (<= 0 k@183@01)))
    (=>
      (and (<= 0 k@183@01) (< k@183@01 0))
      (and
        (<= 0 k@183@01)
        (< k@183@01 0)
        (<
          k@183@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= k@183@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01)))
    (or
      (not (and (<= 0 k@183@01) (< k@183@01 0)))
      (and (<= 0 k@183@01) (< k@183@01 0))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2741@1898@3012-aux|)))
(assert (forall ((k@183@01 Int)) (!
  (=>
    (and (<= 0 k@183@01) (< k@183@01 0))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2741@1898@3012_precondition|)))
(push) ; 5
(assert (not (forall ((k@183@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 k@183@01) (< k@183@01 0))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
      (and (<= 0 k@183@01) (< k@183@01 0)))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2741@1898@3012|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@183@01 Int)) (!
  (=>
    (and (<= 0 k@183@01) (< k@183@01 0))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@2741@1898@3012|)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (unfolding acc(usize(_5), write) in (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01) | live]
; [else-branch: 23 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 23 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01)]
; [eval] (unfolding acc(usize(_5), write) in (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))))
(push) ; 7
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ret@165@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (unfolding acc(usize(_3), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
  ret@160@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@165@01 ret@160@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
; [eval] _5.val_int + _3.val_int
(declare-const letvar@184@01 Int)
(assert (= (as letvar@184@01  Int) ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))))
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
(declare-const k@185@01 Int)
(set-option :timeout 0)
(push) ; 10
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615)
; [eval] _LET_0 < 0 || _LET_0 > 18446744073709551615
; [eval] _LET_0 < 0
(push) ; 11
; [then-branch: 24 | First:($t@161@01) < 0 | live]
; [else-branch: 24 | !(First:($t@161@01) < 0) | live]
(push) ; 12
; [then-branch: 24 | First:($t@161@01) < 0]
(assert (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0))
(pop) ; 12
(push) ; 12
; [else-branch: 24 | !(First:($t@161@01) < 0)]
(assert (not (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)))
; [eval] _LET_0 > 18446744073709551615
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 25 | First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615 | live]
; [else-branch: 25 | !(First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615) | live]
(push) ; 12
; [then-branch: 25 | First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615]
(assert (or
  (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
  (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
(pop) ; 12
(push) ; 12
; [else-branch: 25 | !(First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615)]
; [eval] _LET_0 <= k
(push) ; 13
; [then-branch: 26 | !(First:($t@161@01) <= k@185@01) | live]
; [else-branch: 26 | First:($t@161@01) <= k@185@01 | live]
(push) ; 14
; [then-branch: 26 | !(First:($t@161@01) <= k@185@01)]
(assert (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 26 | First:($t@161@01) <= k@185@01]
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
  (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (or
    (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
    (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)))))
(assert (or
  (not
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (or
    (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
    (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 27 | !(First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615) && First:($t@161@01) <= k@185@01 && k@185@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01)) | live]
; [else-branch: 27 | !(!(First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615) && First:($t@161@01) <= k@185@01 && k@185@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01))) | live]
(push) ; 12
; [then-branch: 27 | !(First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615) && First:($t@161@01) <= k@185@01 && k@185@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01))]
(assert (and
  (not
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (and
    (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
    (<
      k@185@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
; [eval] _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 14
(assert (not (<= 0 k@185@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k@185@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 14
(assert (not (<= k@185@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (<= k@185@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (<= 0 k@185@01)
  (<= k@185@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(!(First:($t@161@01) < 0 || First:($t@161@01) > 18446744073709551615) && First:($t@161@01) <= k@185@01 && k@185@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), First:($t@149@01)))]
(assert (not
  (and
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (and
      (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
      (<
        k@185@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (and
      (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
      (<
        k@185@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
  (and
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
    (<
      k@185@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (<= 0 k@185@01)
    (<= k@185@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (or
          (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
          (>
            ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
            18446744073709551615)))
      (and
        (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
        (<
          k@185@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
  (and
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (and
      (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
      (<
        k@185@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (or
  (not
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (or
    (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
    (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615))))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@185@01 Int)) (!
  (and
    (=>
      (not
        (or
          (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
          (>
            ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
            18446744073709551615)))
      (or
        (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
        (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))))
    (=>
      (and
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (and
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (and
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
        (<
          k@185@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (<= 0 k@185@01)
        (<= k@185@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
    (or
      (not
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
      (and
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (and
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882-aux|)))
(pop) ; 9
; Joined path conditions
(assert (and
  (= (as letvar@184@01  Int) ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)))
  (or
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (forall ((k@185@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (or
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))))
      (=>
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
          (<= 0 k@185@01)
          (<= k@185@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            $t@164@01
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
      (or
        (not
          (and
            (not
              (or
                (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                  18446744073709551615)))
            (and
              (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
              (<
                k@185@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882-aux|))))
(pop) ; 8
; Joined path conditions
(assert (and
  (= (as letvar@184@01  Int) ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)))
  (or
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (forall ((k@185@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (or
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))))
      (=>
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
          (<= 0 k@185@01)
          (<= k@185@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            $t@164@01
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
      (or
        (not
          (and
            (not
              (or
                (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                  18446744073709551615)))
            (and
              (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
              (<
                k@185@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882-aux|))))
(pop) ; 7
; Joined path conditions
(assert (and
  (= (as letvar@184@01  Int) ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)))
  (or
    (not
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (or
      (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
      (> ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 18446744073709551615)))
  (forall ((k@185@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (or
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (not (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))))
      (=>
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
          (<= 0 k@185@01)
          (<= k@185@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            $t@164@01
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
      (or
        (not
          (and
            (not
              (or
                (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                  18446744073709551615)))
            (and
              (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
              (<
                k@185@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
        (and
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (and
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882-aux|))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)
  (and
    (=
      (as letvar@184@01  Int)
      ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)))
    (or
      (not
        (or
          (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
          (>
            ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
            18446744073709551615)))
      (or
        (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
        (>
          ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
          18446744073709551615)))
    (forall ((k@185@01 Int)) (!
      (and
        (=>
          (not
            (or
              (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
              (>
                ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                18446744073709551615)))
          (or
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (not
              (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01))))
        (=>
          (and
            (not
              (or
                (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                  18446744073709551615)))
            (and
              (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
              (<
                k@185@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
          (and
            (not
              (or
                (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                  18446744073709551615)))
            (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
            (<
              k@185@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
            (<= 0 k@185@01)
            (<= k@185@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              $t@164@01
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
        (or
          (not
            (and
              (not
                (or
                  (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                  (>
                    ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                    18446744073709551615)))
              (and
                (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
                (<
                  k@185@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    $t@164@01
                    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
          (and
            (not
              (or
                (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
                  18446744073709551615)))
            (and
              (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
              (<
                k@185@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882-aux|)))))
(push) ; 5
(assert (not (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)
  (forall ((k@185@01 Int)) (!
    (=>
      (and
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (and
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)
  (forall ((k@185@01 Int)) (!
    (=>
      (and
        (not
          (or
            (< ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) 0)
            (>
              ($SortWrappers.$SnapToInt ($Snap.first $t@161@01))
              18446744073709551615)))
        (and
          (<= ($SortWrappers.$SnapToInt ($Snap.first $t@161@01)) k@185@01)
          (<
            k@185@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@185@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1898@3372@1898@3882|))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01) | dead]
; [else-branch: 28 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 28 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)))
; [exec]
; assert _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
; [eval] _preserve$0 == _1.val_ref
; [eval] _preserve$1 == _2.val_ref
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write) &&
;   (acc(usize(_5), write) &&
;   (acc(usize(_3), write) &&
;   (acc(bool(_7), write) &&
;   (acc(_1.val_ref, read$()) &&
;   (acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) &&
;   (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))))
(assert (<= (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.Write))
(assert (=>
  (< $Perm.No (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))))
  (not (= _1@108@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (= (- (read$ $Snap.unit) ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.No)
  (< (- (read$ $Snap.unit) ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] read$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))))
  (not (= _2@109@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (= (- (read$ $Snap.unit) ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.No)
  (< (- (read$ $Snap.unit) ($Perm.min $Perm.Write (read$ $Snap.unit))) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t29 := builtin$havoc_bool()
(declare-const ret@186@01 Bool)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __t31 := builtin$havoc_bool()
(declare-const ret@187@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _61 := builtin$havoc_int()
(declare-const ret@188@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _47 := builtin$havoc_int()
(declare-const ret@189@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t15 := builtin$havoc_bool()
(declare-const ret@190@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _50 := builtin$havoc_ref()
(declare-const ret@191@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@192@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t9 := builtin$havoc_bool()
(declare-const ret@193@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t10 := builtin$havoc_bool()
(declare-const ret@194@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t28 := builtin$havoc_int()
(declare-const ret@195@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _64 := builtin$havoc_ref()
(declare-const ret@196@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t26 := builtin$havoc_bool()
(declare-const ret@197@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _68 := builtin$havoc_int()
(declare-const ret@198@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _63 := builtin$havoc_int()
(declare-const ret@199@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t14 := builtin$havoc_bool()
(declare-const ret@200@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t16 := builtin$havoc_bool()
(declare-const ret@201@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _72 := builtin$havoc_int()
(declare-const ret@202@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t12 := builtin$havoc_bool()
(declare-const ret@203@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t21 := builtin$havoc_bool()
(declare-const ret@204@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t22 := builtin$havoc_bool()
(declare-const ret@205@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _73 := builtin$havoc_ref()
(declare-const ret@206@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _57 := builtin$havoc_ref()
(declare-const ret@207@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t30 := builtin$havoc_bool()
(declare-const ret@208@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _7 := builtin$havoc_ref()
(declare-const ret@209@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t3 := builtin$havoc_bool()
(declare-const ret@210@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _6 := builtin$havoc_ref()
(declare-const ret@211@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t19 := builtin$havoc_bool()
(declare-const ret@212@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t33 := builtin$havoc_bool()
(declare-const ret@213@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _3 := builtin$havoc_ref()
(declare-const ret@214@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _5 := builtin$havoc_ref()
(declare-const ret@215@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t13 := builtin$havoc_bool()
(declare-const ret@216@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@217@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t5 := builtin$havoc_bool()
(declare-const ret@218@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _62 := builtin$havoc_ref()
(declare-const ret@219@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t20 := builtin$havoc_bool()
(declare-const ret@220@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t2 := builtin$havoc_bool()
(declare-const ret@221@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _59 := builtin$havoc_ref()
(declare-const ret@222@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t17 := builtin$havoc_bool()
(declare-const ret@223@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _60 := builtin$havoc_ref()
(declare-const ret@224@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _54 := builtin$havoc_ref()
(declare-const ret@225@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t18 := builtin$havoc_bool()
(declare-const ret@226@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t8 := builtin$havoc_bool()
(declare-const ret@227@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t4 := builtin$havoc_bool()
(declare-const ret@228@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t6 := builtin$havoc_bool()
(declare-const ret@229@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _65 := builtin$havoc_ref()
(declare-const ret@230@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t11 := builtin$havoc_bool()
(declare-const ret@231@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _74 := builtin$havoc_ref()
(declare-const ret@232@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _56 := builtin$havoc_int()
(declare-const ret@233@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@234@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t27 := builtin$havoc_bool()
(declare-const ret@235@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _12 := builtin$havoc_ref()
(declare-const ret@236@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _58 := builtin$havoc_ref()
(declare-const ret@237@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t32 := builtin$havoc_bool()
(declare-const ret@238@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _66 := builtin$havoc_ref()
(declare-const ret@239@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _52 := builtin$havoc_int()
(declare-const ret@240@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _70 := builtin$havoc_ref()
(declare-const ret@241@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __t7 := builtin$havoc_bool()
(declare-const ret@242@01 Bool)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _48 := builtin$havoc_int()
(declare-const ret@243@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _51 := builtin$havoc_int()
(declare-const ret@244@01 Int)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _55 := builtin$havoc_ref()
(declare-const ret@245@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _53 := builtin$havoc_ref()
(declare-const ret@246@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _67 := builtin$havoc_ref()
(declare-const ret@247@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _11 := builtin$havoc_ref()
(declare-const ret@248@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; _49 := builtin$havoc_ref()
(declare-const ret@249@01 $Ref)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; label loop3_inv_post
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write) &&
;   (acc(usize(_5), write) &&
;   (acc(usize(_3), write) &&
;   (acc(bool(_7), write) &&
;   (acc(_1.val_ref, read$()) &&
;   (acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) &&
;   (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 ($Snap.combine ($Snap.first $t@250@01) ($Snap.second $t@250@01))))
(assert (=
  ($Snap.second $t@250@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@250@01))
    ($Snap.second ($Snap.second $t@250@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@250@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@250@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@250@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@250@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
; [eval] read$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@251@01 $Ref)
(assert (and
  (=>
    (< $Perm.No (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))))
    (= $t@251@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (=>
    (< $Perm.No (read$ $Snap.unit))
    (=
      $t@251@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
(assert (<=
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit))))
(assert (<=
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= _1@108@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
; [eval] read$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@252@01 $Ref)
(assert (and
  (=>
    (< $Perm.No (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit))))
    (=
      $t@252@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))))
  (=>
    (< $Perm.No (read$ $Snap.unit))
    (=
      $t@252@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))))
(assert (=>
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= _2@109@01 $Ref.null))))
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
(declare-const $t@253@01 $Snap)
(assert (= $t@253@01 ($Snap.combine ($Snap.first $t@253@01) ($Snap.second $t@253@01))))
(assert (= ($Snap.first $t@253@01) $Snap.unit))
; [eval] _preserve$0 == _1.val_ref
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= _preserve$0@179@01 $t@251@01))
(assert (= ($Snap.second $t@253@01) $Snap.unit))
; [eval] _preserve$1 == _2.val_ref
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= _preserve$1@178@01 $t@252@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(usize(_5), write) in
;     (unfolding acc(usize(_3), write) in
;       (unfolding acc(i32(_2.val_ref), write) in
;         !(_5.val_int + _3.val_int < 0 ||
;         _5.val_int + _3.val_int > 18446744073709551615) &&
;         (_5.val_int + _3.val_int <=
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;         (_3.val_int > 0 &&
;         (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) &&
;         (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==
;         old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) &&
;         (_2.val_ref.val_int ==
;         old[pre]((unfolding acc(i32(_2.val_ref), write) in
;           _2.val_ref.val_int)) &&
;         ((forall k1: Int, k2: Int ::
;           { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k2) }
;           0 <= k1 &&
;           (k1 < k2 &&
;           k2 <
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k1) <=
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k2)) &&
;         ((forall k: Int ::
;           { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k)) }
;           0 <= k &&
;           k <
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==>
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k) ==
;           old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k))) &&
;         ((forall k: Int ::
;           { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k) }
;           0 <= k && k < _5.val_int ==>
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k) <
;           _2.val_ref.val_int) &&
;         ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;         (forall k: Int ::
;           { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k) }
;           !(_5.val_int + _3.val_int < 0 ||
;           _5.val_int + _3.val_int > 18446744073709551615) &&
;           (_5.val_int + _3.val_int <= k &&
;           k <
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;           _2.val_ref.val_int <
;           m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;           k))) &&
;         (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;         0 <=
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) &&
;         (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) <
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) ==
;         _2.val_ref.val_int))))))))))))))
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 $Snap.unit))
; [eval] (unfolding acc(usize(_5), write) in (unfolding acc(usize(_3), write) in (unfolding acc(i32(_2.val_ref), write) in !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && (_3.val_int > 0 && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) && (_2.val_ref.val_int == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) && ((forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)) && ((forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && ((forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int) && ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == _2.val_ref.val_int))))))))))))))
(set-option :timeout 0)
(push) ; 5
(assert (usize%trigger ($Snap.first ($Snap.second $t@250@01)) ret@215@01))
(assert (=
  ($Snap.first ($Snap.second $t@250@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@250@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@250@01))))))
(assert (not (= ret@215@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@250@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@250@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@250@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@250@01))))
  $Snap.unit))
; [eval] 0 <= self.val_int
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@250@01))))
  $Snap.unit))
; [eval] self.val_int <= 18446744073709551615
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
  18446744073709551615))
; [eval] (unfolding acc(usize(_3), write) in (unfolding acc(i32(_2.val_ref), write) in !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && (_3.val_int > 0 && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) && (_2.val_ref.val_int == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) && ((forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)) && ((forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && ((forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int) && ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == _2.val_ref.val_int)))))))))))))
(push) ; 6
(assert (usize%trigger ($Snap.first ($Snap.second ($Snap.second $t@250@01))) ret@214@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@250@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@214@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
  $Snap.unit))
; [eval] 0 <= self.val_int
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
  $Snap.unit))
; [eval] self.val_int <= 18446744073709551615
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
  18446744073709551615))
; [eval] (unfolding acc(i32(_2.val_ref), write) in !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && (_3.val_int > 0 && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) && (_2.val_ref.val_int == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) && ((forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)) && ((forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && ((forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int) && ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == _2.val_ref.val_int))))))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))) $t@252@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@252@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
  $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
  $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
  2147483647))
; [eval] !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && (_3.val_int > 0 && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) && (_2.val_ref.val_int == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) && ((forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)) && ((forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && ((forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int) && ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == _2.val_ref.val_int)))))))))))
; [eval] !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615)
; [eval] _5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615
; [eval] _5.val_int + _3.val_int < 0
; [eval] _5.val_int + _3.val_int
(set-option :timeout 0)
(push) ; 8
; [then-branch: 29 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 | live]
; [else-branch: 29 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0) | live]
(push) ; 9
; [then-branch: 29 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0]
(assert (<
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 29 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0)]
(assert (not
  (<
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    0)))
; [eval] _5.val_int + _3.val_int > 18446744073709551615
; [eval] _5.val_int + _3.val_int
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0))
  (<
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    0)))
(push) ; 8
; [then-branch: 30 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615 | live]
; [else-branch: 30 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) | live]
(push) ; 9
; [then-branch: 30 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615]
(assert (or
  (<
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    0)
  (>
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    18446744073709551615)))
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615)]
(assert (not
  (or
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0)
    (>
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      18446744073709551615))))
; [eval] _5.val_int + _3.val_int <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] _5.val_int + _3.val_int
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  $Snap.unit) $t@251@01))
(pop) ; 10
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  $Snap.unit) $t@251@01))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 31 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)) | live]
; [else-branch: 31 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) | live]
(push) ; 11
; [then-branch: 31 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01))]
(assert (not
  (<=
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 31 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)]
(assert (<=
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)))
; [eval] _3.val_int > 0
(push) ; 12
; [then-branch: 32 | !(First:(First:(Second:(Second:($t@250@01)))) > 0) | live]
; [else-branch: 32 | First:(First:(Second:(Second:($t@250@01)))) > 0 | live]
(push) ; 13
; [then-branch: 32 | !(First:(First:(Second:(Second:($t@250@01)))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    0)))
(pop) ; 13
(push) ; 13
; [else-branch: 32 | First:(First:(Second:(Second:($t@250@01)))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
  0))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 14
; [eval] read$()
(push) ; 15
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first $t@250@01)
  $Snap.unit) ret@211@01))
(pop) ; 14
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first $t@250@01)
  $Snap.unit) ret@211@01))
(set-option :timeout 0)
(push) ; 14
; [then-branch: 33 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01)) | live]
; [else-branch: 33 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) | live]
(push) ; 15
; [then-branch: 33 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 33 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01)]
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  ($Snap.first $t@250@01)
  $Snap.unit) ret@211@01))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(set-option :timeout 0)
(push) ; 16
; [then-branch: 34 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) != m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01)) | live]
; [else-branch: 34 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01)) | live]
(push) ; 17
; [then-branch: 34 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) != m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01))]
(assert (not
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(pop) ; 17
(push) ; 17
; [else-branch: 34 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:($t@149@01)), _), First:($t@149@01))]
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] _2.val_ref.val_int == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
(push) ; 18
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 18
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 18
; Joined path conditions
(push) ; 18
; [then-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) != First:(Second:(Second:(Second:($t@149@01)))) | live]
; [else-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) == First:(Second:(Second:(Second:($t@149@01)))) | live]
(push) ; 19
; [then-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) != First:(Second:(Second:(Second:($t@149@01))))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))
(pop) ; 19
(push) ; 19
; [else-branch: 35 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) == First:(Second:(Second:(Second:($t@149@01))))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
; [eval] (forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2))
(declare-const k1@255@01 Int)
(declare-const k2@256@01 Int)
(push) ; 20
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] 0 <= k1
(push) ; 21
; [then-branch: 36 | !(0 <= k1@255@01) | live]
; [else-branch: 36 | 0 <= k1@255@01 | live]
(push) ; 22
; [then-branch: 36 | !(0 <= k1@255@01)]
(assert (not (<= 0 k1@255@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 36 | 0 <= k1@255@01]
(assert (<= 0 k1@255@01))
; [eval] k1 < k2
(push) ; 23
; [then-branch: 37 | !(k1@255@01 < k2@256@01) | live]
; [else-branch: 37 | k1@255@01 < k2@256@01 | live]
(push) ; 24
; [then-branch: 37 | !(k1@255@01 < k2@256@01)]
(assert (not (< k1@255@01 k2@256@01)))
(pop) ; 24
(push) ; 24
; [else-branch: 37 | k1@255@01 < k2@256@01]
(assert (< k1@255@01 k2@256@01))
; [eval] k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 25
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
; [eval] read$()
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (< k1@255@01 k2@256@01) (not (< k1@255@01 k2@256@01))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 k1@255@01)
  (and
    (<= 0 k1@255@01)
    (or (< k1@255@01 k2@256@01) (not (< k1@255@01 k2@256@01))))))
(assert (or (<= 0 k1@255@01) (not (<= 0 k1@255@01))))
(set-option :timeout 0)
(push) ; 21
; [then-branch: 38 | 0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) | live]
; [else-branch: 38 | !(0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)) | live]
(push) ; 22
; [then-branch: 38 | 0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)]
(assert (and
  (<= 0 k1@255@01)
  (and
    (< k1@255@01 k2@256@01)
    (<
      k2@256@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1)
(push) ; 23
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
; [eval] read$()
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 24
; [eval] read$()
(push) ; 25
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(set-option :timeout 0)
(push) ; 24
(assert (not (<
  k1@255@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (<
  k1@255@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 24
(assert (not (<= k1@255@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (<= k1@255@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (<
    k1@255@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))
  (<= k1@255@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
(push) ; 23
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
; [eval] read$()
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 24
(assert (not (<= 0 k2@256@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k2@256@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 24
; [eval] read$()
(push) ; 25
(pop) ; 25
; Joined path conditions
(push) ; 25
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 24
(assert (not (<= k2@256@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (<= k2@256@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
(pop) ; 23
; Joined path conditions
(assert (and
  (<= 0 k2@256@01)
  (<= k2@256@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 38 | !(0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k1@255@01)
    (and
      (< k1@255@01 k2@256@01)
      (<
        k2@256@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (=>
  (and
    (<= 0 k1@255@01)
    (and
      (< k1@255@01 k2@256@01)
      (<
        k2@256@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k1@255@01)
    (< k1@255@01 k2@256@01)
    (<
      k2@256@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (<
      k1@255@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (<= k1@255@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
    (<= 0 k2@256@01)
    (<= k2@256@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k1@255@01)
      (and
        (< k1@255@01 k2@256@01)
        (<
          k2@256@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))))
  (and
    (<= 0 k1@255@01)
    (and
      (< k1@255@01 k2@256@01)
      (<
        k2@256@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))))
(pop) ; 20
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
  (and
    (=>
      (<= 0 k1@255@01)
      (and
        (<= 0 k1@255@01)
        (or (< k1@255@01 k2@256@01) (not (< k1@255@01 k2@256@01)))))
    (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
    (=>
      (and
        (<= 0 k1@255@01)
        (and
          (< k1@255@01 k2@256@01)
          (<
            k2@256@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k1@255@01)
        (< k1@255@01 k2@256@01)
        (<
          k2@256@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (<
          k1@255@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (<= k1@255@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
        (<= 0 k2@256@01)
        (<= k2@256@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
    (or
      (not
        (and
          (<= 0 k1@255@01)
          (and
            (< k1@255@01 k2@256@01)
            (<
              k2@256@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)))))
      (and
        (<= 0 k1@255@01)
        (and
          (< k1@255@01 k2@256@01)
          (<
            k2@256@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|)))
(push) ; 20
; [then-branch: 39 | !(QA k1@255@01,k2@256@01 :: 0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k1@255@01) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k2@256@01)) | live]
; [else-branch: 39 | QA k1@255@01,k2@256@01 :: 0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k1@255@01) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k2@256@01) | live]
(push) ; 21
; [then-branch: 39 | !(QA k1@255@01,k2@256@01 :: 0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k1@255@01) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k2@256@01))]
(assert (not
  (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
    (=>
      (and
        (<= 0 k1@255@01)
        (and
          (< k1@255@01 k2@256@01)
          (<
            k2@256@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (<=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))
(pop) ; 21
(push) ; 21
; [else-branch: 39 | QA k1@255@01,k2@256@01 :: 0 <= k1@255@01 && k1@255@01 < k2@256@01 && k2@256@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k1@255@01) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k2@256@01)]
(assert (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
  (=>
    (and
      (<= 0 k1@255@01)
      (and
        (< k1@255@01 k2@256@01)
        (<
          k2@256@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|)))
; [eval] (forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
(declare-const k@257@01 Int)
(push) ; 22
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] 0 <= k
(push) ; 23
; [then-branch: 40 | !(0 <= k@257@01) | live]
; [else-branch: 40 | 0 <= k@257@01 | live]
(push) ; 24
; [then-branch: 40 | !(0 <= k@257@01)]
(assert (not (<= 0 k@257@01)))
(pop) ; 24
(push) ; 24
; [else-branch: 40 | 0 <= k@257@01]
(assert (<= 0 k@257@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 25
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
; [eval] read$()
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@257@01) (not (<= 0 k@257@01))))
(set-option :timeout 0)
(push) ; 23
; [then-branch: 41 | 0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) | live]
; [else-branch: 41 | !(0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)) | live]
(push) ; 24
; [then-branch: 41 | 0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)]
(assert (and
  (<= 0 k@257@01)
  (<
    k@257@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 25
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
; [eval] read$()
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 26
; [eval] read$()
(push) ; 27
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(pop) ; 26
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 26
(assert (not (<= k@257@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (<= k@257@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (<= k@257@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 25
; [eval] read$()
(push) ; 26
(pop) ; 26
; Joined path conditions
(push) ; 26
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 26
; [eval] read$()
(push) ; 27
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(pop) ; 26
; Joined path conditions
(set-option :timeout 0)
(push) ; 26
(assert (not (<
  k@257@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@257@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (<
    k@257@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
(pop) ; 24
(push) ; 24
; [else-branch: 41 | !(0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k@257@01)
    (<
      k@257@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@257@01)
    (<
      k@257@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)))
  (and
    (<= 0 k@257@01)
    (<
      k@257@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (<= k@257@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
    (<
      k@257@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@257@01)
      (<
        k@257@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k@257@01)
    (<
      k@257@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)))))
(pop) ; 22
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@257@01 Int)) (!
  (and
    (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
    (=>
      (and
        (<= 0 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))
      (and
        (<= 0 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (<= k@257@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
    (or
      (not
        (and
          (<= 0 k@257@01)
          (<
            k@257@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|)))
(push) ; 22
; [then-branch: 42 | !(QA k@257@01 :: 0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@257@01) == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:($t@149@01)), (_, (_, (_, _)))), First:($t@149@01), k@257@01)) | live]
; [else-branch: 42 | QA k@257@01 :: 0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@257@01) == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:($t@149@01)), (_, (_, (_, _)))), First:($t@149@01), k@257@01) | live]
(push) ; 23
; [then-branch: 42 | !(QA k@257@01 :: 0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@257@01) == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:($t@149@01)), (_, (_, (_, _)))), First:($t@149@01), k@257@01))]
(assert (not
  (forall ((k@257@01 Int)) (!
    (=>
      (and
        (<= 0 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))
(pop) ; 23
(push) ; 23
; [else-branch: 42 | QA k@257@01 :: 0 <= k@257@01 && k@257@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@257@01) == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:($t@149@01)), (_, (_, (_, _)))), First:($t@149@01), k@257@01)]
(assert (forall ((k@257@01 Int)) (!
  (=>
    (and
      (<= 0 k@257@01)
      (<
        k@257@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01)))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|)))
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)
(declare-const k@258@01 Int)
(push) ; 24
; [eval] 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] 0 <= k && k < _5.val_int
; [eval] 0 <= k
(push) ; 25
; [then-branch: 43 | !(0 <= k@258@01) | live]
; [else-branch: 43 | 0 <= k@258@01 | live]
(push) ; 26
; [then-branch: 43 | !(0 <= k@258@01)]
(assert (not (<= 0 k@258@01)))
(pop) ; 26
(push) ; 26
; [else-branch: 43 | 0 <= k@258@01]
(assert (<= 0 k@258@01))
; [eval] k < _5.val_int
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@258@01) (not (<= 0 k@258@01))))
(push) ; 25
; [then-branch: 44 | 0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01))) | live]
; [else-branch: 44 | !(0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01)))) | live]
(push) ; 26
; [then-branch: 44 | 0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01)))]
(assert (and
  (<= 0 k@258@01)
  (<
    k@258@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 27
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
; [eval] read$()
(push) ; 28
(pop) ; 28
; Joined path conditions
(push) ; 28
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 28
; [eval] read$()
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(push) ; 29
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(pop) ; 28
; Joined path conditions
(set-option :timeout 0)
(push) ; 28
(assert (not (<
  k@258@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@258@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 28
(assert (not (<= k@258@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (<= k@258@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
(pop) ; 27
; Joined path conditions
(assert (and
  (<
    k@258@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))
  (<= k@258@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
(push) ; 27
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(pop) ; 26
(set-option :timeout 0)
(push) ; 26
; [else-branch: 44 | !(0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01))))]
(assert (not
  (and
    (<= 0 k@258@01)
    (<
      k@258@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@258@01)
    (<
      k@258@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
  (and
    (<= 0 k@258@01)
    (<
      k@258@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
    (<
      k@258@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (<= k@258@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@258@01)
      (<
        k@258@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
  (and
    (<= 0 k@258@01)
    (<
      k@258@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
(pop) ; 24
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@258@01 Int)) (!
  (and
    (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
    (=>
      (and
        (<= 0 k@258@01)
        (<
          k@258@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
      (and
        (<= 0 k@258@01)
        (<
          k@258@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
        (<
          k@258@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (<= k@258@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
    (or
      (not
        (and
          (<= 0 k@258@01)
          (<
            k@258@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
      (and
        (<= 0 k@258@01)
        (<
          k@258@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|)))
(push) ; 24
; [then-branch: 45 | !(QA k@258@01 :: 0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01))) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@258@01) < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01))))))))) | live]
; [else-branch: 45 | QA k@258@01 :: 0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01))) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@258@01) < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) | live]
(push) ; 25
; [then-branch: 45 | !(QA k@258@01 :: 0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01))) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@258@01) < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))))]
(assert (not
  (forall ((k@258@01 Int)) (!
    (=>
      (and
        (<= 0 k@258@01)
        (<
          k@258@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))
(pop) ; 25
(push) ; 25
; [else-branch: 45 | QA k@258@01 :: 0 <= k@258@01 && k@258@01 < First:(First:(Second:($t@250@01))) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@258@01) < First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01))))))))]
(assert (forall ((k@258@01 Int)) (!
  (=>
    (and
      (<= 0 k@258@01)
      (<
        k@258@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 26
; [eval] read$()
(push) ; 27
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(pop) ; 26
; Joined path conditions
(set-option :timeout 0)
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) | live]
; [else-branch: 46 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01)) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 46 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01)]
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
(declare-const k@259@01 Int)
(push) ; 28
; [eval] !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
; [eval] !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615) && (_5.val_int + _3.val_int <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] !(_5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615)
; [eval] _5.val_int + _3.val_int < 0 || _5.val_int + _3.val_int > 18446744073709551615
; [eval] _5.val_int + _3.val_int < 0
; [eval] _5.val_int + _3.val_int
(push) ; 29
; [then-branch: 47 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 | live]
; [else-branch: 47 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0) | live]
(push) ; 30
; [then-branch: 47 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0]
(assert (<
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  0))
(pop) ; 30
(push) ; 30
; [else-branch: 47 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0)]
(assert (not
  (<
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    0)))
; [eval] _5.val_int + _3.val_int > 18446744073709551615
; [eval] _5.val_int + _3.val_int
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(push) ; 29
; [then-branch: 48 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615 | live]
; [else-branch: 48 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) | live]
(push) ; 30
; [then-branch: 48 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615]
(assert (or
  (<
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    0)
  (>
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    18446744073709551615)))
(pop) ; 30
(push) ; 30
; [else-branch: 48 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615)]
; [eval] _5.val_int + _3.val_int <= k
; [eval] _5.val_int + _3.val_int
(push) ; 31
; [then-branch: 49 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01) | live]
; [else-branch: 49 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 | live]
(push) ; 32
; [then-branch: 49 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01)]
(assert (not
  (<=
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    k@259@01)))
(pop) ; 32
(push) ; 32
; [else-branch: 49 | First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01]
(assert (<=
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  k@259@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 33
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 33
; [eval] read$()
(push) ; 34
(pop) ; 34
; Joined path conditions
(push) ; 34
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(push) ; 34
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 34
; 0.00s
; (get-info :all-statistics)
(pop) ; 33
; Joined path conditions
(pop) ; 32
(pop) ; 31
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    k@259@01)
  (not
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      k@259@01))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (or
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      k@259@01)
    (not
      (<=
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        k@259@01)))))
(assert (or
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (or
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0)
    (>
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      18446744073709551615))))
(set-option :timeout 0)
(push) ; 29
; [then-branch: 50 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) | live]
; [else-branch: 50 | !(!(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)) | live]
(push) ; 30
; [then-branch: 50 | !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01)]
(assert (and
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (and
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      k@259@01)
    (<
      k@259@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)))))
; [eval] _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 31
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(set-option :timeout 0)
(push) ; 31
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 31
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 31
; [eval] read$()
(push) ; 32
(pop) ; 32
; Joined path conditions
(push) ; 32
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(push) ; 32
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 32
(assert (not (<= 0 k@259@01)))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k@259@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 32
; [eval] read$()
(push) ; 33
(pop) ; 33
; Joined path conditions
(push) ; 33
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(push) ; 33
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 33
; 0.00s
; (get-info :all-statistics)
(pop) ; 32
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 32
(assert (not (<= k@259@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 32
; 0.00s
; (get-info :all-statistics)
(assert (<= k@259@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
(pop) ; 31
; Joined path conditions
(assert (and
  (<= 0 k@259@01)
  (<= k@259@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
(pop) ; 30
(push) ; 30
; [else-branch: 50 | !(!(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01))]
(assert (not
  (and
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (and
      (<=
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        k@259@01)
      (<
        k@259@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))))
(pop) ; 30
(pop) ; 29
; Joined path conditions
(assert (=>
  (and
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (and
      (<=
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        k@259@01)
      (<
        k@259@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))
  (and
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      k@259@01)
    (<
      k@259@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (<= 0 k@259@01)
    (<= k@259@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (or
          (<
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            0)
          (>
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            18446744073709551615)))
      (and
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          k@259@01)
        (<
          k@259@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))))
  (and
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (and
      (<=
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        k@259@01)
      (<
        k@259@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))))))
(pop) ; 28
; Nested auxiliary terms: globals (aux)
(assert (or
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (or
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0)
    (>
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      18446744073709551615))))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@259@01 Int)) (!
  (and
    (=>
      (not
        (or
          (<
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            0)
          (>
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            18446744073709551615)))
      (or
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          k@259@01)
        (not
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            k@259@01))))
    (=>
      (and
        (not
          (or
            (<
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              0)
            (>
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              18446744073709551615)))
        (and
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            k@259@01)
          (<
            k@259@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (and
        (not
          (or
            (<
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              0)
            (>
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              18446744073709551615)))
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          k@259@01)
        (<
          k@259@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (<= 0 k@259@01)
        (<= k@259@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
    (or
      (not
        (and
          (not
            (or
              (<
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                0)
              (>
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                18446744073709551615)))
          (and
            (<=
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              k@259@01)
            (<
              k@259@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)))))
      (and
        (not
          (or
            (<
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              0)
            (>
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              18446744073709551615)))
        (and
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            k@259@01)
          (<
            k@259@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)
  (and
    (or
      (not
        (or
          (<
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            0)
          (>
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            18446744073709551615)))
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (forall ((k@259@01 Int)) (!
      (and
        (=>
          (not
            (or
              (<
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                0)
              (>
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                18446744073709551615)))
          (or
            (<=
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              k@259@01)
            (not
              (<=
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                k@259@01))))
        (=>
          (and
            (not
              (or
                (<
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  0)
                (>
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  18446744073709551615)))
            (and
              (<=
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                k@259@01)
              (<
                k@259@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (and
            (not
              (or
                (<
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  0)
                (>
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  18446744073709551615)))
            (<=
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              k@259@01)
            (<
              k@259@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))
            (<= 0 k@259@01)
            (<= k@259@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
        (or
          (not
            (and
              (not
                (or
                  (<
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    0)
                  (>
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    18446744073709551615)))
              (and
                (<=
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  k@259@01)
                (<
                  k@259@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)))))
          (and
            (not
              (or
                (<
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  0)
                (>
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  18446744073709551615)))
            (and
              (<=
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                k@259@01)
              (<
                k@259@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|)))))
(push) ; 26
; [then-branch: 51 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) ==> QA k@259@01 :: !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@259@01)) | live]
; [else-branch: 51 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) ==> QA k@259@01 :: !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@259@01) | live]
(push) ; 27
; [then-branch: 51 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) ==> QA k@259@01 :: !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@259@01))]
(assert (not
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01)
    (forall ((k@259@01 Int)) (!
      (=>
        (and
          (not
            (or
              (<
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                0)
              (>
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                18446744073709551615)))
          (and
            (<=
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              k@259@01)
            (<
              k@259@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))))
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))
(pop) ; 27
(push) ; 27
; [else-branch: 51 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) ==> QA k@259@01 :: !(First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) < 0 || First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) > 18446744073709551615) && First:(First:(Second:($t@250@01))) + First:(First:(Second:(Second:($t@250@01)))) <= k@259@01 && k@259@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), _), $t@251@01) ==> First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$((First:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))), (_, (_, (_, _)))), $t@251@01, k@259@01)]
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)
  (forall ((k@259@01 Int)) (!
    (=>
      (and
        (not
          (or
            (<
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              0)
            (>
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              18446744073709551615)))
        (and
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            k@259@01)
          (<
            k@259@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == _2.val_ref.val_int)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 28
; [eval] read$()
(push) ; 29
(pop) ; 29
; Joined path conditions
(push) ; 29
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(push) ; 29
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first $t@250@01)
  $Snap.unit) ret@211@01))
(pop) ; 28
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  ($Snap.first $t@250@01)
  $Snap.unit) ret@211@01))
(set-option :timeout 0)
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01) | dead]
; [else-branch: 52 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01)) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 52 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$((First:($t@250@01), _), ret@211@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01)
    (forall ((k@259@01 Int)) (!
      (=>
        (and
          (not
            (or
              (<
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                0)
              (>
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                18446744073709551615)))
          (and
            (<=
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              k@259@01)
            (<
              k@259@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))))
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
  (and
    (=>
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
        ($Snap.first $t@250@01)
        $Snap.unit) ret@211@01)
      (forall ((k@259@01 Int)) (!
        (=>
          (and
            (not
              (or
                (<
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  0)
                (>
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  18446744073709551615)))
            (and
              (<=
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                k@259@01)
              (<
                k@259@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01)
    (not
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
        ($Snap.first $t@250@01)
        $Snap.unit) ret@211@01)))))
(assert (or
  (=>
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01)
    (forall ((k@259@01 Int)) (!
      (=>
        (and
          (not
            (or
              (<
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                0)
              (>
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                18446744073709551615)))
          (and
            (<=
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              k@259@01)
            (<
              k@259@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))))
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
  (not
    (=>
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
        ($Snap.first $t@250@01)
        $Snap.unit) ret@211@01)
      (forall ((k@259@01 Int)) (!
        (=>
          (and
            (not
              (or
                (<
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  0)
                (>
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  18446744073709551615)))
            (and
              (<=
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                k@259@01)
              (<
                k@259@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (<
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (forall ((k@258@01 Int)) (!
    (=>
      (and
        (<= 0 k@258@01)
        (<
          k@258@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
  (and
    (forall ((k@258@01 Int)) (!
      (=>
        (and
          (<= 0 k@258@01)
          (<
            k@258@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
        (<
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
    (=>
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
        ($Snap.first $t@250@01)
        $Snap.unit) ret@211@01)
      (and
        (or
          (not
            (or
              (<
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                0)
              (>
                (+
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                18446744073709551615)))
          (or
            (<
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              0)
            (>
              (+
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
              18446744073709551615)))
        (forall ((k@259@01 Int)) (!
          (and
            (=>
              (not
                (or
                  (<
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    0)
                  (>
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    18446744073709551615)))
              (or
                (<=
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  k@259@01)
                (not
                  (<=
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    k@259@01))))
            (=>
              (and
                (not
                  (or
                    (<
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      0)
                    (>
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      18446744073709551615)))
                (and
                  (<=
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    k@259@01)
                  (<
                    k@259@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (and
                (not
                  (or
                    (<
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      0)
                    (>
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      18446744073709551615)))
                (<=
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  k@259@01)
                (<
                  k@259@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))
                (<= 0 k@259@01)
                (<= k@259@01 18446744073709551615)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
            (or
              (not
                (and
                  (not
                    (or
                      (<
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        0)
                      (>
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        18446744073709551615)))
                  (and
                    (<=
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      k@259@01)
                    (<
                      k@259@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)))))
              (and
                (not
                  (or
                    (<
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      0)
                    (>
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      18446744073709551615)))
                (and
                  (<=
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    k@259@01)
                  (<
                    k@259@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
    (=>
      (=>
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01)
        (forall ((k@259@01 Int)) (!
          (=>
            (and
              (not
                (or
                  (<
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    0)
                  (>
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    18446744073709551615)))
              (and
                (<=
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  k@259@01)
                (<
                  k@259@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))))
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
      (and
        (=>
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
            ($Snap.first $t@250@01)
            $Snap.unit) ret@211@01)
          (forall ((k@259@01 Int)) (!
            (=>
              (and
                (not
                  (or
                    (<
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      0)
                    (>
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      18446744073709551615)))
                (and
                  (<=
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    k@259@01)
                  (<
                    k@259@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01)
        (not
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
            ($Snap.first $t@250@01)
            $Snap.unit) ret@211@01))))
    (or
      (=>
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01)
        (forall ((k@259@01 Int)) (!
          (=>
            (and
              (not
                (or
                  (<
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    0)
                  (>
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    18446744073709551615)))
              (and
                (<=
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  k@259@01)
                (<
                  k@259@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))))
            (<
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
      (not
        (=>
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
            ($Snap.first $t@250@01)
            $Snap.unit) ret@211@01)
          (forall ((k@259@01 Int)) (!
            (=>
              (and
                (not
                  (or
                    (<
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      0)
                    (>
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      18446744073709551615)))
                (and
                  (<=
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    k@259@01)
                  (<
                    k@259@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (<
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|))))))))
(assert (or
  (forall ((k@258@01 Int)) (!
    (=>
      (and
        (<= 0 k@258@01)
        (<
          k@258@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
  (not
    (forall ((k@258@01 Int)) (!
      (=>
        (and
          (<= 0 k@258@01)
          (<
            k@258@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
        (<
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=>
  (forall ((k@257@01 Int)) (!
    (=>
      (and
        (<= 0 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
  (and
    (forall ((k@257@01 Int)) (!
      (=>
        (and
          (<= 0 k@257@01)
          (<
            k@257@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01)))
        (=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
    (forall ((k@258@01 Int)) (!
      (and
        (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
        (=>
          (and
            (<= 0 k@258@01)
            (<
              k@258@01
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
          (and
            (<= 0 k@258@01)
            (<
              k@258@01
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
            (<
              k@258@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))
            (<= k@258@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
        (or
          (not
            (and
              (<= 0 k@258@01)
              (<
                k@258@01
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
          (and
            (<= 0 k@258@01)
            (<
              k@258@01
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
    (=>
      (forall ((k@258@01 Int)) (!
        (=>
          (and
            (<= 0 k@258@01)
            (<
              k@258@01
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
          (<
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
      (and
        (forall ((k@258@01 Int)) (!
          (=>
            (and
              (<= 0 k@258@01)
              (<
                k@258@01
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
            (<
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
        (=>
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
            ($Snap.first $t@250@01)
            $Snap.unit) ret@211@01)
          (and
            (or
              (not
                (or
                  (<
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    0)
                  (>
                    (+
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                    18446744073709551615)))
              (or
                (<
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  0)
                (>
                  (+
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                  18446744073709551615)))
            (forall ((k@259@01 Int)) (!
              (and
                (=>
                  (not
                    (or
                      (<
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        0)
                      (>
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        18446744073709551615)))
                  (or
                    (<=
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      k@259@01)
                    (not
                      (<=
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        k@259@01))))
                (=>
                  (and
                    (not
                      (or
                        (<
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          0)
                        (>
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          18446744073709551615)))
                    (and
                      (<=
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        k@259@01)
                      (<
                        k@259@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (and
                    (not
                      (or
                        (<
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          0)
                        (>
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          18446744073709551615)))
                    (<=
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      k@259@01)
                    (<
                      k@259@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))
                    (<= 0 k@259@01)
                    (<= k@259@01 18446744073709551615)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                (or
                  (not
                    (and
                      (not
                        (or
                          (<
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            0)
                          (>
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            18446744073709551615)))
                      (and
                        (<=
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          k@259@01)
                        (<
                          k@259@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01)))))
                  (and
                    (not
                      (or
                        (<
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          0)
                        (>
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          18446744073709551615)))
                    (and
                      (<=
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        k@259@01)
                      (<
                        k@259@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
        (=>
          (=>
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
              ($Snap.first $t@250@01)
              $Snap.unit) ret@211@01)
            (forall ((k@259@01 Int)) (!
              (=>
                (and
                  (not
                    (or
                      (<
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        0)
                      (>
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        18446744073709551615)))
                  (and
                    (<=
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      k@259@01)
                    (<
                      k@259@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))))
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
          (and
            (=>
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (forall ((k@259@01 Int)) (!
                (=>
                  (and
                    (not
                      (or
                        (<
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          0)
                        (>
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          18446744073709551615)))
                    (and
                      (<=
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        k@259@01)
                      (<
                        k@259@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
              ($Snap.first $t@250@01)
              $Snap.unit) ret@211@01)
            (not
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01))))
        (or
          (=>
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
              ($Snap.first $t@250@01)
              $Snap.unit) ret@211@01)
            (forall ((k@259@01 Int)) (!
              (=>
                (and
                  (not
                    (or
                      (<
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        0)
                      (>
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        18446744073709551615)))
                  (and
                    (<=
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      k@259@01)
                    (<
                      k@259@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))))
                (<
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
          (not
            (=>
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (forall ((k@259@01 Int)) (!
                (=>
                  (and
                    (not
                      (or
                        (<
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          0)
                        (>
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          18446744073709551615)))
                    (and
                      (<=
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        k@259@01)
                      (<
                        k@259@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (<
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
    (or
      (forall ((k@258@01 Int)) (!
        (=>
          (and
            (<= 0 k@258@01)
            (<
              k@258@01
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
          (<
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
      (not
        (forall ((k@258@01 Int)) (!
          (=>
            (and
              (<= 0 k@258@01)
              (<
                k@258@01
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
            (<
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|)))))))
(assert (or
  (forall ((k@257@01 Int)) (!
    (=>
      (and
        (<= 0 k@257@01)
        (<
          k@257@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
  (not
    (forall ((k@257@01 Int)) (!
      (=>
        (and
          (<= 0 k@257@01)
          (<
            k@257@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01)))
        (=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (=>
  (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
    (=>
      (and
        (<= 0 k1@255@01)
        (and
          (< k1@255@01 k2@256@01)
          (<
            k2@256@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (<=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
  (and
    (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
      (=>
        (and
          (<= 0 k1@255@01)
          (and
            (< k1@255@01 k2@256@01)
            (<
              k2@256@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))))
        (<=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
    (forall ((k@257@01 Int)) (!
      (and
        (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
        (=>
          (and
            (<= 0 k@257@01)
            (<
              k@257@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)))
          (and
            (<= 0 k@257@01)
            (<
              k@257@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))
            (<= k@257@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
            (<
              k@257@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
        (or
          (not
            (and
              (<= 0 k@257@01)
              (<
                k@257@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (and
            (<= 0 k@257@01)
            (<
              k@257@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
    (=>
      (forall ((k@257@01 Int)) (!
        (=>
          (and
            (<= 0 k@257@01)
            (<
              k@257@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)))
          (=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
      (and
        (forall ((k@257@01 Int)) (!
          (=>
            (and
              (<= 0 k@257@01)
              (<
                k@257@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01)))
            (=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
        (forall ((k@258@01 Int)) (!
          (and
            (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
            (=>
              (and
                (<= 0 k@258@01)
                (<
                  k@258@01
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
              (and
                (<= 0 k@258@01)
                (<
                  k@258@01
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                (<
                  k@258@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))
                (<= k@258@01 18446744073709551615)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
            (or
              (not
                (and
                  (<= 0 k@258@01)
                  (<
                    k@258@01
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
              (and
                (<= 0 k@258@01)
                (<
                  k@258@01
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
        (=>
          (forall ((k@258@01 Int)) (!
            (=>
              (and
                (<= 0 k@258@01)
                (<
                  k@258@01
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
              (<
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
          (and
            (forall ((k@258@01 Int)) (!
              (=>
                (and
                  (<= 0 k@258@01)
                  (<
                    k@258@01
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                (<
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
            (=>
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (and
                (or
                  (not
                    (or
                      (<
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        0)
                      (>
                        (+
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                        18446744073709551615)))
                  (or
                    (<
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      0)
                    (>
                      (+
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                      18446744073709551615)))
                (forall ((k@259@01 Int)) (!
                  (and
                    (=>
                      (not
                        (or
                          (<
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            0)
                          (>
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            18446744073709551615)))
                      (or
                        (<=
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          k@259@01)
                        (not
                          (<=
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            k@259@01))))
                    (=>
                      (and
                        (not
                          (or
                            (<
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              0)
                            (>
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              18446744073709551615)))
                        (and
                          (<=
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            k@259@01)
                          (<
                            k@259@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (and
                        (not
                          (or
                            (<
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              0)
                            (>
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              18446744073709551615)))
                        (<=
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          k@259@01)
                        (<
                          k@259@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))
                        (<= 0 k@259@01)
                        (<= k@259@01 18446744073709551615)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                    (or
                      (not
                        (and
                          (not
                            (or
                              (<
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                0)
                              (>
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                18446744073709551615)))
                          (and
                            (<=
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              k@259@01)
                            (<
                              k@259@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01)))))
                      (and
                        (not
                          (or
                            (<
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              0)
                            (>
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              18446744073709551615)))
                        (and
                          (<=
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            k@259@01)
                          (<
                            k@259@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
            (=>
              (=>
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (forall ((k@259@01 Int)) (!
                  (=>
                    (and
                      (not
                        (or
                          (<
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            0)
                          (>
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            18446744073709551615)))
                      (and
                        (<=
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          k@259@01)
                        (<
                          k@259@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))))
                    (<
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
              (and
                (=>
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)
                  (forall ((k@259@01 Int)) (!
                    (=>
                      (and
                        (not
                          (or
                            (<
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              0)
                            (>
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              18446744073709551615)))
                        (and
                          (<=
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            k@259@01)
                          (<
                            k@259@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (<
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (not
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01))))
            (or
              (=>
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (forall ((k@259@01 Int)) (!
                  (=>
                    (and
                      (not
                        (or
                          (<
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            0)
                          (>
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            18446744073709551615)))
                      (and
                        (<=
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          k@259@01)
                        (<
                          k@259@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))))
                    (<
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
              (not
                (=>
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)
                  (forall ((k@259@01 Int)) (!
                    (=>
                      (and
                        (not
                          (or
                            (<
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              0)
                            (>
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              18446744073709551615)))
                        (and
                          (<=
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            k@259@01)
                          (<
                            k@259@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (<
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
        (or
          (forall ((k@258@01 Int)) (!
            (=>
              (and
                (<= 0 k@258@01)
                (<
                  k@258@01
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
              (<
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
          (not
            (forall ((k@258@01 Int)) (!
              (=>
                (and
                  (<= 0 k@258@01)
                  (<
                    k@258@01
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                (<
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
    (or
      (forall ((k@257@01 Int)) (!
        (=>
          (and
            (<= 0 k@257@01)
            (<
              k@257@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)))
          (=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
      (not
        (forall ((k@257@01 Int)) (!
          (=>
            (and
              (<= 0 k@257@01)
              (<
                k@257@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01)))
            (=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|)))))))
(assert (or
  (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
    (=>
      (and
        (<= 0 k1@255@01)
        (and
          (< k1@255@01 k2@256@01)
          (<
            k2@256@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))
      (<=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
  (not
    (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
      (=>
        (and
          (<= 0 k1@255@01)
          (and
            (< k1@255@01 k2@256@01)
            (<
              k2@256@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))))
        (<=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|)))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
    (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
      (and
        (=>
          (<= 0 k1@255@01)
          (and
            (<= 0 k1@255@01)
            (or (< k1@255@01 k2@256@01) (not (< k1@255@01 k2@256@01)))))
        (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
        (=>
          (and
            (<= 0 k1@255@01)
            (and
              (< k1@255@01 k2@256@01)
              (<
                k2@256@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (and
            (<= 0 k1@255@01)
            (< k1@255@01 k2@256@01)
            (<
              k2@256@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))
            (<
              k1@255@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01))
            (<= k1@255@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
            (<= 0 k2@256@01)
            (<= k2@256@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
        (or
          (not
            (and
              (<= 0 k1@255@01)
              (and
                (< k1@255@01 k2@256@01)
                (<
                  k2@256@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)))))
          (and
            (<= 0 k1@255@01)
            (and
              (< k1@255@01 k2@256@01)
              (<
                k2@256@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
    (=>
      (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
        (=>
          (and
            (<= 0 k1@255@01)
            (and
              (< k1@255@01 k2@256@01)
              (<
                k2@256@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (<=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
      (and
        (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
          (=>
            (and
              (<= 0 k1@255@01)
              (and
                (< k1@255@01 k2@256@01)
                (<
                  k2@256@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))))
            (<=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
        (forall ((k@257@01 Int)) (!
          (and
            (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
            (=>
              (and
                (<= 0 k@257@01)
                (<
                  k@257@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)))
              (and
                (<= 0 k@257@01)
                (<
                  k@257@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))
                (<= k@257@01 18446744073709551615)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                (<
                  k@257@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
            (or
              (not
                (and
                  (<= 0 k@257@01)
                  (<
                    k@257@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (and
                (<= 0 k@257@01)
                (<
                  k@257@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)))))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
        (=>
          (forall ((k@257@01 Int)) (!
            (=>
              (and
                (<= 0 k@257@01)
                (<
                  k@257@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)))
              (=
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
          (and
            (forall ((k@257@01 Int)) (!
              (=>
                (and
                  (<= 0 k@257@01)
                  (<
                    k@257@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01)))
                (=
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
            (forall ((k@258@01 Int)) (!
              (and
                (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                (=>
                  (and
                    (<= 0 k@258@01)
                    (<
                      k@258@01
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                  (and
                    (<= 0 k@258@01)
                    (<
                      k@258@01
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                    (<
                      k@258@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))
                    (<= k@258@01 18446744073709551615)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
                (or
                  (not
                    (and
                      (<= 0 k@258@01)
                      (<
                        k@258@01
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                  (and
                    (<= 0 k@258@01)
                    (<
                      k@258@01
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
            (=>
              (forall ((k@258@01 Int)) (!
                (=>
                  (and
                    (<= 0 k@258@01)
                    (<
                      k@258@01
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                  (<
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
              (and
                (forall ((k@258@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k@258@01)
                      (<
                        k@258@01
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                    (<
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                (=>
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)
                  (and
                    (or
                      (not
                        (or
                          (<
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            0)
                          (>
                            (+
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                            18446744073709551615)))
                      (or
                        (<
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          0)
                        (>
                          (+
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                          18446744073709551615)))
                    (forall ((k@259@01 Int)) (!
                      (and
                        (=>
                          (not
                            (or
                              (<
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                0)
                              (>
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                18446744073709551615)))
                          (or
                            (<=
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              k@259@01)
                            (not
                              (<=
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                k@259@01))))
                        (=>
                          (and
                            (not
                              (or
                                (<
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  0)
                                (>
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  18446744073709551615)))
                            (and
                              (<=
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                k@259@01)
                              (<
                                k@259@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (and
                            (not
                              (or
                                (<
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  0)
                                (>
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  18446744073709551615)))
                            (<=
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              k@259@01)
                            (<
                              k@259@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))
                            (<= 0 k@259@01)
                            (<= k@259@01 18446744073709551615)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                        (or
                          (not
                            (and
                              (not
                                (or
                                  (<
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    0)
                                  (>
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    18446744073709551615)))
                              (and
                                (<=
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  k@259@01)
                                (<
                                  k@259@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01)))))
                          (and
                            (not
                              (or
                                (<
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  0)
                                (>
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  18446744073709551615)))
                            (and
                              (<=
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                k@259@01)
                              (<
                                k@259@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                (=>
                  (=>
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                      ($Snap.first $t@250@01)
                      $Snap.unit) ret@211@01)
                    (forall ((k@259@01 Int)) (!
                      (=>
                        (and
                          (not
                            (or
                              (<
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                0)
                              (>
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                18446744073709551615)))
                          (and
                            (<=
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              k@259@01)
                            (<
                              k@259@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))))
                        (<
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                  (and
                    (=>
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                        ($Snap.first $t@250@01)
                        $Snap.unit) ret@211@01)
                      (forall ((k@259@01 Int)) (!
                        (=>
                          (and
                            (not
                              (or
                                (<
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  0)
                                (>
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  18446744073709551615)))
                            (and
                              (<=
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                k@259@01)
                              (<
                                k@259@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (<
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                      ($Snap.first $t@250@01)
                      $Snap.unit) ret@211@01)
                    (not
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                        ($Snap.first $t@250@01)
                        $Snap.unit) ret@211@01))))
                (or
                  (=>
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                      ($Snap.first $t@250@01)
                      $Snap.unit) ret@211@01)
                    (forall ((k@259@01 Int)) (!
                      (=>
                        (and
                          (not
                            (or
                              (<
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                0)
                              (>
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                18446744073709551615)))
                          (and
                            (<=
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              k@259@01)
                            (<
                              k@259@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))))
                        (<
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                  (not
                    (=>
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                        ($Snap.first $t@250@01)
                        $Snap.unit) ret@211@01)
                      (forall ((k@259@01 Int)) (!
                        (=>
                          (and
                            (not
                              (or
                                (<
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  0)
                                (>
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  18446744073709551615)))
                            (and
                              (<=
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                k@259@01)
                              (<
                                k@259@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (<
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
            (or
              (forall ((k@258@01 Int)) (!
                (=>
                  (and
                    (<= 0 k@258@01)
                    (<
                      k@258@01
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                  (<
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
              (not
                (forall ((k@258@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k@258@01)
                      (<
                        k@258@01
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                    (<
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
        (or
          (forall ((k@257@01 Int)) (!
            (=>
              (and
                (<= 0 k@257@01)
                (<
                  k@257@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)))
              (=
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
          (not
            (forall ((k@257@01 Int)) (!
              (=>
                (and
                  (<= 0 k@257@01)
                  (<
                    k@257@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01)))
                (=
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
    (or
      (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
        (=>
          (and
            (<= 0 k1@255@01)
            (and
              (< k1@255@01 k2@256@01)
              (<
                k2@256@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01))))
          (<=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
      (not
        (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
          (=>
            (and
              (<= 0 k1@255@01)
              (and
                (< k1@255@01 k2@256@01)
                (<
                  k2@256@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))))
            (<=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|)))))))
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (=>
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (and
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (=>
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
      (and
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
        (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
          (and
            (=>
              (<= 0 k1@255@01)
              (and
                (<= 0 k1@255@01)
                (or (< k1@255@01 k2@256@01) (not (< k1@255@01 k2@256@01)))))
            (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
            (=>
              (and
                (<= 0 k1@255@01)
                (and
                  (< k1@255@01 k2@256@01)
                  (<
                    k2@256@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (and
                (<= 0 k1@255@01)
                (< k1@255@01 k2@256@01)
                (<
                  k2@256@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))
                (<
                  k1@255@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01))
                (<= k1@255@01 18446744073709551615)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                (<= 0 k2@256@01)
                (<= k2@256@01 18446744073709551615)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
            (or
              (not
                (and
                  (<= 0 k1@255@01)
                  (and
                    (< k1@255@01 k2@256@01)
                    (<
                      k2@256@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)))))
              (and
                (<= 0 k1@255@01)
                (and
                  (< k1@255@01 k2@256@01)
                  (<
                    k2@256@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))))
          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
        (=>
          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
            (=>
              (and
                (<= 0 k1@255@01)
                (and
                  (< k1@255@01 k2@256@01)
                  (<
                    k2@256@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (<=
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
          (and
            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
              (=>
                (and
                  (<= 0 k1@255@01)
                  (and
                    (< k1@255@01 k2@256@01)
                    (<
                      k2@256@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))))
                (<=
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
            (forall ((k@257@01 Int)) (!
              (and
                (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                (=>
                  (and
                    (<= 0 k@257@01)
                    (<
                      k@257@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)))
                  (and
                    (<= 0 k@257@01)
                    (<
                      k@257@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))
                    (<= k@257@01 18446744073709551615)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                    (<
                      k@257@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                (or
                  (not
                    (and
                      (<= 0 k@257@01)
                      (<
                        k@257@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (and
                    (<= 0 k@257@01)
                    (<
                      k@257@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)))))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
            (=>
              (forall ((k@257@01 Int)) (!
                (=>
                  (and
                    (<= 0 k@257@01)
                    (<
                      k@257@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)))
                  (=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
              (and
                (forall ((k@257@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k@257@01)
                      (<
                        k@257@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)))
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                (forall ((k@258@01 Int)) (!
                  (and
                    (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                    (=>
                      (and
                        (<= 0 k@258@01)
                        (<
                          k@258@01
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                      (and
                        (<= 0 k@258@01)
                        (<
                          k@258@01
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                        (<
                          k@258@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))
                        (<= k@258@01 18446744073709551615)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
                    (or
                      (not
                        (and
                          (<= 0 k@258@01)
                          (<
                            k@258@01
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                      (and
                        (<= 0 k@258@01)
                        (<
                          k@258@01
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                (=>
                  (forall ((k@258@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k@258@01)
                        (<
                          k@258@01
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                      (<
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                  (and
                    (forall ((k@258@01 Int)) (!
                      (=>
                        (and
                          (<= 0 k@258@01)
                          (<
                            k@258@01
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                        (<
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                    (=>
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                        ($Snap.first $t@250@01)
                        $Snap.unit) ret@211@01)
                      (and
                        (or
                          (not
                            (or
                              (<
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                0)
                              (>
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                18446744073709551615)))
                          (or
                            (<
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              0)
                            (>
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              18446744073709551615)))
                        (forall ((k@259@01 Int)) (!
                          (and
                            (=>
                              (not
                                (or
                                  (<
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    0)
                                  (>
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    18446744073709551615)))
                              (or
                                (<=
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  k@259@01)
                                (not
                                  (<=
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    k@259@01))))
                            (=>
                              (and
                                (not
                                  (or
                                    (<
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      0)
                                    (>
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      18446744073709551615)))
                                (and
                                  (<=
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    k@259@01)
                                  (<
                                    k@259@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (and
                                (not
                                  (or
                                    (<
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      0)
                                    (>
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      18446744073709551615)))
                                (<=
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  k@259@01)
                                (<
                                  k@259@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))
                                (<= 0 k@259@01)
                                (<= k@259@01 18446744073709551615)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                            (or
                              (not
                                (and
                                  (not
                                    (or
                                      (<
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        0)
                                      (>
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        18446744073709551615)))
                                  (and
                                    (<=
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      k@259@01)
                                    (<
                                      k@259@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01)))))
                              (and
                                (not
                                  (or
                                    (<
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      0)
                                    (>
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      18446744073709551615)))
                                (and
                                  (<=
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    k@259@01)
                                  (<
                                    k@259@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                    (=>
                      (=>
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                          ($Snap.first $t@250@01)
                          $Snap.unit) ret@211@01)
                        (forall ((k@259@01 Int)) (!
                          (=>
                            (and
                              (not
                                (or
                                  (<
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    0)
                                  (>
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    18446744073709551615)))
                              (and
                                (<=
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  k@259@01)
                                (<
                                  k@259@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))))
                            (<
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                      (and
                        (=>
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                            ($Snap.first $t@250@01)
                            $Snap.unit) ret@211@01)
                          (forall ((k@259@01 Int)) (!
                            (=>
                              (and
                                (not
                                  (or
                                    (<
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      0)
                                    (>
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      18446744073709551615)))
                                (and
                                  (<=
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    k@259@01)
                                  (<
                                    k@259@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (<
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                          ($Snap.first $t@250@01)
                          $Snap.unit) ret@211@01)
                        (not
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                            ($Snap.first $t@250@01)
                            $Snap.unit) ret@211@01))))
                    (or
                      (=>
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                          ($Snap.first $t@250@01)
                          $Snap.unit) ret@211@01)
                        (forall ((k@259@01 Int)) (!
                          (=>
                            (and
                              (not
                                (or
                                  (<
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    0)
                                  (>
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    18446744073709551615)))
                              (and
                                (<=
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  k@259@01)
                                (<
                                  k@259@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))))
                            (<
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                      (not
                        (=>
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                            ($Snap.first $t@250@01)
                            $Snap.unit) ret@211@01)
                          (forall ((k@259@01 Int)) (!
                            (=>
                              (and
                                (not
                                  (or
                                    (<
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      0)
                                    (>
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      18446744073709551615)))
                                (and
                                  (<=
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    k@259@01)
                                  (<
                                    k@259@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (<
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                (or
                  (forall ((k@258@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k@258@01)
                        (<
                          k@258@01
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                      (<
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                  (not
                    (forall ((k@258@01 Int)) (!
                      (=>
                        (and
                          (<= 0 k@258@01)
                          (<
                            k@258@01
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                        (<
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
            (or
              (forall ((k@257@01 Int)) (!
                (=>
                  (and
                    (<= 0 k@257@01)
                    (<
                      k@257@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)))
                  (=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
              (not
                (forall ((k@257@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k@257@01)
                      (<
                        k@257@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)))
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
        (or
          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
            (=>
              (and
                (<= 0 k1@255@01)
                (and
                  (< k1@255@01 k2@256@01)
                  (<
                    k2@256@01
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01))))
              (<=
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
          (not
            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
              (=>
                (and
                  (<= 0 k1@255@01)
                  (and
                    (< k1@255@01 k2@256@01)
                    (<
                      k2@256@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))))
                (<=
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
    (or
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
      (not
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))))))
(assert (or
  (=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (not
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)
  (and
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01)
    (=>
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
      (and
        (=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (=>
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
          (and
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
              (and
                (=>
                  (<= 0 k1@255@01)
                  (and
                    (<= 0 k1@255@01)
                    (or (< k1@255@01 k2@256@01) (not (< k1@255@01 k2@256@01)))))
                (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                (=>
                  (and
                    (<= 0 k1@255@01)
                    (and
                      (< k1@255@01 k2@256@01)
                      (<
                        k2@256@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (and
                    (<= 0 k1@255@01)
                    (< k1@255@01 k2@256@01)
                    (<
                      k2@256@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))
                    (<
                      k1@255@01
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01))
                    (<= k1@255@01 18446744073709551615)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                    (<= 0 k2@256@01)
                    (<= k2@256@01 18446744073709551615)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                (or
                  (not
                    (and
                      (<= 0 k1@255@01)
                      (and
                        (< k1@255@01 k2@256@01)
                        (<
                          k2@256@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01)))))
                  (and
                    (<= 0 k1@255@01)
                    (and
                      (< k1@255@01 k2@256@01)
                      (<
                        k2@256@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))))
              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
            (=>
              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                (=>
                  (and
                    (<= 0 k1@255@01)
                    (and
                      (< k1@255@01 k2@256@01)
                      (<
                        k2@256@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (<=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
              (and
                (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k1@255@01)
                      (and
                        (< k1@255@01 k2@256@01)
                        (<
                          k2@256@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))))
                    (<=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                (forall ((k@257@01 Int)) (!
                  (and
                    (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                    (=>
                      (and
                        (<= 0 k@257@01)
                        (<
                          k@257@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01)))
                      (and
                        (<= 0 k@257@01)
                        (<
                          k@257@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))
                        (<= k@257@01 18446744073709551615)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                        (<
                          k@257@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second $t@149@01))
                            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                    (or
                      (not
                        (and
                          (<= 0 k@257@01)
                          (<
                            k@257@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (and
                        (<= 0 k@257@01)
                        (<
                          k@257@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01)))))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                (=>
                  (forall ((k@257@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k@257@01)
                        (<
                          k@257@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01)))
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                  (and
                    (forall ((k@257@01 Int)) (!
                      (=>
                        (and
                          (<= 0 k@257@01)
                          (<
                            k@257@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01)))
                        (=
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second $t@149@01))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                    (forall ((k@258@01 Int)) (!
                      (and
                        (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                        (=>
                          (and
                            (<= 0 k@258@01)
                            (<
                              k@258@01
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                          (and
                            (<= 0 k@258@01)
                            (<
                              k@258@01
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                            (<
                              k@258@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))
                            (<= k@258@01 18446744073709551615)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
                        (or
                          (not
                            (and
                              (<= 0 k@258@01)
                              (<
                                k@258@01
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                          (and
                            (<= 0 k@258@01)
                            (<
                              k@258@01
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                    (=>
                      (forall ((k@258@01 Int)) (!
                        (=>
                          (and
                            (<= 0 k@258@01)
                            (<
                              k@258@01
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                          (<
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                      (and
                        (forall ((k@258@01 Int)) (!
                          (=>
                            (and
                              (<= 0 k@258@01)
                              (<
                                k@258@01
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                            (<
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                        (=>
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                            ($Snap.first $t@250@01)
                            $Snap.unit) ret@211@01)
                          (and
                            (or
                              (not
                                (or
                                  (<
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    0)
                                  (>
                                    (+
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                    18446744073709551615)))
                              (or
                                (<
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  0)
                                (>
                                  (+
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                  18446744073709551615)))
                            (forall ((k@259@01 Int)) (!
                              (and
                                (=>
                                  (not
                                    (or
                                      (<
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        0)
                                      (>
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        18446744073709551615)))
                                  (or
                                    (<=
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      k@259@01)
                                    (not
                                      (<=
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        k@259@01))))
                                (=>
                                  (and
                                    (not
                                      (or
                                        (<
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          0)
                                        (>
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          18446744073709551615)))
                                    (and
                                      (<=
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        k@259@01)
                                      (<
                                        k@259@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (and
                                    (not
                                      (or
                                        (<
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          0)
                                        (>
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          18446744073709551615)))
                                    (<=
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      k@259@01)
                                    (<
                                      k@259@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))
                                    (<= 0 k@259@01)
                                    (<= k@259@01 18446744073709551615)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                                (or
                                  (not
                                    (and
                                      (not
                                        (or
                                          (<
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            0)
                                          (>
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            18446744073709551615)))
                                      (and
                                        (<=
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          k@259@01)
                                        (<
                                          k@259@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))))
                                  (and
                                    (not
                                      (or
                                        (<
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          0)
                                        (>
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          18446744073709551615)))
                                    (and
                                      (<=
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        k@259@01)
                                      (<
                                        k@259@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                        (=>
                          (=>
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                              ($Snap.first $t@250@01)
                              $Snap.unit) ret@211@01)
                            (forall ((k@259@01 Int)) (!
                              (=>
                                (and
                                  (not
                                    (or
                                      (<
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        0)
                                      (>
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        18446744073709551615)))
                                  (and
                                    (<=
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      k@259@01)
                                    (<
                                      k@259@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                          (and
                            (=>
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                ($Snap.first $t@250@01)
                                $Snap.unit) ret@211@01)
                              (forall ((k@259@01 Int)) (!
                                (=>
                                  (and
                                    (not
                                      (or
                                        (<
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          0)
                                        (>
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          18446744073709551615)))
                                    (and
                                      (<=
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        k@259@01)
                                      (<
                                        k@259@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                              ($Snap.first $t@250@01)
                              $Snap.unit) ret@211@01)
                            (not
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                ($Snap.first $t@250@01)
                                $Snap.unit) ret@211@01))))
                        (or
                          (=>
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                              ($Snap.first $t@250@01)
                              $Snap.unit) ret@211@01)
                            (forall ((k@259@01 Int)) (!
                              (=>
                                (and
                                  (not
                                    (or
                                      (<
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        0)
                                      (>
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        18446744073709551615)))
                                  (and
                                    (<=
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      k@259@01)
                                    (<
                                      k@259@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                          (not
                            (=>
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                ($Snap.first $t@250@01)
                                $Snap.unit) ret@211@01)
                              (forall ((k@259@01 Int)) (!
                                (=>
                                  (and
                                    (not
                                      (or
                                        (<
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          0)
                                        (>
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          18446744073709551615)))
                                    (and
                                      (<=
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        k@259@01)
                                      (<
                                        k@259@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                    (or
                      (forall ((k@258@01 Int)) (!
                        (=>
                          (and
                            (<= 0 k@258@01)
                            (<
                              k@258@01
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                          (<
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                      (not
                        (forall ((k@258@01 Int)) (!
                          (=>
                            (and
                              (<= 0 k@258@01)
                              (<
                                k@258@01
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                            (<
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                (or
                  (forall ((k@257@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k@257@01)
                        (<
                          k@257@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01)))
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                  (not
                    (forall ((k@257@01 Int)) (!
                      (=>
                        (and
                          (<= 0 k@257@01)
                          (<
                            k@257@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01)))
                        (=
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second $t@149@01))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
            (or
              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                (=>
                  (and
                    (<= 0 k1@255@01)
                    (and
                      (< k1@255@01 k2@256@01)
                      (<
                        k2@256@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (<=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
              (not
                (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k1@255@01)
                      (and
                        (< k1@255@01 k2@256@01)
                        (<
                          k2@256@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))))
                    (<=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
        (or
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
          (not
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
    (or
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
      (not
        (=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))))))
(assert (or
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ret@211@01)
  (not
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      0)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ret@211@01)
    (=>
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
        ($Snap.first $t@250@01)
        $Snap.unit) ret@211@01)
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01)
        (=>
          (=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
          (and
            (=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
            (=>
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
              (and
                (=
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                  (and
                    (=>
                      (<= 0 k1@255@01)
                      (and
                        (<= 0 k1@255@01)
                        (or
                          (< k1@255@01 k2@256@01)
                          (not (< k1@255@01 k2@256@01)))))
                    (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                    (=>
                      (and
                        (<= 0 k1@255@01)
                        (and
                          (< k1@255@01 k2@256@01)
                          (<
                            k2@256@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (and
                        (<= 0 k1@255@01)
                        (< k1@255@01 k2@256@01)
                        (<
                          k2@256@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))
                        (<
                          k1@255@01
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            $Snap.unit) $t@251@01))
                        (<= k1@255@01 18446744073709551615)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                        (<= 0 k2@256@01)
                        (<= k2@256@01 18446744073709551615)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                    (or
                      (not
                        (and
                          (<= 0 k1@255@01)
                          (and
                            (< k1@255@01 k2@256@01)
                            (<
                              k2@256@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01)))))
                      (and
                        (<= 0 k1@255@01)
                        (and
                          (< k1@255@01 k2@256@01)
                          (<
                            k2@256@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
                (=>
                  (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k1@255@01)
                        (and
                          (< k1@255@01 k2@256@01)
                          (<
                            k2@256@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (<=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                  (and
                    (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                      (=>
                        (and
                          (<= 0 k1@255@01)
                          (and
                            (< k1@255@01 k2@256@01)
                            (<
                              k2@256@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))))
                        (<=
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                    (forall ((k@257@01 Int)) (!
                      (and
                        (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                        (=>
                          (and
                            (<= 0 k@257@01)
                            (<
                              k@257@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01)))
                          (and
                            (<= 0 k@257@01)
                            (<
                              k@257@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))
                            (<= k@257@01 18446744073709551615)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                            (<
                              k@257@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second $t@149@01))
                                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                              ($Snap.first ($Snap.second $t@149@01))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                        (or
                          (not
                            (and
                              (<= 0 k@257@01)
                              (<
                                k@257@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (and
                            (<= 0 k@257@01)
                            (<
                              k@257@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01)))))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                    (=>
                      (forall ((k@257@01 Int)) (!
                        (=>
                          (and
                            (<= 0 k@257@01)
                            (<
                              k@257@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01)))
                          (=
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second $t@149@01))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                      (and
                        (forall ((k@257@01 Int)) (!
                          (=>
                            (and
                              (<= 0 k@257@01)
                              (<
                                k@257@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01)))
                            (=
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second $t@149@01))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second $t@149@01))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                        (forall ((k@258@01 Int)) (!
                          (and
                            (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                            (=>
                              (and
                                (<= 0 k@258@01)
                                (<
                                  k@258@01
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                              (and
                                (<= 0 k@258@01)
                                (<
                                  k@258@01
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                                (<
                                  k@258@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))
                                (<= k@258@01 18446744073709551615)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
                            (or
                              (not
                                (and
                                  (<= 0 k@258@01)
                                  (<
                                    k@258@01
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                              (and
                                (<= 0 k@258@01)
                                (<
                                  k@258@01
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                        (=>
                          (forall ((k@258@01 Int)) (!
                            (=>
                              (and
                                (<= 0 k@258@01)
                                (<
                                  k@258@01
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                              (<
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                          (and
                            (forall ((k@258@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k@258@01)
                                  (<
                                    k@258@01
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                (<
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                            (=>
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                ($Snap.first $t@250@01)
                                $Snap.unit) ret@211@01)
                              (and
                                (or
                                  (not
                                    (or
                                      (<
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        0)
                                      (>
                                        (+
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                        18446744073709551615)))
                                  (or
                                    (<
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      0)
                                    (>
                                      (+
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                      18446744073709551615)))
                                (forall ((k@259@01 Int)) (!
                                  (and
                                    (=>
                                      (not
                                        (or
                                          (<
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            0)
                                          (>
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            18446744073709551615)))
                                      (or
                                        (<=
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          k@259@01)
                                        (not
                                          (<=
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            k@259@01))))
                                    (=>
                                      (and
                                        (not
                                          (or
                                            (<
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              0)
                                            (>
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              18446744073709551615)))
                                        (and
                                          (<=
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            k@259@01)
                                          (<
                                            k@259@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))))
                                      (and
                                        (not
                                          (or
                                            (<
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              0)
                                            (>
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              18446744073709551615)))
                                        (<=
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          k@259@01)
                                        (<
                                          k@259@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))
                                        (<= 0 k@259@01)
                                        (<= k@259@01 18446744073709551615)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@259@01)))
                                    (or
                                      (not
                                        (and
                                          (not
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (and
                                            (<=
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              k@259@01)
                                            (<
                                              k@259@01
                                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                $Snap.unit) $t@251@01)))))
                                      (and
                                        (not
                                          (or
                                            (<
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              0)
                                            (>
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              18446744073709551615)))
                                        (and
                                          (<=
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            k@259@01)
                                          (<
                                            k@259@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))))))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                            (=>
                              (=>
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                  ($Snap.first $t@250@01)
                                  $Snap.unit) ret@211@01)
                                (forall ((k@259@01 Int)) (!
                                  (=>
                                    (and
                                      (not
                                        (or
                                          (<
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            0)
                                          (>
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            18446744073709551615)))
                                      (and
                                        (<=
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          k@259@01)
                                        (<
                                          k@259@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))))
                                    (<
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                              (and
                                (=>
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                    ($Snap.first $t@250@01)
                                    $Snap.unit) ret@211@01)
                                  (forall ((k@259@01 Int)) (!
                                    (=>
                                      (and
                                        (not
                                          (or
                                            (<
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              0)
                                            (>
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              18446744073709551615)))
                                        (and
                                          (<=
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            k@259@01)
                                          (<
                                            k@259@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))))
                                      (<
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@259@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                                  ($Snap.first $t@250@01)
                                  $Snap.unit) ret@211@01)
                                (not
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                    ($Snap.first $t@250@01)
                                    $Snap.unit) ret@211@01))))
                            (or
                              (=>
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                  ($Snap.first $t@250@01)
                                  $Snap.unit) ret@211@01)
                                (forall ((k@259@01 Int)) (!
                                  (=>
                                    (and
                                      (not
                                        (or
                                          (<
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            0)
                                          (>
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            18446744073709551615)))
                                      (and
                                        (<=
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          k@259@01)
                                        (<
                                          k@259@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))))
                                    (<
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                              (not
                                (=>
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                    ($Snap.first $t@250@01)
                                    $Snap.unit) ret@211@01)
                                  (forall ((k@259@01 Int)) (!
                                    (=>
                                      (and
                                        (not
                                          (or
                                            (<
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              0)
                                            (>
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              18446744073709551615)))
                                        (and
                                          (<=
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            k@259@01)
                                          (<
                                            k@259@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))))
                                      (<
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@259@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                        (or
                          (forall ((k@258@01 Int)) (!
                            (=>
                              (and
                                (<= 0 k@258@01)
                                (<
                                  k@258@01
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                              (<
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                          (not
                            (forall ((k@258@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k@258@01)
                                  (<
                                    k@258@01
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                (<
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                    (or
                      (forall ((k@257@01 Int)) (!
                        (=>
                          (and
                            (<= 0 k@257@01)
                            (<
                              k@257@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01)))
                          (=
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second $t@149@01))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                      (not
                        (forall ((k@257@01 Int)) (!
                          (=>
                            (and
                              (<= 0 k@257@01)
                              (<
                                k@257@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01)))
                            (=
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second $t@149@01))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second $t@149@01))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
                (or
                  (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k1@255@01)
                        (and
                          (< k1@255@01 k2@256@01)
                          (<
                            k2@256@01
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              $Snap.unit) $t@251@01))))
                      (<=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                  (not
                    (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                      (=>
                        (and
                          (<= 0 k1@255@01)
                          (and
                            (< k1@255@01 k2@256@01)
                            (<
                              k2@256@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))))
                        (<=
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
            (or
              (=
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
              (not
                (=
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
        (or
          (=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
          (not
            (=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                $Snap.unit) $t@251@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first ($Snap.second $t@149@01))
                $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
    (or
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
        ($Snap.first $t@250@01)
        $Snap.unit) ret@211@01)
      (not
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (<=
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))
  (and
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
          0)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01)
        (=>
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
            ($Snap.first $t@250@01)
            $Snap.unit) ret@211@01)
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
              ($Snap.first $t@250@01)
              $Snap.unit) ret@211@01)
            (=>
              (=
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
              (and
                (=
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                (=>
                  (=
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                  (and
                    (=
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                    (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                      (and
                        (=>
                          (<= 0 k1@255@01)
                          (and
                            (<= 0 k1@255@01)
                            (or
                              (< k1@255@01 k2@256@01)
                              (not (< k1@255@01 k2@256@01)))))
                        (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                        (=>
                          (and
                            (<= 0 k1@255@01)
                            (and
                              (< k1@255@01 k2@256@01)
                              (<
                                k2@256@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (and
                            (<= 0 k1@255@01)
                            (< k1@255@01 k2@256@01)
                            (<
                              k2@256@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))
                            (<
                              k1@255@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))
                            (<= k1@255@01 18446744073709551615)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                            (<= 0 k2@256@01)
                            (<= k2@256@01 18446744073709551615)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                        (or
                          (not
                            (and
                              (<= 0 k1@255@01)
                              (and
                                (< k1@255@01 k2@256@01)
                                (<
                                  k2@256@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01)))))
                          (and
                            (<= 0 k1@255@01)
                            (and
                              (< k1@255@01 k2@256@01)
                              (<
                                k2@256@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
                    (=>
                      (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                        (=>
                          (and
                            (<= 0 k1@255@01)
                            (and
                              (< k1@255@01 k2@256@01)
                              (<
                                k2@256@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (<=
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                      (and
                        (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                          (=>
                            (and
                              (<= 0 k1@255@01)
                              (and
                                (< k1@255@01 k2@256@01)
                                (<
                                  k2@256@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))))
                            (<=
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                        (forall ((k@257@01 Int)) (!
                          (and
                            (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                            (=>
                              (and
                                (<= 0 k@257@01)
                                (<
                                  k@257@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01)))
                              (and
                                (<= 0 k@257@01)
                                (<
                                  k@257@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))
                                (<= k@257@01 18446744073709551615)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                (<
                                  k@257@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                            (or
                              (not
                                (and
                                  (<= 0 k@257@01)
                                  (<
                                    k@257@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (and
                                (<= 0 k@257@01)
                                (<
                                  k@257@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01)))))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second $t@149@01))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                        (=>
                          (forall ((k@257@01 Int)) (!
                            (=>
                              (and
                                (<= 0 k@257@01)
                                (<
                                  k@257@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01)))
                              (=
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second $t@149@01))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                          (and
                            (forall ((k@257@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k@257@01)
                                  (<
                                    k@257@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01)))
                                (=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second $t@149@01))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                            (forall ((k@258@01 Int)) (!
                              (and
                                (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                                (=>
                                  (and
                                    (<= 0 k@258@01)
                                    (<
                                      k@258@01
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                  (and
                                    (<= 0 k@258@01)
                                    (<
                                      k@258@01
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                                    (<
                                      k@258@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))
                                    (<= k@258@01 18446744073709551615)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)))
                                (or
                                  (not
                                    (and
                                      (<= 0 k@258@01)
                                      (<
                                        k@258@01
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                                  (and
                                    (<= 0 k@258@01)
                                    (<
                                      k@258@01
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                            (=>
                              (forall ((k@258@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k@258@01)
                                    (<
                                      k@258@01
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                  (<
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                              (and
                                (forall ((k@258@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@258@01)
                                      (<
                                        k@258@01
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                    (<
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                (=>
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                    ($Snap.first $t@250@01)
                                    $Snap.unit) ret@211@01)
                                  (and
                                    (or
                                      (not
                                        (or
                                          (<
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            0)
                                          (>
                                            (+
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                            18446744073709551615)))
                                      (or
                                        (<
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          0)
                                        (>
                                          (+
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                          18446744073709551615)))
                                    (forall ((k@259@01 Int)) (!
                                      (and
                                        (=>
                                          (not
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (or
                                            (<=
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              k@259@01)
                                            (not
                                              (<=
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                k@259@01))))
                                        (=>
                                          (and
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (and
                                              (<=
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                k@259@01)
                                              (<
                                                k@259@01
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  $Snap.unit) $t@251@01))))
                                          (and
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (<=
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              k@259@01)
                                            (<
                                              k@259@01
                                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                $Snap.unit) $t@251@01))
                                            (<= 0 k@259@01)
                                            (<= k@259@01 18446744073709551615)
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01)))
                                        (or
                                          (not
                                            (and
                                              (not
                                                (or
                                                  (<
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    0)
                                                  (>
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    18446744073709551615)))
                                              (and
                                                (<=
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  k@259@01)
                                                (<
                                                  k@259@01
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    $Snap.unit) $t@251@01)))))
                                          (and
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (and
                                              (<=
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                k@259@01)
                                              (<
                                                k@259@01
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  $Snap.unit) $t@251@01))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                                (=>
                                  (=>
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                      ($Snap.first $t@250@01)
                                      $Snap.unit) ret@211@01)
                                    (forall ((k@259@01 Int)) (!
                                      (=>
                                        (and
                                          (not
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (and
                                            (<=
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              k@259@01)
                                            (<
                                              k@259@01
                                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                $Snap.unit) $t@251@01))))
                                        (<
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@259@01)))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                  (and
                                    (=>
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                        ($Snap.first $t@250@01)
                                        $Snap.unit) ret@211@01)
                                      (forall ((k@259@01 Int)) (!
                                        (=>
                                          (and
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (and
                                              (<=
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                k@259@01)
                                              (<
                                                k@259@01
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  $Snap.unit) $t@251@01))))
                                          (<
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01)))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@259@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                                      ($Snap.first $t@250@01)
                                      $Snap.unit) ret@211@01)
                                    (not
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                        ($Snap.first $t@250@01)
                                        $Snap.unit) ret@211@01))))
                                (or
                                  (=>
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                      ($Snap.first $t@250@01)
                                      $Snap.unit) ret@211@01)
                                    (forall ((k@259@01 Int)) (!
                                      (=>
                                        (and
                                          (not
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (and
                                            (<=
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              k@259@01)
                                            (<
                                              k@259@01
                                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                $Snap.unit) $t@251@01))))
                                        (<
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@259@01)))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                  (not
                                    (=>
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                        ($Snap.first $t@250@01)
                                        $Snap.unit) ret@211@01)
                                      (forall ((k@259@01 Int)) (!
                                        (=>
                                          (and
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (and
                                              (<=
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                k@259@01)
                                              (<
                                                k@259@01
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  $Snap.unit) $t@251@01))))
                                          (<
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01)))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@259@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                            (or
                              (forall ((k@258@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k@258@01)
                                    (<
                                      k@258@01
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                  (<
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                              (not
                                (forall ((k@258@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@258@01)
                                      (<
                                        k@258@01
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                    (<
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                        (or
                          (forall ((k@257@01 Int)) (!
                            (=>
                              (and
                                (<= 0 k@257@01)
                                (<
                                  k@257@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01)))
                              (=
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second $t@149@01))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                          (not
                            (forall ((k@257@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k@257@01)
                                  (<
                                    k@257@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01)))
                                (=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second $t@149@01))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
                    (or
                      (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                        (=>
                          (and
                            (<= 0 k1@255@01)
                            (and
                              (< k1@255@01 k2@256@01)
                              (<
                                k2@256@01
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  $Snap.unit) $t@251@01))))
                          (<=
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                      (not
                        (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                          (=>
                            (and
                              (<= 0 k1@255@01)
                              (and
                                (< k1@255@01 k2@256@01)
                                (<
                                  k2@256@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))))
                            (<=
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
                (or
                  (=
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                  (not
                    (=
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
            (or
              (=
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  $Snap.unit) $t@251@01)
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first ($Snap.second $t@149@01))
                  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
              (not
                (=
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                    $Snap.unit) $t@251@01)
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
        (or
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
            ($Snap.first $t@250@01)
            $Snap.unit) ret@211@01)
          (not
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
              ($Snap.first $t@250@01)
              $Snap.unit) ret@211@01)))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
          0))))))
(assert (or
  (<=
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))
  (not
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (and
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01)
    (=>
      (<=
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))
      (and
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
              ($Snap.first $t@250@01)
              $Snap.unit) ret@211@01)
            (=>
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (and
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (=>
                  (=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                  (and
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (=>
                      (=
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                      (and
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                          (and
                            (=>
                              (<= 0 k1@255@01)
                              (and
                                (<= 0 k1@255@01)
                                (or
                                  (< k1@255@01 k2@256@01)
                                  (not (< k1@255@01 k2@256@01)))))
                            (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                            (=>
                              (and
                                (<= 0 k1@255@01)
                                (and
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (and
                                (<= 0 k1@255@01)
                                (< k1@255@01 k2@256@01)
                                (<
                                  k2@256@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))
                                (<
                                  k1@255@01
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    $Snap.unit) $t@251@01))
                                (<= k1@255@01 18446744073709551615)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                (<= 0 k2@256@01)
                                (<= k2@256@01 18446744073709551615)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                            (or
                              (not
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01)))))
                              (and
                                (<= 0 k1@255@01)
                                (and
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))))
                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
                        (=>
                          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                            (=>
                              (and
                                (<= 0 k1@255@01)
                                (and
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (<=
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                          (and
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (forall ((k@257@01 Int)) (!
                              (and
                                (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                                (=>
                                  (and
                                    (<= 0 k@257@01)
                                    (<
                                      k@257@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01)))
                                  (and
                                    (<= 0 k@257@01)
                                    (<
                                      k@257@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))
                                    (<= k@257@01 18446744073709551615)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                    (<
                                      k@257@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                (or
                                  (not
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (and
                                    (<= 0 k@257@01)
                                    (<
                                      k@257@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01)))))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second $t@149@01))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                            (=>
                              (forall ((k@257@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k@257@01)
                                    (<
                                      k@257@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01)))
                                  (=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                              (and
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (forall ((k@258@01 Int)) (!
                                  (and
                                    (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                                    (=>
                                      (and
                                        (<= 0 k@258@01)
                                        (<
                                          k@258@01
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                      (and
                                        (<= 0 k@258@01)
                                        (<
                                          k@258@01
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                                        (<
                                          k@258@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))
                                        (<= k@258@01 18446744073709551615)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01)))
                                    (or
                                      (not
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                                      (and
                                        (<= 0 k@258@01)
                                        (<
                                          k@258@01
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                                (=>
                                  (forall ((k@258@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@258@01)
                                        (<
                                          k@258@01
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                      (<
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01)
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                  (and
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (=>
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                        ($Snap.first $t@250@01)
                                        $Snap.unit) ret@211@01)
                                      (and
                                        (or
                                          (not
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (or
                                            (<
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              0)
                                            (>
                                              (+
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                              18446744073709551615)))
                                        (forall ((k@259@01 Int)) (!
                                          (and
                                            (=>
                                              (not
                                                (or
                                                  (<
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    0)
                                                  (>
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    18446744073709551615)))
                                              (or
                                                (<=
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  k@259@01)
                                                (not
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01))))
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (<=
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  k@259@01)
                                                (<
                                                  k@259@01
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    $Snap.unit) $t@251@01))
                                                (<= 0 k@259@01)
                                                (<=
                                                  k@259@01
                                                  18446744073709551615)
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            (or
                                              (not
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01)))))
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))))
                                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@259@01))
                                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                                    (=>
                                      (=>
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                          ($Snap.first $t@250@01)
                                          $Snap.unit) ret@211@01)
                                        (forall ((k@259@01 Int)) (!
                                          (=>
                                            (and
                                              (not
                                                (or
                                                  (<
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    0)
                                                  (>
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    18446744073709551615)))
                                              (and
                                                (<=
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  k@259@01)
                                                (<
                                                  k@259@01
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    $Snap.unit) $t@251@01))))
                                            (<
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01)))
                                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@259@01))
                                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                      (and
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                                          ($Snap.first $t@250@01)
                                          $Snap.unit) ret@211@01)
                                        (not
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01))))
                                    (or
                                      (=>
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                          ($Snap.first $t@250@01)
                                          $Snap.unit) ret@211@01)
                                        (forall ((k@259@01 Int)) (!
                                          (=>
                                            (and
                                              (not
                                                (or
                                                  (<
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    0)
                                                  (>
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    18446744073709551615)))
                                              (and
                                                (<=
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  k@259@01)
                                                (<
                                                  k@259@01
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    $Snap.unit) $t@251@01))))
                                            (<
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01)))
                                          :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@259@01))
                                          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                      (not
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                                (or
                                  (forall ((k@258@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@258@01)
                                        (<
                                          k@258@01
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                      (<
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01)
                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                  (not
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                            (or
                              (forall ((k@257@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k@257@01)
                                    (<
                                      k@257@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01)))
                                  (=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                              (not
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
                        (or
                          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                            (=>
                              (and
                                (<= 0 k1@255@01)
                                (and
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))))
                              (<=
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                          (not
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
                    (or
                      (=
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                      (not
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
                (or
                  (=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      $Snap.unit) $t@251@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second $t@149@01))
                      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                  (not
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
            (or
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (not
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)))))
    (or
      (<=
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          $Snap.unit) $t@251@01))
      (not
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01)))))))
(assert (or
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (or
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0)
    (>
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      18446744073709551615))))
(pop) ; 7
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))) $t@252@01)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (not (= $t@252@01 $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    2147483647)
  (or
    (not
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0))
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0))
  (=>
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (and
      (not
        (or
          (<
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            0)
          (>
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            18446744073709551615)))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)
      (=>
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (and
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))
          (=>
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
                0)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (=>
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (and
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)
                  (=>
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (and
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                      (=>
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (and
                          (=
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                            (and
                              (=>
                                (<= 0 k1@255@01)
                                (and
                                  (<= 0 k1@255@01)
                                  (or
                                    (< k1@255@01 k2@256@01)
                                    (not (< k1@255@01 k2@256@01)))))
                              (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (and
                                  (<= 0 k1@255@01)
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))
                                  (<
                                    k1@255@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))
                                  (<= k1@255@01 18446744073709551615)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (<= 0 k2@256@01)
                                  (<= k2@256@01 18446744073709551615)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              (or
                                (not
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))))
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
                          (=>
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (and
                              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                              (forall ((k@257@01 Int)) (!
                                (and
                                  (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))
                                      (<= k@257@01 18446744073709551615)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  (or
                                    (not
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))))
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                              (=>
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (and
                                  (forall ((k@257@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))
                                      (=
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@257@01)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                  (forall ((k@258@01 Int)) (!
                                    (and
                                      (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                                          (<
                                            k@258@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))
                                          (<= k@258@01 18446744073709551615)
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)))
                                      (or
                                        (not
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                                  (=>
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (and
                                      (forall ((k@258@01 Int)) (!
                                        (=>
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                          (<
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@258@01)
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                      (=>
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                          ($Snap.first $t@250@01)
                                          $Snap.unit) ret@211@01)
                                        (and
                                          (or
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (forall ((k@259@01 Int)) (!
                                            (and
                                              (=>
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (or
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (not
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01))))
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))
                                                  (<= 0 k@259@01)
                                                  (<=
                                                    k@259@01
                                                    18446744073709551615)
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              (or
                                                (not
                                                  (and
                                                    (not
                                                      (or
                                                        (<
                                                          (+
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                          0)
                                                        (>
                                                          (+
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                          18446744073709551615)))
                                                    (and
                                                      (<=
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        k@259@01)
                                                      (<
                                                        k@259@01
                                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                          $Snap.unit) $t@251@01)))))
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                                      (=>
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (and
                                          (=>
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01)
                                            (forall ((k@259@01 Int)) (!
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (<
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01))
                                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (not
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01))))
                                      (or
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (not
                                          (=>
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01)
                                            (forall ((k@259@01 Int)) (!
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (<
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01))
                                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                                  (or
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (not
                                      (forall ((k@258@01 Int)) (!
                                        (=>
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                          (<
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@258@01)
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                              (or
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (not
                                  (forall ((k@257@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))
                                      (=
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@257@01)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
                          (or
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (not
                              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
                      (or
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (not
                          (=
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
                  (or
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (not
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
              (or
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (not
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)))))
          (or
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (not
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
                0)))))
      (or
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (not
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))))
  (or
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))))
(pop) ; 6
; Joined path conditions
(assert (and
  (usize%trigger ($Snap.first ($Snap.second ($Snap.second $t@250@01))) ret@214@01)
  (=
    ($Snap.first ($Snap.second ($Snap.second $t@250@01)))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  (not (= ret@214@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))
  (=
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    $Snap.unit)
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    18446744073709551615)
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))) $t@252@01)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (not (= $t@252@01 $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    2147483647)
  (or
    (not
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0))
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0))
  (=>
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (and
      (not
        (or
          (<
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            0)
          (>
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            18446744073709551615)))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)
      (=>
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (and
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))
          (=>
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
                0)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (=>
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (and
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)
                  (=>
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (and
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                      (=>
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (and
                          (=
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                            (and
                              (=>
                                (<= 0 k1@255@01)
                                (and
                                  (<= 0 k1@255@01)
                                  (or
                                    (< k1@255@01 k2@256@01)
                                    (not (< k1@255@01 k2@256@01)))))
                              (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (and
                                  (<= 0 k1@255@01)
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))
                                  (<
                                    k1@255@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))
                                  (<= k1@255@01 18446744073709551615)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (<= 0 k2@256@01)
                                  (<= k2@256@01 18446744073709551615)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              (or
                                (not
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))))
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
                          (=>
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (and
                              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                              (forall ((k@257@01 Int)) (!
                                (and
                                  (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))
                                      (<= k@257@01 18446744073709551615)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  (or
                                    (not
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))))
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                              (=>
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (and
                                  (forall ((k@257@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))
                                      (=
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@257@01)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                  (forall ((k@258@01 Int)) (!
                                    (and
                                      (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                                          (<
                                            k@258@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))
                                          (<= k@258@01 18446744073709551615)
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)))
                                      (or
                                        (not
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                                  (=>
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (and
                                      (forall ((k@258@01 Int)) (!
                                        (=>
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                          (<
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@258@01)
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                      (=>
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                          ($Snap.first $t@250@01)
                                          $Snap.unit) ret@211@01)
                                        (and
                                          (or
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (forall ((k@259@01 Int)) (!
                                            (and
                                              (=>
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (or
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (not
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01))))
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))
                                                  (<= 0 k@259@01)
                                                  (<=
                                                    k@259@01
                                                    18446744073709551615)
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              (or
                                                (not
                                                  (and
                                                    (not
                                                      (or
                                                        (<
                                                          (+
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                          0)
                                                        (>
                                                          (+
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                          18446744073709551615)))
                                                    (and
                                                      (<=
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        k@259@01)
                                                      (<
                                                        k@259@01
                                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                          $Snap.unit) $t@251@01)))))
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                                      (=>
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (and
                                          (=>
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01)
                                            (forall ((k@259@01 Int)) (!
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (<
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01))
                                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (not
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01))))
                                      (or
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (not
                                          (=>
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01)
                                            (forall ((k@259@01 Int)) (!
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (<
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01))
                                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                                  (or
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (not
                                      (forall ((k@258@01 Int)) (!
                                        (=>
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                          (<
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@258@01)
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                              (or
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (not
                                  (forall ((k@257@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))
                                      (=
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@257@01)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
                          (or
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (not
                              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
                      (or
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (not
                          (=
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
                  (or
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (not
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
              (or
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (not
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)))))
          (or
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (not
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
                0)))))
      (or
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (not
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))))
  (or
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))))
(pop) ; 5
; Joined path conditions
(assert (and
  (usize%trigger ($Snap.first ($Snap.second $t@250@01)) ret@215@01)
  (=
    ($Snap.first ($Snap.second $t@250@01))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@250@01)))
      ($Snap.second ($Snap.first ($Snap.second $t@250@01)))))
  (not (= ret@215@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second $t@250@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@250@01))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@250@01))))))
  (=
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@250@01))))
    $Snap.unit)
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@250@01))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    18446744073709551615)
  (usize%trigger ($Snap.first ($Snap.second ($Snap.second $t@250@01))) ret@214@01)
  (=
    ($Snap.first ($Snap.second ($Snap.second $t@250@01)))
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))
      ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  (not (= ret@214@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))
  (=
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    $Snap.unit)
  (<=
    0
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    18446744073709551615)
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))) $t@252@01)
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (not (= $t@252@01 $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
    2147483647)
  (or
    (not
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0))
    (<
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      0))
  (=>
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (and
      (not
        (or
          (<
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            0)
          (>
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            18446744073709551615)))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01)
      (=>
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (and
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))
          (=>
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
                0)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                ($Snap.first $t@250@01)
                $Snap.unit) ret@211@01)
              (=>
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (and
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)
                  (=>
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (and
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                      (=>
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (and
                          (=
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                          (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                            (and
                              (=>
                                (<= 0 k1@255@01)
                                (and
                                  (<= 0 k1@255@01)
                                  (or
                                    (< k1@255@01 k2@256@01)
                                    (not (< k1@255@01 k2@256@01)))))
                              (or (<= 0 k1@255@01) (not (<= 0 k1@255@01)))
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (and
                                  (<= 0 k1@255@01)
                                  (< k1@255@01 k2@256@01)
                                  (<
                                    k2@256@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))
                                  (<
                                    k1@255@01
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      $Snap.unit) $t@251@01))
                                  (<= k1@255@01 18446744073709551615)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (<= 0 k2@256@01)
                                  (<= k2@256@01 18446744073709551615)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              (or
                                (not
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))))
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))))
                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811-aux|))
                          (=>
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (and
                              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                              (forall ((k@257@01 Int)) (!
                                (and
                                  (or (<= 0 k@257@01) (not (<= 0 k@257@01)))
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))
                                      (<= k@257@01 18446744073709551615)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  (or
                                    (not
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01))))
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second $t@149@01))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468-aux|))
                              (=>
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (and
                                  (forall ((k@257@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))
                                      (=
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@257@01)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                  (forall ((k@258@01 Int)) (!
                                    (and
                                      (or (<= 0 k@258@01) (not (<= 0 k@258@01)))
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))
                                          (<
                                            k@258@01
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              $Snap.unit) $t@251@01))
                                          (<= k@258@01 18446744073709551615)
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)))
                                      (or
                                        (not
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01)))))))
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746-aux|))
                                  (=>
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (and
                                      (forall ((k@258@01 Int)) (!
                                        (=>
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                          (<
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@258@01)
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                      (=>
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                          ($Snap.first $t@250@01)
                                          $Snap.unit) ret@211@01)
                                        (and
                                          (or
                                            (not
                                              (or
                                                (<
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  0)
                                                (>
                                                  (+
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                  18446744073709551615)))
                                            (or
                                              (<
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                0)
                                              (>
                                                (+
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                18446744073709551615)))
                                          (forall ((k@259@01 Int)) (!
                                            (and
                                              (=>
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (or
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (not
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01))))
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))
                                                  (<= 0 k@259@01)
                                                  (<=
                                                    k@259@01
                                                    18446744073709551615)
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              (or
                                                (not
                                                  (and
                                                    (not
                                                      (or
                                                        (<
                                                          (+
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                          0)
                                                        (>
                                                          (+
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                          18446744073709551615)))
                                                    (and
                                                      (<=
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        k@259@01)
                                                      (<
                                                        k@259@01
                                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                          $Snap.unit) $t@251@01)))))
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507-aux|))))
                                      (=>
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (and
                                          (=>
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01)
                                            (forall ((k@259@01 Int)) (!
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (<
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01))
                                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (not
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01))))
                                      (or
                                        (=>
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                            ($Snap.first $t@250@01)
                                            $Snap.unit) ret@211@01)
                                          (forall ((k@259@01 Int)) (!
                                            (=>
                                              (and
                                                (not
                                                  (or
                                                    (<
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      0)
                                                    (>
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      18446744073709551615)))
                                                (and
                                                  (<=
                                                    (+
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                    k@259@01)
                                                  (<
                                                    k@259@01
                                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                      $Snap.unit) $t@251@01))))
                                              (<
                                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))) $t@251@01 k@259@01)))
                                            :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@259@01))
                                            :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))
                                        (not
                                          (=>
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                                              ($Snap.first $t@250@01)
                                              $Snap.unit) ret@211@01)
                                            (forall ((k@259@01 Int)) (!
                                              (=>
                                                (and
                                                  (not
                                                    (or
                                                      (<
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        0)
                                                      (>
                                                        (+
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                        18446744073709551615)))
                                                  (and
                                                    (<=
                                                      (+
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                                      k@259@01)
                                                    (<
                                                      k@259@01
                                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                        $Snap.unit) $t@251@01))))
                                                (<
                                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))) $t@251@01 k@259@01)))
                                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))) $t@251@01 k@259@01))
                                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))
                                  (or
                                    (forall ((k@258@01 Int)) (!
                                      (=>
                                        (and
                                          (<= 0 k@258@01)
                                          (<
                                            k@258@01
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                        (<
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  $Snap.unit)))) $t@251@01 k@258@01)
                                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                                    (not
                                      (forall ((k@258@01 Int)) (!
                                        (=>
                                          (and
                                            (<= 0 k@258@01)
                                            (<
                                              k@258@01
                                              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                                          (<
                                            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    $Snap.unit)))) $t@251@01 k@258@01)
                                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                                        :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@258@01))
                                        :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))))))
                              (or
                                (forall ((k@257@01 Int)) (!
                                  (=>
                                    (and
                                      (<= 0 k@257@01)
                                      (<
                                        k@257@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01)))
                                    (=
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second $t@149@01))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                    ($Snap.first ($Snap.second $t@149@01))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                                (not
                                  (forall ((k@257@01 Int)) (!
                                    (=>
                                      (and
                                        (<= 0 k@257@01)
                                        (<
                                          k@257@01
                                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                            $Snap.unit) $t@251@01)))
                                      (=
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) $t@251@01 k@257@01)
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second $t@149@01))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                $Snap.unit
                                                $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                      ($Snap.first ($Snap.second $t@149@01))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))))))
                          (or
                            (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                              (=>
                                (and
                                  (<= 0 k1@255@01)
                                  (and
                                    (< k1@255@01 k2@256@01)
                                    (<
                                      k2@256@01
                                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                        $Snap.unit) $t@251@01))))
                                (<=
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                              :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
                            (not
                              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                                (=>
                                  (and
                                    (<= 0 k1@255@01)
                                    (and
                                      (< k1@255@01 k2@256@01)
                                      (<
                                        k2@256@01
                                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                          $Snap.unit) $t@251@01))))
                                  (<=
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))))))
                      (or
                        (=
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
                        (not
                          (=
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))))
                  (or
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        $Snap.unit) $t@251@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
                    (not
                      (=
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second $t@149@01))
                          $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))))
              (or
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                  ($Snap.first $t@250@01)
                  $Snap.unit) ret@211@01)
                (not
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                    ($Snap.first $t@250@01)
                    $Snap.unit) ret@211@01)))))
          (or
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
              0)
            (not
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
                0)))))
      (or
        (<=
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (not
          (<=
            (+
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01))))))
  (or
    (not
      (or
        (<
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          0)
        (>
          (+
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
          18446744073709551615)))
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))))
(assert (and
  (not
    (or
      (<
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        0)
      (>
        (+
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
        18446744073709551615)))
  (and
    (<=
      (+
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        0)
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
          ($Snap.first $t@250@01)
          $Snap.unit) ret@211@01)
        (and
          (=
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
              $Snap.unit) $t@251@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
          (and
            (=
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
            (and
              (forall ((k1@255@01 Int) (k2@256@01 Int)) (!
                (=>
                  (and
                    (<= 0 k1@255@01)
                    (and
                      (< k1@255@01 k2@256@01)
                      (<
                        k2@256@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01))))
                  (<=
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01)
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01)))
                :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@255@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@256@01))
                :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1144@1870@1811|))
              (and
                (forall ((k@257@01 Int)) (!
                  (=>
                    (and
                      (<= 0 k@257@01)
                      (<
                        k@257@01
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          $Snap.unit) $t@251@01)))
                    (=
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@257@01)
                      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                        ($Snap.first ($Snap.second $t@149@01))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01)))
                  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                    ($Snap.first ($Snap.second $t@149@01))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@257@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@1818@1870@2468|))
                (and
                  (forall ((k@258@01 Int)) (!
                    (=>
                      (and
                        (<= 0 k@258@01)
                        (<
                          k@258@01
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
                      (<
                        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01)
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
                    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@258@01))
                    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2475@1870@2746|))
                  (=>
                    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
                      ($Snap.first $t@250@01)
                      $Snap.unit) ret@211@01)
                    (forall ((k@259@01 Int)) (!
                      (=>
                        (and
                          (not
                            (or
                              (<
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                0)
                              (>
                                (+
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                                18446744073709551615)))
                          (and
                            (<=
                              (+
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
                                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01))))))
                              k@259@01)
                            (<
                              k@259@01
                              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                                $Snap.unit) $t@251@01))))
                        (<
                          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))
                          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01)))
                      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@259@01))
                      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1870@2946@1870@3507|)))))))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb7
; [exec]
; __t4 := true
; [exec]
; _12 := builtin$havoc_ref()
(declare-const ret@260@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_12), write)
(declare-const $t@261@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb8
; [exec]
; __t5 := true
; [exec]
; _48 := builtin$havoc_int()
(declare-const ret@262@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(usize(_3), write)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _48 := _3.val_int
(declare-const _48@264@01 Int)
(assert (=
  _48@264@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))
; [exec]
; label l7
; [exec]
; _49 := builtin$havoc_ref()
(declare-const ret@265@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_49.val_bool, write)
(declare-const $t@266@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@265@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _49.val_bool := false
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t26 := _49.val_bool
; [exec]
; assert !__t26
; [eval] !__t26
; [exec]
; label loop3_group3_bb9
; [exec]
; __t6 := true
; [exec]
; _47 := builtin$havoc_int()
(declare-const ret@267@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@268@01 $Snap)
(assert (= $t@268@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _47 := _48 \ 2
; [eval] _48 \ 2
(declare-const _47@269@01 Int)
(assert (= _47@269@01 (div _48@264@01 2)))
; [exec]
; _51 := builtin$havoc_int()
(declare-const ret@270@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@271@01 $Snap)
(assert (= $t@271@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(usize(_5), write)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@215@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
; [exec]
; _51 := _5.val_int
(declare-const _51@272@01 Int)
(assert (=
  _51@272@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
; [exec]
; label l8
; [exec]
; _52 := builtin$havoc_int()
(declare-const ret@273@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _52 := _47
; [exec]
; label l9
; [exec]
; _53 := builtin$havoc_ref()
(declare-const ret@275@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_53.tuple_0, write)
(declare-const $t@276@01 $Ref)
(assert (not (= ret@275@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_53.tuple_0.val_int, write)
(declare-const $t@277@01 Int)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@276@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@276@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@276@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_53.tuple_1, write)
(declare-const $t@278@01 $Ref)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_53.tuple_1.val_bool, write)
(declare-const $t@279@01 Bool)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@278@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@278@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@278@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _53.tuple_0.val_int := _51 + _52
; [eval] _51 + _52
(declare-const val_int@280@01 Int)
(assert (= val_int@280@01 (+ _51@272@01 _47@269@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@276@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@276@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _53.tuple_1.val_bool := _51 + _52 < 0 || _51 + _52 > 18446744073709551615
; [eval] _51 + _52 < 0 || _51 + _52 > 18446744073709551615
; [eval] _51 + _52 < 0
; [eval] _51 + _52
(set-option :timeout 0)
(push) ; 5
; [then-branch: 53 | _51@272@01 + _47@269@01 < 0 | live]
; [else-branch: 53 | !(_51@272@01 + _47@269@01 < 0) | live]
(push) ; 6
; [then-branch: 53 | _51@272@01 + _47@269@01 < 0]
(assert (< (+ _51@272@01 _47@269@01) 0))
(pop) ; 6
(push) ; 6
; [else-branch: 53 | !(_51@272@01 + _47@269@01 < 0)]
(assert (not (< (+ _51@272@01 _47@269@01) 0)))
; [eval] _51 + _52 > 18446744073709551615
; [eval] _51 + _52
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (< (+ _51@272@01 _47@269@01) 0)) (< (+ _51@272@01 _47@269@01) 0)))
(declare-const val_bool@281@01 Bool)
(assert (=
  val_bool@281@01
  (or
    (< (+ _51@272@01 _47@269@01) 0)
    (> (+ _51@272@01 _47@269@01) 18446744073709551615))))
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@278@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@278@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t27 := _53.tuple_1.val_bool
; [exec]
; assert !__t27
; [eval] !__t27
(set-option :timeout 0)
(push) ; 5
(assert (not (not val_bool@281@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not val_bool@281@01))
; [exec]
; label loop3_group3_bb10
; [exec]
; __t7 := true
; [exec]
; _50 := _53.tuple_0
; [exec]
; label l10
; [exec]
; _55 := builtin$havoc_ref()
(declare-const ret@282@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_55.val_ref, write)
(declare-const $t@283@01 $Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@282@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _55.val_ref := _1.val_ref
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@282@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l11
; [exec]
; _56 := builtin$havoc_int()
(declare-const ret@284@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _56 := _50.val_int
; [exec]
; label l12
; [exec]
; label l13
; [exec]
; assert 0 <= _56 &&
;   _56 <
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)
; [eval] 0 <= _56
(set-option :timeout 0)
(push) ; 5
(assert (not (<= 0 val_int@280@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@280@01))
; [eval] _56 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  $Snap.unit) $t@251@01))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  $Snap.unit) $t@251@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  val_int@280@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@280@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)))
; [exec]
; assert _56 >= 0 && 18446744073709551615 >= _56
; [eval] _56 >= 0
(push) ; 5
(assert (not (>= val_int@280@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>= val_int@280@01 0))
; [eval] 18446744073709551615 >= _56
(push) ; 5
(assert (not (>= 18446744073709551615 val_int@280@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>= 18446744073709551615 val_int@280@01))
; [exec]
; assert true
; [exec]
; exhale acc(_55.val_ref, write) &&
;   (acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_55.val_ref), write) &&
;   (_56 >= 0 && 18446744073709551615 >= _56))
; [eval] _56 >= 0
; [eval] 18446744073709551615 >= _56
; [exec]
; _54 := builtin$havoc_ref()
(declare-const ret@286@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@287@01 $Snap)
(assert (= $t@287@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_54.val_ref, write) && acc(i32(_54.val_ref), write)
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 ($Snap.combine ($Snap.first $t@288@01) ($Snap.second $t@288@01))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@286@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@286@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@286@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@286@01 $Ref.null)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= $t@252@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(i32(_54.val_ref), write) in
;     _54.val_ref.val_int ==
;     old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref,
;     _56)))
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 $Snap.unit))
; [eval] (unfolding acc(i32(_54.val_ref), write) in _54.val_ref.val_int == old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, _56)))
(set-option :timeout 0)
(push) ; 5
(assert (i32%trigger ($Snap.second $t@288@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01))))
(assert (=
  ($Snap.second $t@288@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@288@01))
    ($Snap.second ($Snap.second $t@288@01)))))
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@276@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@215@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@214@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@288@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@288@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@288@01))) $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01)))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@288@01))) $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))) 2147483647))
; [eval] _54.val_ref.val_int == old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, _56))
; [eval] old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, _56))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, _56)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 7
(assert (not (<= val_int@280@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= val_int@280@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (<= val_int@280@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01)))
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second $t@288@01) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))
  (=
    ($Snap.second $t@288@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@288@01))
      ($Snap.second ($Snap.second $t@288@01))))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) $Ref.null))
  (=
    ($Snap.second ($Snap.second $t@288@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@288@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))
  (= ($Snap.first ($Snap.second ($Snap.second $t@288@01))) $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
  (= ($Snap.second ($Snap.second ($Snap.second $t@288@01))) $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01)))
    2147483647)
  (<= val_int@280@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01)))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01)))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l14
; [exec]
; label loop3_group3_bb11
; [exec]
; __t8 := true
; [exec]
; _58 := builtin$havoc_ref()
(declare-const ret@291@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_58.val_ref, write)
(declare-const $t@292@01 $Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@291@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _58.val_ref := _54.val_ref
(declare-const val_ref@293@01 $Ref)
(assert (= val_ref@293@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@291@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l15
; [exec]
; _59 := builtin$havoc_ref()
(declare-const ret@294@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_59.val_ref, write)
(declare-const $t@295@01 $Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@291@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@294@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _59.val_ref := _2.val_ref
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@291@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@294@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l16
; [exec]
; label l17
; [exec]
; assert true
; [exec]
; exhale acc(_58.val_ref, write) &&
;   (acc(i32(_58.val_ref), write) &&
;   (acc(_59.val_ref, write) && acc(i32(_59.val_ref), write)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) val_ref@293@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; _57 := builtin$havoc_ref()
(declare-const ret@296@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(i32(old[l17](_58.val_ref)), write) &&
;   acc(i32(old[l17](_59.val_ref)), write)
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 ($Snap.combine ($Snap.first $t@297@01) ($Snap.second $t@297@01))))
; [eval] old[l17](_58.val_ref)
; [eval] old[l17](_59.val_ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= val_ref@293@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write)
(declare-const $t@298@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@299@01 $Snap)
(assert (= $t@299@01 $Snap.unit))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (unfolding acc(i32(old[l17](_59.val_ref)), write) in
;     (unfolding acc(i32(old[l17](_58.val_ref)), write) in
;       (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write) in
;         old[l17](_58.val_ref).val_int ==
;         old[l17]((unfolding acc(i32(_58.val_ref), write) in
;           _58.val_ref.val_int)) &&
;         (old[l17](_59.val_ref).val_int ==
;         old[l17]((unfolding acc(i32(_59.val_ref), write) in
;           _59.val_ref.val_int)) &&
;         (_57.discriminant == 1 ?
;           old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int :
;           (_57.discriminant == 0 ?
;             old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int :
;             old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int))))))
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 $Snap.unit))
; [eval] (unfolding acc(i32(old[l17](_59.val_ref)), write) in (unfolding acc(i32(old[l17](_58.val_ref)), write) in (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write) in old[l17](_58.val_ref).val_int == old[l17]((unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int)) && (old[l17](_59.val_ref).val_int == old[l17]((unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int)) && (_57.discriminant == 1 ? old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int : (_57.discriminant == 0 ? old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int : old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int))))))
; [eval] old[l17](_59.val_ref)
(set-option :timeout 0)
(push) ; 5
; [eval] old[l17](_59.val_ref)
(assert (i32%trigger ($Snap.second $t@297@01) $t@252@01))
(assert (=
  ($Snap.second $t@297@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@297@01))
    ($Snap.second ($Snap.second $t@297@01)))))
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@297@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@297@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@297@01))) $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@297@01))) $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01))) 2147483647))
; [eval] (unfolding acc(i32(old[l17](_58.val_ref)), write) in (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write) in old[l17](_58.val_ref).val_int == old[l17]((unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int)) && (old[l17](_59.val_ref).val_int == old[l17]((unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int)) && (_57.discriminant == 1 ? old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int : (_57.discriminant == 0 ? old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int : old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int)))))
; [eval] old[l17](_58.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] old[l17](_58.val_ref)
(assert (i32%trigger ($Snap.first $t@297@01) val_ref@293@01))
(assert (=
  ($Snap.first $t@297@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@297@01))
    ($Snap.second ($Snap.first $t@297@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@252@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@276@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@215@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@214@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= val_ref@293@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@297@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@297@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@297@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.first $t@297@01))) $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))))
(assert (= ($Snap.second ($Snap.second ($Snap.first $t@297@01))) $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01))) 2147483647))
; [eval] (unfolding acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write) in old[l17](_58.val_ref).val_int == old[l17]((unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int)) && (old[l17](_59.val_ref).val_int == old[l17]((unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int)) && (_57.discriminant == 1 ? old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int : (_57.discriminant == 0 ? old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int : old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int))))
(set-option :timeout 0)
(push) ; 7
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@298@01 ret@296@01))
(assert (= $t@298@01 ($Snap.combine ($Snap.first $t@298@01) ($Snap.second $t@298@01))))
(assert (not (= ret@296@01 $Ref.null)))
(assert (=
  ($Snap.second $t@298@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@298@01))
    ($Snap.second ($Snap.second $t@298@01)))))
(assert (= ($Snap.first ($Snap.second $t@298@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@298@01))))
(assert (= ($Snap.second ($Snap.second $t@298@01)) $Snap.unit))
; [eval] self.discriminant <= 2
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 2))
; [eval] old[l17](_58.val_ref).val_int == old[l17]((unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int)) && (old[l17](_59.val_ref).val_int == old[l17]((unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int)) && (_57.discriminant == 1 ? old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int : (_57.discriminant == 0 ? old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int : old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int)))
; [eval] old[l17](_58.val_ref).val_int == old[l17]((unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int))
; [eval] old[l17](_58.val_ref)
; [eval] old[l17]((unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int))
; [eval] (unfolding acc(i32(_58.val_ref), write) in _58.val_ref.val_int)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) val_ref@293@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.second $t@288@01) val_ref@293@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 val_ref@293@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 8
; Joined path conditions
(assert (i32%trigger ($Snap.second $t@288@01) val_ref@293@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 54 | First:(First:($t@297@01)) != First:(Second:($t@288@01)) | live]
; [else-branch: 54 | First:(First:($t@297@01)) == First:(Second:($t@288@01)) | live]
(push) ; 9
; [then-branch: 54 | First:(First:($t@297@01)) != First:(Second:($t@288@01))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))))
(pop) ; 9
(push) ; 9
; [else-branch: 54 | First:(First:($t@297@01)) == First:(Second:($t@288@01))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01)))))
; [eval] old[l17](_59.val_ref).val_int == old[l17]((unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int))
; [eval] old[l17](_59.val_ref)
; [eval] old[l17]((unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int))
; [eval] (unfolding acc(i32(_59.val_ref), write) in _59.val_ref.val_int)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
; [then-branch: 55 | First:(Second:($t@297@01)) != First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) | live]
; [else-branch: 55 | First:(Second:($t@297@01)) == First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01)))))))) | live]
(push) ; 11
; [then-branch: 55 | First:(Second:($t@297@01)) != First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01))))))))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))))
(pop) ; 11
(push) ; 11
; [else-branch: 55 | First:(Second:($t@297@01)) == First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@250@01))))))))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))
; [eval] (_57.discriminant == 1 ? old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int : (_57.discriminant == 0 ? old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int : old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int))
; [eval] _57.discriminant == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | First:($t@298@01) == 1 | live]
; [else-branch: 56 | First:($t@298@01) != 1 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 56 | First:($t@298@01) == 1]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
; [eval] old[l17](_58.val_ref).val_int == old[l17](_59.val_ref).val_int
; [eval] old[l17](_58.val_ref)
; [eval] old[l17](_59.val_ref)
(pop) ; 13
(push) ; 13
; [else-branch: 56 | First:($t@298@01) != 1]
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1)))
; [eval] (_57.discriminant == 0 ? old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int : old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int)
; [eval] _57.discriminant == 0
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | First:($t@298@01) == 0 | live]
; [else-branch: 57 | First:($t@298@01) != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 57 | First:($t@298@01) == 0]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
; [eval] old[l17](_58.val_ref).val_int < old[l17](_59.val_ref).val_int
; [eval] old[l17](_58.val_ref)
; [eval] old[l17](_59.val_ref)
(pop) ; 15
(push) ; 15
; [else-branch: 57 | First:($t@298@01) != 0]
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0)))
; [eval] old[l17](_58.val_ref).val_int > old[l17](_59.val_ref).val_int
; [eval] old[l17](_58.val_ref)
; [eval] old[l17](_59.val_ref)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
  (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
  (and
    (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
    (or
      (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
      (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0)))))
(assert (or
  (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
  (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
    (=>
      (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
      (and
        (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
        (or
          (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
          (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))))
    (or
      (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
      (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1)))))
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (=>
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
      (and
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (=>
          (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
          (and
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (or
              (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
              (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))))
        (or
          (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
          (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))))
    (or
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
      (not
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01)))))))))))))))
(assert (or
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01)))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@298@01 ret@296@01)
  (= $t@298@01 ($Snap.combine ($Snap.first $t@298@01) ($Snap.second $t@298@01)))
  (not (= ret@296@01 $Ref.null))
  (=
    ($Snap.second $t@298@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@298@01))
      ($Snap.second ($Snap.second $t@298@01))))
  (= ($Snap.first ($Snap.second $t@298@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)))
  (= ($Snap.second ($Snap.second $t@298@01)) $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 2)
  (i32%trigger ($Snap.second $t@288@01) val_ref@293@01)
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
          (=>
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (and
              (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
              (or
                (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
                (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))))
          (or
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first $t@297@01) val_ref@293@01)
  (=
    ($Snap.first $t@297@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@297@01))
      ($Snap.second ($Snap.first $t@297@01))))
  (not (= val_ref@293@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first $t@297@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@297@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@297@01)))))
  (= ($Snap.first ($Snap.second ($Snap.first $t@297@01))) $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01))))
  (= ($Snap.second ($Snap.second ($Snap.first $t@297@01))) $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
    2147483647)
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@298@01 ret@296@01)
  (= $t@298@01 ($Snap.combine ($Snap.first $t@298@01) ($Snap.second $t@298@01)))
  (not (= ret@296@01 $Ref.null))
  (=
    ($Snap.second $t@298@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@298@01))
      ($Snap.second ($Snap.second $t@298@01))))
  (= ($Snap.first ($Snap.second $t@298@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)))
  (= ($Snap.second ($Snap.second $t@298@01)) $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 2)
  (i32%trigger ($Snap.second $t@288@01) val_ref@293@01)
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
          (=>
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (and
              (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
              (or
                (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
                (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))))
          (or
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second $t@297@01) $t@252@01)
  (=
    ($Snap.second $t@297@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@297@01))
      ($Snap.second ($Snap.second $t@297@01))))
  (=
    ($Snap.second ($Snap.second $t@297@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@297@01)))
      ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))
  (= ($Snap.first ($Snap.second ($Snap.second $t@297@01))) $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01))))
  (= ($Snap.second ($Snap.second ($Snap.second $t@297@01))) $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
    2147483647)
  (i32%trigger ($Snap.first $t@297@01) val_ref@293@01)
  (=
    ($Snap.first $t@297@01)
    ($Snap.combine
      ($Snap.first ($Snap.first $t@297@01))
      ($Snap.second ($Snap.first $t@297@01))))
  (not (= val_ref@293@01 $Ref.null))
  (=
    ($Snap.second ($Snap.first $t@297@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@297@01)))
      ($Snap.second ($Snap.second ($Snap.first $t@297@01)))))
  (= ($Snap.first ($Snap.second ($Snap.first $t@297@01))) $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01))))
  (= ($Snap.second ($Snap.second ($Snap.first $t@297@01))) $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
    2147483647)
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_%trigger $t@298@01 ret@296@01)
  (= $t@298@01 ($Snap.combine ($Snap.first $t@298@01) ($Snap.second $t@298@01)))
  (not (= ret@296@01 $Ref.null))
  (=
    ($Snap.second $t@298@01)
    ($Snap.combine
      ($Snap.first ($Snap.second $t@298@01))
      ($Snap.second ($Snap.second $t@298@01))))
  (= ($Snap.first ($Snap.second $t@298@01)) $Snap.unit)
  (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)))
  (= ($Snap.second ($Snap.second $t@298@01)) $Snap.unit)
  (<= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 2)
  (i32%trigger ($Snap.second $t@288@01) val_ref@293@01)
  (=>
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (and
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
      (=>
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (and
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
          (=>
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (and
              (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
              (or
                (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))
                (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0))))
          (or
            (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))
            (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1))))
      (or
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
        (not
          (=
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))))))
  (or
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
    (not
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))))))
(assert (and
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@288@01))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))))))
    (ite
      (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 1)
      (=
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01))))
      (ite
        (= ($SortWrappers.$SnapToInt ($Snap.first $t@298@01)) 0)
        (<
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01))))
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l18
; [exec]
; label l19
; [eval] __t7 && (__t8 && __t8)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 58 | False | live]
; [else-branch: 58 | True | live]
(push) ; 6
; [then-branch: 58 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 58 | True]
(push) ; 7
; [then-branch: 59 | False | live]
; [else-branch: 59 | True | live]
(push) ; 8
; [then-branch: 59 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 59 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 60 | True]
; [exec]
; _old$l14$0 := _54.val_ref
(declare-const _old$l14$0@301@01 $Ref)
(assert (= _old$l14$0@301@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01))))
; [exec]
; inhale acc(DeadBorrowToken$(37), write) && acc(i32(_old$l14$0), write) --*
;   acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(old[l13](_55.val_ref)), write) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) ==
;   old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref),
;   old[l13](_56)) ==
;   old[lhs]((unfolding acc(i32(_old$l14$0), write) in _old$l14$0.val_int)) &&
;   (forall i: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref),
;     i) }
;     { old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref,
;     i)) }
;     0 <= i &&
;     (i <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) &&
;     !(i == old[l13](_56))) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref),
;     i) ==
;     old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref,
;     i)))))
(declare-const $t@302@01 $MWSF)
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_56)
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_56)
; [eval] old[l13](_55.val_ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(DeadBorrowToken$(37), write)
(declare-const $t@303@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; apply acc(DeadBorrowToken$(37), write) && acc(i32(_old$l14$0), write) --*
;   acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(old[l13](_55.val_ref)), write) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) ==
;   old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref),
;   old[l13](_56)) ==
;   old[lhs]((unfolding acc(i32(_old$l14$0), write) in _old$l14$0.val_int)) &&
;   (forall i: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref),
;     i) }
;     { old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref,
;     i)) }
;     0 <= i &&
;     (i <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) &&
;     !(i == old[l13](_56))) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref),
;     i) ==
;     old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref,
;     i)))))
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_56)
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_56)
; [eval] old[l13](_55.val_ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@252@01 _old$l14$0@301@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= val_ref@293@01 _old$l14$0@301@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (MWSF_apply $t@302@01 ($Snap.combine $t@303@01 ($Snap.first $t@297@01)))
  ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01)))))))
; [eval] old[l13](_55.val_ref)
(assert (=
  ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01)))))
    ($Snap.second ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))))))
(assert (=
  ($Snap.first ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01)))))
  $Snap.unit))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) == old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref))
; [eval] old[l13](_55.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  $Snap.unit) $t@251@01))
(pop) ; 6
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  $Snap.unit) $t@251@01))
; [eval] old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_55.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)))
(assert (=
  ($Snap.second ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))))
    ($Snap.second ($Snap.second ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))))
  $Snap.unit))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), old[l13](_56)) == old[lhs]((unfolding acc(i32(_old$l14$0), write) in _old$l14$0.val_int))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), old[l13](_56))
; [eval] old[l13](_55.val_ref)
; [eval] old[l13](_56)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 7
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  val_int@280@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  val_int@280@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (<
    val_int@280@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01)))
; [eval] old[lhs]((unfolding acc(i32(_old$l14$0), write) in _old$l14$0.val_int))
; [eval] (unfolding acc(i32(_old$l14$0), write) in _old$l14$0.val_int)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@252@01 _old$l14$0@301@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= val_ref@293@01 _old$l14$0@301@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.first $t@297@01) _old$l14$0@301@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= $t@276@01 _old$l14$0@301@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@215@01 _old$l14$0@301@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= ret@214@01 _old$l14$0@301@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= _old$l14$0@301@01 $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 6
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.first $t@297@01) _old$l14$0@301@01)
  (not (= _old$l14$0@301@01 $Ref.null))))
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 val_int@280@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@297@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))))
  $Snap.unit))
; [eval] (forall i: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), i) } { old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, i)) } 0 <= i && (i < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) && !(i == old[l13](_56))) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), i) == old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, i)))
(declare-const i@304@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= i && (i < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) && !(i == old[l13](_56))) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), i) == old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, i))
; [eval] 0 <= i && (i < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref)) && !(i == old[l13](_56)))
; [eval] 0 <= i
(push) ; 7
; [then-branch: 61 | !(0 <= i@304@01) | live]
; [else-branch: 61 | 0 <= i@304@01 | live]
(push) ; 8
; [then-branch: 61 | !(0 <= i@304@01)]
(assert (not (<= 0 i@304@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 61 | 0 <= i@304@01]
(assert (<= 0 i@304@01))
; [eval] i < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(old[l13](_55.val_ref))
; [eval] old[l13](_55.val_ref)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
; [then-branch: 62 | !(i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
; [else-branch: 62 | i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
(push) ; 10
; [then-branch: 62 | !(i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (<
    i@304@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 62 | i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (<
  i@304@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] !(i == old[l13](_56))
; [eval] i == old[l13](_56)
; [eval] old[l13](_56)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    i@304@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (not
    (<
      i@304@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 i@304@01)
  (and
    (<= 0 i@304@01)
    (or
      (<
        i@304@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (not
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))))
(assert (or (<= 0 i@304@01) (not (<= 0 i@304@01))))
(push) ; 7
; [then-branch: 63 | 0 <= i@304@01 && i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) && i@304@01 != val_int@280@01 | live]
; [else-branch: 63 | !(0 <= i@304@01 && i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) && i@304@01 != val_int@280@01) | live]
(push) ; 8
; [then-branch: 63 | 0 <= i@304@01 && i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) && i@304@01 != val_int@280@01]
(assert (and
  (<= 0 i@304@01)
  (and
    (<
      i@304@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (not (= i@304@01 val_int@280@01)))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), i) == old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, i))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(old[l13](_55.val_ref), i)
; [eval] old[l13](_55.val_ref)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 10
(assert (not (<= i@304@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= i@304@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (<= i@304@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)))
; [eval] old[l13](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, i))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_55.val_ref, i)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  i@304@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<
  i@304@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (<
    i@304@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      $Snap.unit) $t@251@01))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 63 | !(0 <= i@304@01 && i@304@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) && i@304@01 != val_int@280@01)]
(assert (not
  (and
    (<= 0 i@304@01)
    (and
      (<
        i@304@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (not (= i@304@01 val_int@280@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 i@304@01)
    (and
      (<
        i@304@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (not (= i@304@01 val_int@280@01))))
  (and
    (<= 0 i@304@01)
    (<
      i@304@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (not (= i@304@01 val_int@280@01))
    (<= i@304@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)
    (<
      i@304@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        $Snap.unit) $t@251@01))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 i@304@01)
      (and
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (not (= i@304@01 val_int@280@01)))))
  (and
    (<= 0 i@304@01)
    (and
      (<
        i@304@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (not (= i@304@01 val_int@280@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@304@01 Int)) (!
  (and
    (=>
      (<= 0 i@304@01)
      (and
        (<= 0 i@304@01)
        (or
          (<
            i@304@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not
            (<
              i@304@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    (or (<= 0 i@304@01) (not (<= 0 i@304@01)))
    (=>
      (and
        (<= 0 i@304@01)
        (and
          (<
            i@304@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not (= i@304@01 val_int@280@01))))
      (and
        (<= 0 i@304@01)
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (not (= i@304@01 val_int@280@01))
        (<= i@304@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)))
    (or
      (not
        (and
          (<= 0 i@304@01)
          (and
            (<
              i@304@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))
            (not (= i@304@01 val_int@280@01)))))
      (and
        (<= 0 i@304@01)
        (and
          (<
            i@304@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not (= i@304@01 val_int@280@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1066@903@1066@1603-aux|)))
(assert (forall ((i@304@01 Int)) (!
  (and
    (=>
      (<= 0 i@304@01)
      (and
        (<= 0 i@304@01)
        (or
          (<
            i@304@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not
            (<
              i@304@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    (or (<= 0 i@304@01) (not (<= 0 i@304@01)))
    (=>
      (and
        (<= 0 i@304@01)
        (and
          (<
            i@304@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not (= i@304@01 val_int@280@01))))
      (and
        (<= 0 i@304@01)
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (not (= i@304@01 val_int@280@01))
        (<= i@304@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
            $Snap.unit) $t@251@01))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)))
    (or
      (not
        (and
          (<= 0 i@304@01)
          (and
            (<
              i@304@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))
            (not (= i@304@01 val_int@280@01)))))
      (and
        (<= 0 i@304@01)
        (and
          (<
            i@304@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not (= i@304@01 val_int@280@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1066@903@1066@1603-aux|)))
(assert (forall ((i@304@01 Int)) (!
  (=>
    (and
      (<= 0 i@304@01)
      (and
        (<
          i@304@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (not (= i@304@01 val_int@280@01))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@250@01))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 i@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1066@903@1066@1603|)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@215@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@265@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@214@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@286@01 _2@109@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@109@01 _1@108@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@286@01 _1@108@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@176@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@155@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    $Perm.Write
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    $Perm.Write
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    $Perm.Write))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    $Perm.Write))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    $Perm.Write))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    $Perm.Write))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    $Perm.Write
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    $Perm.Write
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= val_ref@157@01 $t@251@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= val_ref@157@01 $t@252@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= val_ref@157@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= $t@251@01 val_ref@157@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= $t@251@01 $t@252@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= $t@251@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= $t@252@01 val_ref@157@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= $t@252@01 $t@251@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= $t@252@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) val_ref@157@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) $t@251@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@288@01)) $t@252@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    val_int@280@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))
    val_int@280@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    val_int@280@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    val_int@280@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 false))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= val_bool@175@01 val_bool@281@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= false val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= false val_bool@281@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= val_bool@281@01 val_bool@175@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= val_bool@281@01 false))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (and
      (not (= ret@155@01 _1@108@01))
      (not (= ret@155@01 _2@109@01))
      (not (= ret@155@01 ret@286@01)))
    (and
      (not (= _1@108@01 ret@155@01))
      (not (= _1@108@01 _2@109@01))
      (not (= _1@108@01 ret@286@01)))
    (and
      (not (= _2@109@01 ret@155@01))
      (not (= _2@109@01 _1@108@01))
      (not (= _2@109@01 ret@286@01)))
    (and
      (not (= ret@286@01 ret@155@01))
      (not (= ret@286@01 _1@108@01))
      (not (= ret@286@01 _2@109@01))))
  (and
    (and (not (= ret@214@01 ret@215@01)) (not (= ret@214@01 $t@276@01)))
    (and (not (= ret@215@01 ret@214@01)) (not (= ret@215@01 $t@276@01)))
    (and (not (= $t@276@01 ret@214@01)) (not (= $t@276@01 ret@215@01))))
  (and
    (and (not (= ret@176@01 ret@265@01)) (not (= ret@176@01 $t@278@01)))
    (and (not (= ret@265@01 ret@176@01)) (not (= ret@265@01 $t@278@01)))
    (and (not (= $t@278@01 ret@176@01)) (not (= $t@278@01 ret@265@01))))))
(assert (and
  (and (not (= ret@176@01 ret@265@01)) (not (= ret@176@01 $t@278@01)))
  (not (= ret@265@01 ret@176@01))
  (not (= $t@278@01 ret@176@01))))
; [exec]
; label loop3_group3_bb12
; [exec]
; __t9 := true
; [exec]
; _61 := builtin$havoc_int()
(declare-const ret@305@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _61 := m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_57)
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_57)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@298@01 ret@296@01))
(pop) ; 6
; Joined path conditions
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@298@01 ret@296@01))
(declare-const _61@307@01 Int)
(assert (=
  _61@307@01
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@298@01 ret@296@01)))
; [exec]
; _62 := builtin$havoc_ref()
(declare-const ret@308@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_62.val_ref, write)
(declare-const $t@309@01 $Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@308@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _62.val_ref := _57
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@308@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), read$())
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@310@01 $Snap)
(declare-const $t@311@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@311@01 $t@298@01))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@311@01 $t@310@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l20
; [exec]
; _63 := builtin$havoc_int()
(declare-const ret@312@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _63 := m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_62.val_ref)
; [eval] m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$(_62.val_ref)
(set-option :timeout 0)
(push) ; 6
; [eval] read$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@311@01 ret@296@01))
(pop) ; 6
; Joined path conditions
(assert (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@311@01 ret@296@01))
(declare-const _63@314@01 Int)
(assert (=
  _63@314@01
  (m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@311@01 ret@296@01)))
; [exec]
; __t28 := _63
; [eval] __t28 == 0
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _63@314@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _63@314@01 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | _63@314@01 == 0 | live]
; [else-branch: 64 | _63@314@01 != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 64 | _63@314@01 == 0]
(assert (= _63@314@01 0))
; [exec]
; label l22
; [exec]
; label loop3_group3_bb16
; [exec]
; __t10 := true
; [exec]
; label l24
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | True | live]
; [else-branch: 65 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 65 | True]
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), read$())
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const $t@315@01 $Snap)
(declare-const $t@316@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@316@01 $t@311@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@316@01 $t@315@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb13
; [exec]
; __t15 := true
; [exec]
; _64 := builtin$havoc_ref()
(declare-const ret@317@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_64.val_int, write)
(declare-const $t@318@01 Int)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@317@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _64.val_int := _50.val_int
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l32
; [exec]
; _60 := _64
; [exec]
; label l33
; [exec]
; label loop3_group3_bb20
; [exec]
; __t16 := true
; [exec]
; _5 := _60
; [exec]
; label l34
; [exec]
; _68 := builtin$havoc_int()
(declare-const ret@319@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _68 := _47
; [exec]
; label l35
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@321@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_0, write)
(declare-const $t@322@01 $Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@321@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_0.val_int, write)
(declare-const $t@323@01 Int)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@317@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@322@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_1, write)
(declare-const $t@324@01 $Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@321@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_1.val_bool, write)
(declare-const $t@325@01 Bool)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@324@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@324@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@278@01 $t@324@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@324@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _69.tuple_0.val_int := _3.val_int - _68
; [eval] _3.val_int - _68
(declare-const val_int@326@01 Int)
(assert (=
  val_int@326@01
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    _47@269@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@317@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; _69.tuple_1.val_bool := _3.val_int - _68 < 0 ||
;   _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68 < 0 || _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68 < 0
; [eval] _3.val_int - _68
(set-option :timeout 0)
(push) ; 8
; [then-branch: 66 | First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0 | live]
; [else-branch: 66 | !(First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0) | live]
(push) ; 9
; [then-branch: 66 | First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0]
(assert (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    _47@269@01)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 66 | !(First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0)]
(assert (not
  (<
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      _47@269@01)
    0)))
; [eval] _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      0))
  (<
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      _47@269@01)
    0)))
(declare-const val_bool@327@01 Bool)
(assert (=
  val_bool@327@01
  (or
    (<
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      0)
    (>
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      18446744073709551615))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@324@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@324@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@278@01 $t@324@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t29 := _69.tuple_1.val_bool
; [exec]
; assert !__t29
; [eval] !__t29
(set-option :timeout 0)
(push) ; 8
(assert (not (not val_bool@327@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not val_bool@327@01))
; [exec]
; label loop3_group3_bb21
; [exec]
; __t17 := true
; [exec]
; _3 := _69.tuple_0
; [exec]
; label l36
; [exec]
; _72 := builtin$havoc_int()
(declare-const ret@328@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _72 := _3.val_int
; [exec]
; label l37
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@330@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_71.val_bool, write)
(declare-const $t@331@01 Bool)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@330@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _71.val_bool := _72 > 0
; [eval] _72 > 0
(declare-const val_bool@332@01 Bool)
(assert (= val_bool@332@01 (> val_int@326@01 0)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@330@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t30 := _71.val_bool
; [eval] !__t30
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not val_bool@332@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | !(val_bool@332@01) | dead]
; [else-branch: 67 | val_bool@332@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 67 | val_bool@332@01]
(assert val_bool@332@01)
(pop) ; 8
; [eval] !!__t30
; [eval] !__t30
(push) ; 8
(set-option :timeout 10)
(assert (not (not val_bool@332@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not val_bool@332@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | val_bool@332@01 | live]
; [else-branch: 68 | !(val_bool@332@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 68 | val_bool@332@01]
(assert val_bool@332@01)
; [exec]
; label l38
; [exec]
; label loop3_group3_bb24
; [exec]
; __t18 := true
; [exec]
; _74 := builtin$havoc_ref()
(declare-const ret@333@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_74.val_ref, write)
(declare-const $t@334@01 $Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@333@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _74.val_ref := _6
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@333@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_74.val_ref), read$())
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@335@01 $Snap)
(declare-const $t@336@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@336@01 ($Snap.first $t@250@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@336@01 $t@335@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l40
; [exec]
; label l41
; [exec]
; _73 := builtin$havoc_ref()
(declare-const ret@337@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(bool(_73), write)
(declare-const $t@338@01 Bool)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@209@01 ret@337@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(bool(_73), write)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@337@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@337@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@337@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@337@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@337@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@337@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($SortWrappers.BoolTo$Snap $t@338@01) ret@337@01))
; [exec]
; inhale _73.val_bool ==
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
(declare-const $t@339@01 $Snap)
(assert (= $t@339@01 $Snap.unit))
; [eval] _73.val_bool == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@336@01
  $Snap.unit) ret@211@01))
(pop) ; 9
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@336@01
  $Snap.unit) ret@211@01))
(assert (=
  $t@338@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@336@01
    $Snap.unit) ret@211@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l42
; [eval] __t18 && __t18
(set-option :timeout 0)
(push) ; 9
; [then-branch: 69 | False | live]
; [else-branch: 69 | True | live]
(push) ; 10
; [then-branch: 69 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 69 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 70 | True]
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(old[l40](_74.val_ref)), read$())
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] old[l40](_74.val_ref)
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $t@340@01 $Snap)
(declare-const $t@341@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@341@01 $t@336@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@341@01 $t@340@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb26
; [exec]
; __t19 := true
; [exec]
; __t31 := _73.val_bool
; [eval] !__t31
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not $t@338@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | !($t@338@01) | dead]
; [else-branch: 71 | $t@338@01 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 71 | $t@338@01]
(assert $t@338@01)
(pop) ; 10
; [eval] !!__t31
; [eval] !__t31
(push) ; 10
(set-option :timeout 10)
(assert (not (not $t@338@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not $t@338@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | $t@338@01 | live]
; [else-branch: 72 | !($t@338@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 72 | $t@338@01]
(assert $t@338@01)
; [exec]
; label l43
; [exec]
; label loop3_group3_bb22
; [exec]
; __t20 := true
; [exec]
; _70 := builtin$havoc_ref()
(declare-const ret@342@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_70.val_bool, write)
(declare-const $t@343@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@337@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@342@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _70.val_bool := true
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@337@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l53
; [exec]
; label loop3_group3_bb25
; [exec]
; __t22 := true
; [exec]
; _7 := _70
; [exec]
; label l45
; [exec]
; _11 := builtin$havoc_ref()
(declare-const ret@344@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_11), write)
(declare-const $t@345@01 $Snap)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@260@01 ret@344@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group4_bb3
; [exec]
; __t2 := true
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@346@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_10.val_bool, write)
(declare-const $t@347@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@342@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@337@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@346@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _10.val_bool := _7.val_bool
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@342@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@337@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@330@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@324@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@346@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l46
; [exec]
; __t32 := _10.val_bool
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | True | live]
; [else-branch: 73 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 73 | True]
; [exec]
; label l48
; [exec]
; label loop3_group5_bb5
; [exec]
; __t3 := true
; [exec]
; __t33 := false
; [exec]
; label loop3_end_body
; [exec]
; fold acc(usize(_5), write)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@280@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ret@317@01))
; [exec]
; fold acc(usize(_3), write)
; [eval] 0 <= self.val_int
(push) ; 12
(assert (not (<= 0 val_int@326@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@326@01))
; [eval] self.val_int <= 18446744073709551615
(push) ; 12
(assert (not (<= val_int@326@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= val_int@326@01 18446744073709551615))
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@326@01)
  ($Snap.combine $Snap.unit $Snap.unit)) $t@322@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@317@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [exec]
; fold acc(bool(_7), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap true) ret@342@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@209@01 ret@342@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [exec]
; assert !((unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) <
;   0 ||
;   (unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) >
;   18446744073709551615) &&
;   ((unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;   ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==
;   old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) &&
;   ((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((forall k1: Int, k2: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2) }
;     0 <= k1 &&
;     (k1 < k2 &&
;     k2 <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1) <=
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2)) &&
;   ((forall k: Int ::
;     { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k)) }
;     0 <= k &&
;     k <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k) ==
;     old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k))) &&
;   ((unfolding acc(i32(_2.val_ref), write) in
;     (unfolding acc(usize(_5), write) in
;       (forall k: Int ::
;         { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         k) }
;         0 <= k && k < _5.val_int ==>
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         k) <
;         _2.val_ref.val_int))) &&
;   ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;   (unfolding acc(i32(_2.val_ref), write) in
;     (unfolding acc(usize(_3), write) in
;       (unfolding acc(usize(_5), write) in
;         (let _LET_0 ==
;           (_5.val_int + _3.val_int) in
;           (forall k: Int ::
;             { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;             k) }
;             !(_LET_0 < 0 || _LET_0 > 18446744073709551615) &&
;             (_LET_0 <= k &&
;             k <
;             m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;             _2.val_ref.val_int <
;             m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;             k))))))) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;   0 <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) <
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) ==
;   (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))))))))))))
; [eval] !((unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0 || (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0 || (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 12
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
; [then-branch: 74 | val_int@280@01 + val_int@326@01 < 0 | live]
; [else-branch: 74 | !(val_int@280@01 + val_int@326@01 < 0) | live]
(push) ; 13
; [then-branch: 74 | val_int@280@01 + val_int@326@01 < 0]
(assert (< (+ val_int@280@01 val_int@326@01) 0))
(pop) ; 13
(push) ; 13
; [else-branch: 74 | !(val_int@280@01 + val_int@326@01 < 0)]
(assert (not (< (+ val_int@280@01 val_int@326@01) 0)))
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 14
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (+ val_int@280@01 val_int@326@01) 0))
  (< (+ val_int@280@01 val_int@326@01) 0)))
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (or
    (< (+ val_int@280@01 val_int@326@01) 0)
    (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not
  (or
    (< (+ val_int@280@01 val_int@326@01) 0)
    (> (+ val_int@280@01 val_int@326@01) 18446744073709551615))))
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 12
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 12
; Joined path conditions
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
(assert (not (<=
  (+ val_int@280@01 val_int@326@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ val_int@280@01 val_int@326@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] (unfolding acc(usize(_3), write) in _3.val_int) > 0
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
(assert (not (> val_int@326@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (> val_int@326@01 0))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@341@01
  $Snap.unit) ret@211@01))
(pop) ; 12
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@341@01
  $Snap.unit) ret@211@01))
(set-option :timeout 0)
(push) ; 12
(assert (not (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@341@01
  $Snap.unit) ret@211@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@341@01
  $Snap.unit) ret@211@01))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 12
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
; [eval] (forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2))
(declare-const k1@348@01 Int)
(declare-const k2@349@01 Int)
(push) ; 12
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] 0 <= k1
(push) ; 13
; [then-branch: 75 | !(0 <= k1@348@01) | live]
; [else-branch: 75 | 0 <= k1@348@01 | live]
(push) ; 14
; [then-branch: 75 | !(0 <= k1@348@01)]
(assert (not (<= 0 k1@348@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 75 | 0 <= k1@348@01]
(assert (<= 0 k1@348@01))
; [eval] k1 < k2
(push) ; 15
; [then-branch: 76 | !(k1@348@01 < k2@349@01) | live]
; [else-branch: 76 | k1@348@01 < k2@349@01 | live]
(push) ; 16
; [then-branch: 76 | !(k1@348@01 < k2@349@01)]
(assert (not (< k1@348@01 k2@349@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 76 | k1@348@01 < k2@349@01]
(assert (< k1@348@01 k2@349@01))
; [eval] k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< k1@348@01 k2@349@01) (not (< k1@348@01 k2@349@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 k1@348@01)
  (and
    (<= 0 k1@348@01)
    (or (< k1@348@01 k2@349@01) (not (< k1@348@01 k2@349@01))))))
(assert (or (<= 0 k1@348@01) (not (<= 0 k1@348@01))))
(set-option :timeout 0)
(push) ; 13
; [then-branch: 77 | 0 <= k1@348@01 && k1@348@01 < k2@349@01 && k2@349@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 77 | !(0 <= k1@348@01 && k1@348@01 < k2@349@01 && k2@349@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 14
; [then-branch: 77 | 0 <= k1@348@01 && k1@348@01 < k2@349@01 && k2@349@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (<= 0 k1@348@01)
  (and
    (< k1@348@01 k2@349@01)
    (<
      k2@349@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  k1@348@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<
  k1@348@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 16
(assert (not (<= k1@348@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= k1@348@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (<
    k1@348@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (<= k1@348@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 16
(assert (not (<= 0 k2@349@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k2@349@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 16
(assert (not (<= k2@349@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= k2@349@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (<= 0 k2@349@01)
  (<= k2@349@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 77 | !(0 <= k1@348@01 && k1@348@01 < k2@349@01 && k2@349@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k1@348@01)
    (and
      (< k1@348@01 k2@349@01)
      (<
        k2@349@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= 0 k1@348@01)
    (and
      (< k1@348@01 k2@349@01)
      (<
        k2@349@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k1@348@01)
    (< k1@348@01 k2@349@01)
    (<
      k2@349@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<
      k1@348@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k1@348@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)
    (<= 0 k2@349@01)
    (<= k2@349@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k1@348@01)
      (and
        (< k1@348@01 k2@349@01)
        (<
          k2@349@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  (and
    (<= 0 k1@348@01)
    (and
      (< k1@348@01 k2@349@01)
      (<
        k2@349@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k1@348@01 Int) (k2@349@01 Int)) (!
  (and
    (=>
      (<= 0 k1@348@01)
      (and
        (<= 0 k1@348@01)
        (or (< k1@348@01 k2@349@01) (not (< k1@348@01 k2@349@01)))))
    (or (<= 0 k1@348@01) (not (<= 0 k1@348@01)))
    (=>
      (and
        (<= 0 k1@348@01)
        (and
          (< k1@348@01 k2@349@01)
          (<
            k2@349@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k1@348@01)
        (< k1@348@01 k2@349@01)
        (<
          k2@349@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<
          k1@348@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k1@348@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)
        (<= 0 k2@349@01)
        (<= k2@349@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01)))
    (or
      (not
        (and
          (<= 0 k1@348@01)
          (and
            (< k1@348@01 k2@349@01)
            (<
              k2@349@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))))
      (and
        (<= 0 k1@348@01)
        (and
          (< k1@348@01 k2@349@01)
          (<
            k2@349@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999-aux|)))
(assert (forall ((k1@348@01 Int) (k2@349@01 Int)) (!
  (and
    (=>
      (and (<= 0 k1@348@01) (< k1@348@01 k2@349@01))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (=>
      (and
        (<= 0 k1@348@01)
        (and
          (< k1@348@01 k2@349@01)
          (<
            k2@349@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999_precondition|)))
(push) ; 12
(assert (not (forall ((k1@348@01 Int) (k2@349@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (and (<= 0 k1@348@01) (< k1@348@01 k2@349@01))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (=>
          (and
            (<= 0 k1@348@01)
            (and
              (< k1@348@01 k2@349@01)
              (<
                k2@349@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01))))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))))
      (and
        (<= 0 k1@348@01)
        (and
          (< k1@348@01 k2@349@01)
          (<
            k2@349@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01)))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k1@348@01 Int) (k2@349@01 Int)) (!
  (=>
    (and
      (<= 0 k1@348@01)
      (and
        (< k1@348@01 k2@349@01)
        (<
          k2@349@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@348@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999|)))
; [eval] (forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
(declare-const k@350@01 Int)
(push) ; 12
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] 0 <= k
(push) ; 13
; [then-branch: 78 | !(0 <= k@350@01) | live]
; [else-branch: 78 | 0 <= k@350@01 | live]
(push) ; 14
; [then-branch: 78 | !(0 <= k@350@01)]
(assert (not (<= 0 k@350@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 78 | 0 <= k@350@01]
(assert (<= 0 k@350@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@350@01) (not (<= 0 k@350@01))))
(set-option :timeout 0)
(push) ; 13
; [then-branch: 79 | 0 <= k@350@01 && k@350@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 79 | !(0 <= k@350@01 && k@350@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 14
; [then-branch: 79 | 0 <= k@350@01 && k@350@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (<= 0 k@350@01)
  (<
    k@350@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 16
(assert (not (<= k@350@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= k@350@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (<= k@350@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  k@350@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@350@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))
(pop) ; 15
; Joined path conditions
(assert (and
  (<
    k@350@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 79 | !(0 <= k@350@01 && k@350@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k@350@01)
    (<
      k@350@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@350@01)
    (<
      k@350@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))
  (and
    (<= 0 k@350@01)
    (<
      k@350@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k@350@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)
    (<
      k@350@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@350@01)
      (<
        k@350@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k@350@01)
    (<
      k@350@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@350@01 Int)) (!
  (and
    (or (<= 0 k@350@01) (not (<= 0 k@350@01)))
    (=>
      (and
        (<= 0 k@350@01)
        (<
          k@350@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (<= 0 k@350@01)
        (<
          k@350@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@350@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)
        (<
          k@350@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01)))
    (or
      (not
        (and
          (<= 0 k@350@01)
          (<
            k@350@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k@350@01)
        (<
          k@350@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656-aux|)))
(assert (forall ((k@350@01 Int)) (!
  (and
    (=>
      (<= 0 k@350@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (=>
      (and
        (<= 0 k@350@01)
        (<
          k@350@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656_precondition|)))
(push) ; 12
(assert (not (forall ((k@350@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (<= 0 k@350@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (=>
          (and
            (<= 0 k@350@01)
            (<
              k@350@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))))
      (and
        (<= 0 k@350@01)
        (<
          k@350@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@350@01 Int)) (!
  (=>
    (and
      (<= 0 k@350@01)
      (<
        k@350@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01)))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@350@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656|)))
; [eval] (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_5), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)))
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (unfolding acc(usize(_5), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int))
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@252@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)
(declare-const k@351@01 Int)
(set-option :timeout 0)
(push) ; 14
; [eval] 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] 0 <= k && k < _5.val_int
; [eval] 0 <= k
(push) ; 15
; [then-branch: 80 | !(0 <= k@351@01) | live]
; [else-branch: 80 | 0 <= k@351@01 | live]
(push) ; 16
; [then-branch: 80 | !(0 <= k@351@01)]
(assert (not (<= 0 k@351@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 80 | 0 <= k@351@01]
(assert (<= 0 k@351@01))
; [eval] k < _5.val_int
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@351@01) (not (<= 0 k@351@01))))
(push) ; 15
; [then-branch: 81 | 0 <= k@351@01 && k@351@01 < val_int@280@01 | live]
; [else-branch: 81 | !(0 <= k@351@01 && k@351@01 < val_int@280@01) | live]
(push) ; 16
; [then-branch: 81 | 0 <= k@351@01 && k@351@01 < val_int@280@01]
(assert (and (<= 0 k@351@01) (< k@351@01 val_int@280@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(set-option :timeout 0)
(push) ; 18
(assert (not (<
  k@351@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@351@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 18
(assert (not (<= k@351@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= k@351@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (<
    k@351@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (<= k@351@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 81 | !(0 <= k@351@01 && k@351@01 < val_int@280@01)]
(assert (not (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
  (and
    (<= 0 k@351@01)
    (< k@351@01 val_int@280@01)
    (<
      k@351@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k@351@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))))
; Joined path conditions
(assert (or
  (not (and (<= 0 k@351@01) (< k@351@01 val_int@280@01)))
  (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@351@01 Int)) (!
  (and
    (or (<= 0 k@351@01) (not (<= 0 k@351@01)))
    (=>
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
      (and
        (<= 0 k@351@01)
        (< k@351@01 val_int@280@01)
        (<
          k@351@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@351@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01)))
    (or
      (not (and (<= 0 k@351@01) (< k@351@01 val_int@280@01)))
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012-aux|)))
(pop) ; 13
; Joined path conditions
(assert (forall ((k@351@01 Int)) (!
  (and
    (or (<= 0 k@351@01) (not (<= 0 k@351@01)))
    (=>
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
      (and
        (<= 0 k@351@01)
        (< k@351@01 val_int@280@01)
        (<
          k@351@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@351@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01)))
    (or
      (not (and (<= 0 k@351@01) (< k@351@01 val_int@280@01)))
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012-aux|)))
(pop) ; 12
; Joined path conditions
(assert (forall ((k@351@01 Int)) (!
  (and
    (or (<= 0 k@351@01) (not (<= 0 k@351@01)))
    (=>
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
      (and
        (<= 0 k@351@01)
        (< k@351@01 val_int@280@01)
        (<
          k@351@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@351@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01)))
    (or
      (not (and (<= 0 k@351@01) (< k@351@01 val_int@280@01)))
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012-aux|)))
(assert (forall ((k@351@01 Int)) (!
  (=>
    (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012_precondition|)))
(push) ; 12
(assert (not (forall ((k@351@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
      (and (<= 0 k@351@01) (< k@351@01 val_int@280@01)))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@351@01 Int)) (!
  (=>
    (and (<= 0 k@351@01) (< k@351@01 val_int@280@01))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012|)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 82 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@341@01, _), ret@211@01) | live]
; [else-branch: 82 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@341@01, _), ret@211@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 82 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@341@01, _), ret@211@01)]
; [eval] (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (unfolding acc(usize(_3), write) in (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))))
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@252@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@322@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))
(set-option :timeout 0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@322@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@252@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@317@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
; [eval] _5.val_int + _3.val_int
(declare-const letvar@352@01 Int)
(assert (= (as letvar@352@01  Int) (+ val_int@280@01 val_int@326@01)))
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
(declare-const k@353@01 Int)
(set-option :timeout 0)
(push) ; 17
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615)
; [eval] _LET_0 < 0 || _LET_0 > 18446744073709551615
; [eval] _LET_0 < 0
(push) ; 18
; [then-branch: 83 | val_int@280@01 + val_int@326@01 < 0 | live]
; [else-branch: 83 | !(val_int@280@01 + val_int@326@01 < 0) | live]
(push) ; 19
; [then-branch: 83 | val_int@280@01 + val_int@326@01 < 0]
(assert (< (+ val_int@280@01 val_int@326@01) 0))
(pop) ; 19
(push) ; 19
; [else-branch: 83 | !(val_int@280@01 + val_int@326@01 < 0)]
(assert (not (< (+ val_int@280@01 val_int@326@01) 0)))
; [eval] _LET_0 > 18446744073709551615
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 84 | val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615 | live]
; [else-branch: 84 | !(val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615) | live]
(push) ; 19
; [then-branch: 84 | val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615]
(assert (or
  (< (+ val_int@280@01 val_int@326@01) 0)
  (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
(pop) ; 19
(push) ; 19
; [else-branch: 84 | !(val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615)]
; [eval] _LET_0 <= k
(push) ; 20
; [then-branch: 85 | !(val_int@280@01 + val_int@326@01 <= k@353@01) | live]
; [else-branch: 85 | val_int@280@01 + val_int@326@01 <= k@353@01 | live]
(push) ; 21
; [then-branch: 85 | !(val_int@280@01 + val_int@326@01 <= k@353@01)]
(assert (not (<= (+ val_int@280@01 val_int@326@01) k@353@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 85 | val_int@280@01 + val_int@326@01 <= k@353@01]
(assert (<= (+ val_int@280@01 val_int@326@01) k@353@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 22
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
; [eval] read$()
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (+ val_int@280@01 val_int@326@01) k@353@01)
  (not (<= (+ val_int@280@01 val_int@326@01) k@353@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (or
    (<= (+ val_int@280@01 val_int@326@01) k@353@01)
    (not (<= (+ val_int@280@01 val_int@326@01) k@353@01)))))
(assert (or
  (not
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (or
    (< (+ val_int@280@01 val_int@326@01) 0)
    (> (+ val_int@280@01 val_int@326@01) 18446744073709551615))))
(set-option :timeout 0)
(push) ; 18
; [then-branch: 86 | !(val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615) && val_int@280@01 + val_int@326@01 <= k@353@01 && k@353@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 86 | !(!(val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615) && val_int@280@01 + val_int@326@01 <= k@353@01 && k@353@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 19
; [then-branch: 86 | !(val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615) && val_int@280@01 + val_int@326@01 <= k@353@01 && k@353@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (not
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (and
    (<= (+ val_int@280@01 val_int@326@01) k@353@01)
    (<
      k@353@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
; [eval] _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 20
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
; [eval] read$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 21
(assert (not (<= 0 k@353@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k@353@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 21
; [eval] read$()
(push) ; 22
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 21
(assert (not (<= k@353@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= k@353@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (<= 0 k@353@01)
  (<= k@353@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 86 | !(!(val_int@280@01 + val_int@326@01 < 0 || val_int@280@01 + val_int@326@01 > 18446744073709551615) && val_int@280@01 + val_int@326@01 <= k@353@01 && k@353@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (and
      (<= (+ val_int@280@01 val_int@326@01) k@353@01)
      (<
        k@353@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (and
      (<= (+ val_int@280@01 val_int@326@01) k@353@01)
      (<
        k@353@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (<= (+ val_int@280@01 val_int@326@01) k@353@01)
    (<
      k@353@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= 0 k@353@01)
    (<= k@353@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (or
          (< (+ val_int@280@01 val_int@326@01) 0)
          (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
      (and
        (<= (+ val_int@280@01 val_int@326@01) k@353@01)
        (<
          k@353@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  (and
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (and
      (<= (+ val_int@280@01 val_int@326@01) k@353@01)
      (<
        k@353@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 17
; Nested auxiliary terms: globals (aux)
(assert (or
  (not
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (or
    (< (+ val_int@280@01 val_int@326@01) 0)
    (> (+ val_int@280@01 val_int@326@01) 18446744073709551615))))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@353@01 Int)) (!
  (and
    (=>
      (not
        (or
          (< (+ val_int@280@01 val_int@326@01) 0)
          (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
      (or
        (<= (+ val_int@280@01 val_int@326@01) k@353@01)
        (not (<= (+ val_int@280@01 val_int@326@01) k@353@01))))
    (=>
      (and
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (and
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (<= (+ val_int@280@01 val_int@326@01) k@353@01)
        (<
          k@353@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= 0 k@353@01)
        (<= k@353@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
    (or
      (not
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))))
      (and
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (and
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|)))
(pop) ; 16
; Joined path conditions
(assert (and
  (= (as letvar@352@01  Int) (+ val_int@280@01 val_int@326@01))
  (or
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (forall ((k@353@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (or
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (not (<= (+ val_int@280@01 val_int@326@01) k@353@01))))
      (=>
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (<= 0 k@353@01)
          (<= k@353@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
      (or
        (not
          (and
            (not
              (or
                (< (+ val_int@280@01 val_int@326@01) 0)
                (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
            (and
              (<= (+ val_int@280@01 val_int@326@01) k@353@01)
              (<
                k@353@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01)))))
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|))))
(pop) ; 15
; Joined path conditions
(assert (and
  (= (as letvar@352@01  Int) (+ val_int@280@01 val_int@326@01))
  (or
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (forall ((k@353@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (or
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (not (<= (+ val_int@280@01 val_int@326@01) k@353@01))))
      (=>
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (<= 0 k@353@01)
          (<= k@353@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
      (or
        (not
          (and
            (not
              (or
                (< (+ val_int@280@01 val_int@326@01) 0)
                (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
            (and
              (<= (+ val_int@280@01 val_int@326@01) k@353@01)
              (<
                k@353@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01)))))
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|))))
(pop) ; 14
; Joined path conditions
(assert (and
  (= (as letvar@352@01  Int) (+ val_int@280@01 val_int@326@01))
  (or
    (not
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (or
      (< (+ val_int@280@01 val_int@326@01) 0)
      (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
  (forall ((k@353@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (or
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (not (<= (+ val_int@280@01 val_int@326@01) k@353@01))))
      (=>
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (<= 0 k@353@01)
          (<= k@353@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
      (or
        (not
          (and
            (not
              (or
                (< (+ val_int@280@01 val_int@326@01) 0)
                (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
            (and
              (<= (+ val_int@280@01 val_int@326@01) k@353@01)
              (<
                k@353@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01)))))
        (and
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (and
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01)
  (and
    (= (as letvar@352@01  Int) (+ val_int@280@01 val_int@326@01))
    (or
      (not
        (or
          (< (+ val_int@280@01 val_int@326@01) 0)
          (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
      (or
        (< (+ val_int@280@01 val_int@326@01) 0)
        (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
    (forall ((k@353@01 Int)) (!
      (and
        (=>
          (not
            (or
              (< (+ val_int@280@01 val_int@326@01) 0)
              (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
          (or
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (not (<= (+ val_int@280@01 val_int@326@01) k@353@01))))
        (=>
          (and
            (not
              (or
                (< (+ val_int@280@01 val_int@326@01) 0)
                (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
            (and
              (<= (+ val_int@280@01 val_int@326@01) k@353@01)
              (<
                k@353@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01))))
          (and
            (not
              (or
                (< (+ val_int@280@01 val_int@326@01) 0)
                (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
            (<= (+ val_int@280@01 val_int@326@01) k@353@01)
            (<
              k@353@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))
            (<= 0 k@353@01)
            (<= k@353@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
        (or
          (not
            (and
              (not
                (or
                  (< (+ val_int@280@01 val_int@326@01) 0)
                  (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
              (and
                (<= (+ val_int@280@01 val_int@326@01) k@353@01)
                (<
                  k@353@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                      $t@303@01
                      ($Snap.first $t@297@01))))
                    $Snap.unit) $t@251@01)))))
          (and
            (not
              (or
                (< (+ val_int@280@01 val_int@326@01) 0)
                (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
            (and
              (<= (+ val_int@280@01 val_int@326@01) k@353@01)
              (<
                k@353@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|)))))
(push) ; 12
(assert (not (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01)
  (forall ((k@353@01 Int)) (!
    (=>
      (and
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (and
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882|)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01)
  (forall ((k@353@01 Int)) (!
    (=>
      (and
        (not
          (or
            (< (+ val_int@280@01 val_int@326@01) 0)
            (> (+ val_int@280@01 val_int@326@01) 18446744073709551615)))
        (and
          (<= (+ val_int@280@01 val_int@326@01) k@353@01)
          (<
            k@353@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882|))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@341@01
  $Snap.unit) ret@211@01))
(pop) ; 12
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@341@01
  $Snap.unit) ret@211@01))
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@341@01, _), ret@211@01) | dead]
; [else-branch: 87 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@341@01, _), ret@211@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 87 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@341@01, _), ret@211@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@341@01
    $Snap.unit) ret@211@01)))
; [exec]
; assert _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
; [eval] _preserve$0 == _1.val_ref
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] _preserve$1 == _2.val_ref
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write) &&
;   (acc(usize(_5), write) &&
;   (acc(usize(_3), write) &&
;   (acc(bool(_7), write) &&
;   (acc(_1.val_ref, read$()) &&
;   (acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) &&
;   (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(assert (<=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (not (= _1@108@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (not (= _2@109@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 11
; [eval] !__t32
; [then-branch: 88 | False | dead]
; [else-branch: 88 | True | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 88 | True]
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [eval] !(__t18 && __t18)
; [eval] __t18 && __t18
(push) ; 9
; [then-branch: 89 | False | live]
; [else-branch: 89 | True | live]
(push) ; 10
; [then-branch: 89 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 89 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [then-branch: 90 | False | dead]
; [else-branch: 90 | True | live]
(push) ; 9
; [else-branch: 90 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !__t9
; [then-branch: 91 | False | dead]
; [else-branch: 91 | True | live]
(push) ; 7
; [else-branch: 91 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 64 | _63@314@01 != 0]
(assert (not (= _63@314@01 0)))
(pop) ; 6
; [eval] !(__t28 == 0)
; [eval] __t28 == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (= _63@314@01 0)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _63@314@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | _63@314@01 != 0 | live]
; [else-branch: 92 | _63@314@01 == 0 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 92 | _63@314@01 != 0]
(assert (not (= _63@314@01 0)))
; [eval] __t28 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _63@314@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _63@314@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | _63@314@01 == 2 | live]
; [else-branch: 93 | _63@314@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 93 | _63@314@01 == 2]
(assert (= _63@314@01 2))
; [exec]
; label l23
; [exec]
; label loop3_group3_bb17
; [exec]
; __t11 := true
; [exec]
; label l25
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | True | live]
; [else-branch: 94 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 94 | True]
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), read$())
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@354@01 $Snap)
(declare-const $t@355@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@355@01 $t@311@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@355@01 $t@354@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb14
; [exec]
; __t14 := true
; [exec]
; _65 := builtin$havoc_ref()
(declare-const ret@356@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_65.val_int, write)
(declare-const $t@357@01 Int)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@356@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _65.val_int := _5.val_int
(declare-const val_int@358@01 Int)
(assert (=
  val_int@358@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l30
; [exec]
; _60 := _65
; [exec]
; label l31
; [exec]
; label loop3_group3_bb20
; [exec]
; __t16 := true
; [exec]
; _5 := _60
; [exec]
; label l34
; [exec]
; _68 := builtin$havoc_int()
(declare-const ret@359@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@360@01 $Snap)
(assert (= $t@360@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _68 := _47
; [exec]
; label l35
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@361@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_0, write)
(declare-const $t@362@01 $Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@361@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@361@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_0.val_int, write)
(declare-const $t@363@01 Int)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@356@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@362@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_1, write)
(declare-const $t@364@01 $Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@361@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_1.val_bool, write)
(declare-const $t@365@01 Bool)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@364@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@364@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@278@01 $t@364@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@364@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _69.tuple_0.val_int := _3.val_int - _68
; [eval] _3.val_int - _68
(declare-const val_int@366@01 Int)
(assert (=
  val_int@366@01
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    _47@269@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@356@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; _69.tuple_1.val_bool := _3.val_int - _68 < 0 ||
;   _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68 < 0 || _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68 < 0
; [eval] _3.val_int - _68
(set-option :timeout 0)
(push) ; 9
; [then-branch: 95 | First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0 | live]
; [else-branch: 95 | !(First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0) | live]
(push) ; 10
; [then-branch: 95 | First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0]
(assert (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    _47@269@01)
  0))
(pop) ; 10
(push) ; 10
; [else-branch: 95 | !(First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0)]
(assert (not
  (<
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      _47@269@01)
    0)))
; [eval] _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      0))
  (<
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      _47@269@01)
    0)))
(declare-const val_bool@367@01 Bool)
(assert (=
  val_bool@367@01
  (or
    (<
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      0)
    (>
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      18446744073709551615))))
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@364@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@364@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@278@01 $t@364@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t29 := _69.tuple_1.val_bool
; [exec]
; assert !__t29
; [eval] !__t29
(set-option :timeout 0)
(push) ; 9
(assert (not (not val_bool@367@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not val_bool@367@01))
; [exec]
; label loop3_group3_bb21
; [exec]
; __t17 := true
; [exec]
; _3 := _69.tuple_0
; [exec]
; label l36
; [exec]
; _72 := builtin$havoc_int()
(declare-const ret@368@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _72 := _3.val_int
; [exec]
; label l37
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@370@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_71.val_bool, write)
(declare-const $t@371@01 Bool)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@370@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _71.val_bool := _72 > 0
; [eval] _72 > 0
(declare-const val_bool@372@01 Bool)
(assert (= val_bool@372@01 (> val_int@366@01 0)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@370@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t30 := _71.val_bool
; [eval] !__t30
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not val_bool@372@01))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | !(val_bool@372@01) | dead]
; [else-branch: 96 | val_bool@372@01 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 96 | val_bool@372@01]
(assert val_bool@372@01)
(pop) ; 9
; [eval] !!__t30
; [eval] !__t30
(push) ; 9
(set-option :timeout 10)
(assert (not (not val_bool@372@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not val_bool@372@01))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | val_bool@372@01 | live]
; [else-branch: 97 | !(val_bool@372@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 97 | val_bool@372@01]
(assert val_bool@372@01)
; [exec]
; label l38
; [exec]
; label loop3_group3_bb24
; [exec]
; __t18 := true
; [exec]
; _74 := builtin$havoc_ref()
(declare-const ret@373@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_74.val_ref, write)
(declare-const $t@374@01 $Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@373@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _74.val_ref := _6
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@373@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_74.val_ref), read$())
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $t@375@01 $Snap)
(declare-const $t@376@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (= $t@376@01 ($Snap.first $t@250@01)))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@376@01 $t@375@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l40
; [exec]
; label l41
; [exec]
; _73 := builtin$havoc_ref()
(declare-const ret@377@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(bool(_73), write)
(declare-const $t@378@01 Bool)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@209@01 ret@377@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(bool(_73), write)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@370@01 ret@377@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@377@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@377@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@377@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@377@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@377@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($SortWrappers.BoolTo$Snap $t@378@01) ret@377@01))
; [exec]
; inhale _73.val_bool ==
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; [eval] _73.val_bool == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
(set-option :timeout 0)
(push) ; 10
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@376@01
  $Snap.unit) ret@211@01))
(pop) ; 10
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@376@01
  $Snap.unit) ret@211@01))
(assert (=
  $t@378@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@376@01
    $Snap.unit) ret@211@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l42
; [eval] __t18 && __t18
(set-option :timeout 0)
(push) ; 10
; [then-branch: 98 | False | live]
; [else-branch: 98 | True | live]
(push) ; 11
; [then-branch: 98 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 98 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | True | live]
; [else-branch: 99 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 99 | True]
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(old[l40](_74.val_ref)), read$())
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] old[l40](_74.val_ref)
(push) ; 11
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@380@01 $Snap)
(declare-const $t@381@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@381@01 $t@376@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@381@01 $t@380@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb26
; [exec]
; __t19 := true
; [exec]
; __t31 := _73.val_bool
; [eval] !__t31
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $t@378@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | !($t@378@01) | dead]
; [else-branch: 100 | $t@378@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 100 | $t@378@01]
(assert $t@378@01)
(pop) ; 11
; [eval] !!__t31
; [eval] !__t31
(push) ; 11
(set-option :timeout 10)
(assert (not (not $t@378@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not $t@378@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | $t@378@01 | live]
; [else-branch: 101 | !($t@378@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 101 | $t@378@01]
(assert $t@378@01)
; [exec]
; label l43
; [exec]
; label loop3_group3_bb22
; [exec]
; __t20 := true
; [exec]
; _70 := builtin$havoc_ref()
(declare-const ret@382@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_70.val_bool, write)
(declare-const $t@383@01 Bool)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@377@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@370@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@382@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _70.val_bool := true
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@377@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@370@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l53
; [exec]
; label loop3_group3_bb25
; [exec]
; __t22 := true
; [exec]
; _7 := _70
; [exec]
; label l45
; [exec]
; _11 := builtin$havoc_ref()
(declare-const ret@384@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_11), write)
(declare-const $t@385@01 $Snap)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@260@01 ret@384@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group4_bb3
; [exec]
; __t2 := true
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@386@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_10.val_bool, write)
(declare-const $t@387@01 Bool)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@382@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@377@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@370@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@386@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _10.val_bool := _7.val_bool
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@382@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@377@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@370@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@364@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@386@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l46
; [exec]
; __t32 := _10.val_bool
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | True | live]
; [else-branch: 102 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 102 | True]
; [exec]
; label l48
; [exec]
; label loop3_group5_bb5
; [exec]
; __t3 := true
; [exec]
; __t33 := false
; [exec]
; label loop3_end_body
; [exec]
; fold acc(usize(_5), write)
; [eval] 0 <= self.val_int
(push) ; 13
(assert (not (<= 0 val_int@358@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@358@01))
; [eval] self.val_int <= 18446744073709551615
(push) ; 13
(assert (not (<= val_int@358@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<= val_int@358@01 18446744073709551615))
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@358@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ret@356@01))
; [exec]
; fold acc(usize(_3), write)
; [eval] 0 <= self.val_int
(push) ; 13
(assert (not (<= 0 val_int@366@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 val_int@366@01))
; [eval] self.val_int <= 18446744073709551615
(push) ; 13
(assert (not (<= val_int@366@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<= val_int@366@01 18446744073709551615))
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@366@01)
  ($Snap.combine $Snap.unit $Snap.unit)) $t@362@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@356@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(bool(_7), write)
(assert (bool%trigger ($SortWrappers.BoolTo$Snap true) ret@382@01))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ret@209@01 ret@382@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert !((unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) <
;   0 ||
;   (unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) >
;   18446744073709551615) &&
;   ((unfolding acc(usize(_5), write) in _5.val_int) +
;   (unfolding acc(usize(_3), write) in _3.val_int) <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;   ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==
;   old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) &&
;   ((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((forall k1: Int, k2: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2) }
;     0 <= k1 &&
;     (k1 < k2 &&
;     k2 <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k1) <=
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k2)) &&
;   ((forall k: Int ::
;     { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k)) }
;     0 <= k &&
;     k <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k) ==
;     old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k))) &&
;   ((unfolding acc(i32(_2.val_ref), write) in
;     (unfolding acc(usize(_5), write) in
;       (forall k: Int ::
;         { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         k) }
;         0 <= k && k < _5.val_int ==>
;         m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;         k) <
;         _2.val_ref.val_int))) &&
;   ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;   (unfolding acc(i32(_2.val_ref), write) in
;     (unfolding acc(usize(_3), write) in
;       (unfolding acc(usize(_5), write) in
;         (let _LET_0 ==
;           (_5.val_int + _3.val_int) in
;           (forall k: Int ::
;             { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;             k) }
;             !(_LET_0 < 0 || _LET_0 > 18446744073709551615) &&
;             (_LET_0 <= k &&
;             k <
;             m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==>
;             _2.val_ref.val_int <
;             m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;             k))))))) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==>
;   0 <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) <
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) &&
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) ==
;   (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))))))))))))
; [eval] !((unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0 || (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0 || (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) < 0
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 13
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
; [then-branch: 103 | val_int@358@01 + val_int@366@01 < 0 | live]
; [else-branch: 103 | !(val_int@358@01 + val_int@366@01 < 0) | live]
(push) ; 14
; [then-branch: 103 | val_int@358@01 + val_int@366@01 < 0]
(assert (< (+ val_int@358@01 val_int@366@01) 0))
(pop) ; 14
(push) ; 14
; [else-branch: 103 | !(val_int@358@01 + val_int@366@01 < 0)]
(assert (not (< (+ val_int@358@01 val_int@366@01) 0)))
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) > 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 15
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (+ val_int@358@01 val_int@366@01) 0))
  (< (+ val_int@358@01 val_int@366@01) 0)))
(set-option :timeout 0)
(push) ; 13
(assert (not (not
  (or
    (< (+ val_int@358@01 val_int@366@01) 0)
    (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not
  (or
    (< (+ val_int@358@01 val_int@366@01) 0)
    (> (+ val_int@358@01 val_int@366@01) 18446744073709551615))))
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int) + (unfolding acc(usize(_3), write) in _3.val_int)
; [eval] (unfolding acc(usize(_5), write) in _5.val_int)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 13
; Joined path conditions
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 13
; Joined path conditions
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
(assert (not (<=
  (+ val_int@358@01 val_int@366@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ val_int@358@01 val_int@366@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] (unfolding acc(usize(_3), write) in _3.val_int) > 0
; [eval] (unfolding acc(usize(_3), write) in _3.val_int)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
(assert (not (> val_int@366@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (> val_int@366@01 0))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@381@01
  $Snap.unit) ret@211@01))
(pop) ; 13
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@381@01
  $Snap.unit) ret@211@01))
(set-option :timeout 0)
(push) ; 13
(assert (not (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@381@01
  $Snap.unit) ret@211@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@381@01
  $Snap.unit) ret@211@01))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 13
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
; [eval] (forall k1: Int, k2: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1), m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2) } 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2))
(declare-const k1@388@01 Int)
(declare-const k2@389@01 Int)
(push) ; 13
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] 0 <= k1 && (k1 < k2 && k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] 0 <= k1
(push) ; 14
; [then-branch: 104 | !(0 <= k1@388@01) | live]
; [else-branch: 104 | 0 <= k1@388@01 | live]
(push) ; 15
; [then-branch: 104 | !(0 <= k1@388@01)]
(assert (not (<= 0 k1@388@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 104 | 0 <= k1@388@01]
(assert (<= 0 k1@388@01))
; [eval] k1 < k2
(push) ; 16
; [then-branch: 105 | !(k1@388@01 < k2@389@01) | live]
; [else-branch: 105 | k1@388@01 < k2@389@01 | live]
(push) ; 17
; [then-branch: 105 | !(k1@388@01 < k2@389@01)]
(assert (not (< k1@388@01 k2@389@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 105 | k1@388@01 < k2@389@01]
(assert (< k1@388@01 k2@389@01))
; [eval] k2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 18
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (< k1@388@01 k2@389@01) (not (< k1@388@01 k2@389@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 k1@388@01)
  (and
    (<= 0 k1@388@01)
    (or (< k1@388@01 k2@389@01) (not (< k1@388@01 k2@389@01))))))
(assert (or (<= 0 k1@388@01) (not (<= 0 k1@388@01))))
(set-option :timeout 0)
(push) ; 14
; [then-branch: 106 | 0 <= k1@388@01 && k1@388@01 < k2@389@01 && k2@389@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 106 | !(0 <= k1@388@01 && k1@388@01 < k2@389@01 && k2@389@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 15
; [then-branch: 106 | 0 <= k1@388@01 && k1@388@01 < k2@389@01 && k2@389@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (<= 0 k1@388@01)
  (and
    (< k1@388@01 k2@389@01)
    (<
      k2@389@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1) <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k1)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
(set-option :timeout 0)
(push) ; 17
(assert (not (<
  k1@388@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<
  k1@388@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 17
(assert (not (<= k1@388@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= k1@388@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (<
    k1@388@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (<= k1@388@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k2)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 17
(assert (not (<= 0 k2@389@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k2@389@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 17
(assert (not (<= k2@389@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= k2@389@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (<= 0 k2@389@01)
  (<= k2@389@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 106 | !(0 <= k1@388@01 && k1@388@01 < k2@389@01 && k2@389@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k1@388@01)
    (and
      (< k1@388@01 k2@389@01)
      (<
        k2@389@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    (<= 0 k1@388@01)
    (and
      (< k1@388@01 k2@389@01)
      (<
        k2@389@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k1@388@01)
    (< k1@388@01 k2@389@01)
    (<
      k2@389@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<
      k1@388@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k1@388@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)
    (<= 0 k2@389@01)
    (<= k2@389@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k1@388@01)
      (and
        (< k1@388@01 k2@389@01)
        (<
          k2@389@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  (and
    (<= 0 k1@388@01)
    (and
      (< k1@388@01 k2@389@01)
      (<
        k2@389@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k1@388@01 Int) (k2@389@01 Int)) (!
  (and
    (=>
      (<= 0 k1@388@01)
      (and
        (<= 0 k1@388@01)
        (or (< k1@388@01 k2@389@01) (not (< k1@388@01 k2@389@01)))))
    (or (<= 0 k1@388@01) (not (<= 0 k1@388@01)))
    (=>
      (and
        (<= 0 k1@388@01)
        (and
          (< k1@388@01 k2@389@01)
          (<
            k2@389@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k1@388@01)
        (< k1@388@01 k2@389@01)
        (<
          k2@389@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<
          k1@388@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k1@388@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)
        (<= 0 k2@389@01)
        (<= k2@389@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01)))
    (or
      (not
        (and
          (<= 0 k1@388@01)
          (and
            (< k1@388@01 k2@389@01)
            (<
              k2@389@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))))
      (and
        (<= 0 k1@388@01)
        (and
          (< k1@388@01 k2@389@01)
          (<
            k2@389@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999-aux|)))
(assert (forall ((k1@388@01 Int) (k2@389@01 Int)) (!
  (and
    (=>
      (and (<= 0 k1@388@01) (< k1@388@01 k2@389@01))
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (=>
      (and
        (<= 0 k1@388@01)
        (and
          (< k1@388@01 k2@389@01)
          (<
            k2@389@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999_precondition|)))
(push) ; 13
(assert (not (forall ((k1@388@01 Int) (k2@389@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (and (<= 0 k1@388@01) (< k1@388@01 k2@389@01))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (=>
          (and
            (<= 0 k1@388@01)
            (and
              (< k1@388@01 k2@389@01)
              (<
                k2@389@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01))))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))))
      (and
        (<= 0 k1@388@01)
        (and
          (< k1@388@01 k2@389@01)
          (<
            k2@389@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01)))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k1@388@01 Int) (k2@389@01 Int)) (!
  (=>
    (and
      (<= 0 k1@388@01)
      (and
        (< k1@388@01 k2@389@01)
        (<
          k2@389@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k1@388@01) (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k2@389@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@1332@1306@1999|)))
; [eval] (forall k: Int :: { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
(declare-const k@390@01 Int)
(push) ; 13
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] 0 <= k
(push) ; 14
; [then-branch: 107 | !(0 <= k@390@01) | live]
; [else-branch: 107 | 0 <= k@390@01 | live]
(push) ; 15
; [then-branch: 107 | !(0 <= k@390@01)]
(assert (not (<= 0 k@390@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 107 | 0 <= k@390@01]
(assert (<= 0 k@390@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@390@01) (not (<= 0 k@390@01))))
(set-option :timeout 0)
(push) ; 14
; [then-branch: 108 | 0 <= k@390@01 && k@390@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 108 | !(0 <= k@390@01 && k@390@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 15
; [then-branch: 108 | 0 <= k@390@01 && k@390@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (<= 0 k@390@01)
  (<
    k@390@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 17
(assert (not (<= k@390@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= k@390@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (<= k@390@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 16
; [eval] read$()
(push) ; 17
(pop) ; 17
; Joined path conditions
(push) ; 17
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
(set-option :timeout 0)
(push) ; 17
(assert (not (<
  k@390@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@390@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (<
    k@390@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 108 | !(0 <= k@390@01 && k@390@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k@390@01)
    (<
      k@390@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@390@01)
    (<
      k@390@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))
  (and
    (<= 0 k@390@01)
    (<
      k@390@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k@390@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)
    (<
      k@390@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@390@01)
      (<
        k@390@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k@390@01)
    (<
      k@390@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@390@01 Int)) (!
  (and
    (or (<= 0 k@390@01) (not (<= 0 k@390@01)))
    (=>
      (and
        (<= 0 k@390@01)
        (<
          k@390@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (<= 0 k@390@01)
        (<
          k@390@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@390@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)
        (<
          k@390@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01)))
    (or
      (not
        (and
          (<= 0 k@390@01)
          (<
            k@390@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k@390@01)
        (<
          k@390@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656-aux|)))
(assert (forall ((k@390@01 Int)) (!
  (and
    (=>
      (<= 0 k@390@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (=>
      (and
        (<= 0 k@390@01)
        (<
          k@390@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656_precondition|)))
(push) ; 13
(assert (not (forall ((k@390@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (<= 0 k@390@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (=>
          (and
            (<= 0 k@390@01)
            (<
              k@390@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))))
      (and
        (<= 0 k@390@01)
        (<
          k@390@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@390@01 Int)) (!
  (=>
    (and
      (<= 0 k@390@01)
      (<
        k@390@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01)))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@390@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2006@1306@2656|)))
; [eval] (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_5), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)))
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (unfolding acc(usize(_5), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int))
(set-option :timeout 0)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@252@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int)
(declare-const k@391@01 Int)
(set-option :timeout 0)
(push) ; 15
; [eval] 0 <= k && k < _5.val_int ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] 0 <= k && k < _5.val_int
; [eval] 0 <= k
(push) ; 16
; [then-branch: 109 | !(0 <= k@391@01) | live]
; [else-branch: 109 | 0 <= k@391@01 | live]
(push) ; 17
; [then-branch: 109 | !(0 <= k@391@01)]
(assert (not (<= 0 k@391@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 109 | 0 <= k@391@01]
(assert (<= 0 k@391@01))
; [eval] k < _5.val_int
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@391@01) (not (<= 0 k@391@01))))
(push) ; 16
; [then-branch: 110 | 0 <= k@391@01 && k@391@01 < val_int@358@01 | live]
; [else-branch: 110 | !(0 <= k@391@01 && k@391@01 < val_int@358@01) | live]
(push) ; 17
; [then-branch: 110 | 0 <= k@391@01 && k@391@01 < val_int@358@01]
(assert (and (<= 0 k@391@01) (< k@391@01 val_int@358@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) < _2.val_ref.val_int
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 18
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  k@391@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@391@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(push) ; 19
(assert (not (<= k@391@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<= k@391@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (<
    k@391@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (<= k@391@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(set-option :timeout 0)
(push) ; 17
; [else-branch: 110 | !(0 <= k@391@01 && k@391@01 < val_int@358@01)]
(assert (not (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
  (and
    (<= 0 k@391@01)
    (< k@391@01 val_int@358@01)
    (<
      k@391@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k@391@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))))
; Joined path conditions
(assert (or
  (not (and (<= 0 k@391@01) (< k@391@01 val_int@358@01)))
  (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@391@01 Int)) (!
  (and
    (or (<= 0 k@391@01) (not (<= 0 k@391@01)))
    (=>
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
      (and
        (<= 0 k@391@01)
        (< k@391@01 val_int@358@01)
        (<
          k@391@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@391@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01)))
    (or
      (not (and (<= 0 k@391@01) (< k@391@01 val_int@358@01)))
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012-aux|)))
(pop) ; 14
; Joined path conditions
(assert (forall ((k@391@01 Int)) (!
  (and
    (or (<= 0 k@391@01) (not (<= 0 k@391@01)))
    (=>
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
      (and
        (<= 0 k@391@01)
        (< k@391@01 val_int@358@01)
        (<
          k@391@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@391@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01)))
    (or
      (not (and (<= 0 k@391@01) (< k@391@01 val_int@358@01)))
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012-aux|)))
(pop) ; 13
; Joined path conditions
(assert (forall ((k@391@01 Int)) (!
  (and
    (or (<= 0 k@391@01) (not (<= 0 k@391@01)))
    (=>
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
      (and
        (<= 0 k@391@01)
        (< k@391@01 val_int@358@01)
        (<
          k@391@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@391@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01)))
    (or
      (not (and (<= 0 k@391@01) (< k@391@01 val_int@358@01)))
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012-aux|)))
(assert (forall ((k@391@01 Int)) (!
  (=>
    (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012_precondition|)))
(push) ; 13
(assert (not (forall ((k@391@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
      (and (<= 0 k@391@01) (< k@391@01 val_int@358@01)))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@391@01 Int)) (!
  (=>
    (and (<= 0 k@391@01) (< k@391@01 val_int@358@01))
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@391@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@2741@1306@3012|)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@381@01, _), ret@211@01) | live]
; [else-branch: 111 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@381@01, _), ret@211@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 111 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@381@01, _), ret@211@01)]
; [eval] (unfolding acc(i32(_2.val_ref), write) in (unfolding acc(usize(_3), write) in (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))))
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (unfolding acc(usize(_3), write) in (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))))
(set-option :timeout 0)
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@252@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@362@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (unfolding acc(usize(_5), write) in (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))))
(set-option :timeout 0)
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@362@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@252@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@356@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
; [eval] (let _LET_0 == (_5.val_int + _3.val_int) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
; [eval] _5.val_int + _3.val_int
(declare-const letvar@392@01 Int)
(assert (= (as letvar@392@01  Int) (+ val_int@358@01 val_int@366@01)))
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k) } !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
(declare-const k@393@01 Int)
(set-option :timeout 0)
(push) ; 18
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) ==> _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615) && (_LET_0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] !(_LET_0 < 0 || _LET_0 > 18446744073709551615)
; [eval] _LET_0 < 0 || _LET_0 > 18446744073709551615
; [eval] _LET_0 < 0
(push) ; 19
; [then-branch: 112 | val_int@358@01 + val_int@366@01 < 0 | live]
; [else-branch: 112 | !(val_int@358@01 + val_int@366@01 < 0) | live]
(push) ; 20
; [then-branch: 112 | val_int@358@01 + val_int@366@01 < 0]
(assert (< (+ val_int@358@01 val_int@366@01) 0))
(pop) ; 20
(push) ; 20
; [else-branch: 112 | !(val_int@358@01 + val_int@366@01 < 0)]
(assert (not (< (+ val_int@358@01 val_int@366@01) 0)))
; [eval] _LET_0 > 18446744073709551615
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
; [then-branch: 113 | val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615 | live]
; [else-branch: 113 | !(val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615) | live]
(push) ; 20
; [then-branch: 113 | val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615]
(assert (or
  (< (+ val_int@358@01 val_int@366@01) 0)
  (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
(pop) ; 20
(push) ; 20
; [else-branch: 113 | !(val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615)]
; [eval] _LET_0 <= k
(push) ; 21
; [then-branch: 114 | !(val_int@358@01 + val_int@366@01 <= k@393@01) | live]
; [else-branch: 114 | val_int@358@01 + val_int@366@01 <= k@393@01 | live]
(push) ; 22
; [then-branch: 114 | !(val_int@358@01 + val_int@366@01 <= k@393@01)]
(assert (not (<= (+ val_int@358@01 val_int@366@01) k@393@01)))
(pop) ; 22
(push) ; 22
; [else-branch: 114 | val_int@358@01 + val_int@366@01 <= k@393@01]
(assert (<= (+ val_int@358@01 val_int@366@01) k@393@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(push) ; 23
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
; [eval] read$()
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (+ val_int@358@01 val_int@366@01) k@393@01)
  (not (<= (+ val_int@358@01 val_int@366@01) k@393@01))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (or
    (<= (+ val_int@358@01 val_int@366@01) k@393@01)
    (not (<= (+ val_int@358@01 val_int@366@01) k@393@01)))))
(assert (or
  (not
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (or
    (< (+ val_int@358@01 val_int@366@01) 0)
    (> (+ val_int@358@01 val_int@366@01) 18446744073709551615))))
(set-option :timeout 0)
(push) ; 19
; [then-branch: 115 | !(val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615) && val_int@358@01 + val_int@366@01 <= k@393@01 && k@393@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 115 | !(!(val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615) && val_int@358@01 + val_int@366@01 <= k@393@01 && k@393@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 20
; [then-branch: 115 | !(val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615) && val_int@358@01 + val_int@366@01 <= k@393@01 && k@393@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (not
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (and
    (<= (+ val_int@358@01 val_int@366@01) k@393@01)
    (<
      k@393@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
; [eval] _2.val_ref.val_int < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 21
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
; [eval] read$()
(push) ; 22
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
(set-option :timeout 0)
(push) ; 22
(assert (not (<= 0 k@393@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 k@393@01))
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(push) ; 22
; [eval] read$()
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(pop) ; 22
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 22
(assert (not (<= k@393@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (<= k@393@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
(pop) ; 21
; Joined path conditions
(assert (and
  (<= 0 k@393@01)
  (<= k@393@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
(pop) ; 20
(push) ; 20
; [else-branch: 115 | !(!(val_int@358@01 + val_int@366@01 < 0 || val_int@358@01 + val_int@366@01 > 18446744073709551615) && val_int@358@01 + val_int@366@01 <= k@393@01 && k@393@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (and
      (<= (+ val_int@358@01 val_int@366@01) k@393@01)
      (<
        k@393@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
(assert (=>
  (and
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (and
      (<= (+ val_int@358@01 val_int@366@01) k@393@01)
      (<
        k@393@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (<= (+ val_int@358@01 val_int@366@01) k@393@01)
    (<
      k@393@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= 0 k@393@01)
    (<= k@393@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (not
        (or
          (< (+ val_int@358@01 val_int@366@01) 0)
          (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
      (and
        (<= (+ val_int@358@01 val_int@366@01) k@393@01)
        (<
          k@393@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  (and
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (and
      (<= (+ val_int@358@01 val_int@366@01) k@393@01)
      (<
        k@393@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))))
(pop) ; 18
; Nested auxiliary terms: globals (aux)
(assert (or
  (not
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (or
    (< (+ val_int@358@01 val_int@366@01) 0)
    (> (+ val_int@358@01 val_int@366@01) 18446744073709551615))))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@393@01 Int)) (!
  (and
    (=>
      (not
        (or
          (< (+ val_int@358@01 val_int@366@01) 0)
          (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
      (or
        (<= (+ val_int@358@01 val_int@366@01) k@393@01)
        (not (<= (+ val_int@358@01 val_int@366@01) k@393@01))))
    (=>
      (and
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (and
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (<= (+ val_int@358@01 val_int@366@01) k@393@01)
        (<
          k@393@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= 0 k@393@01)
        (<= k@393@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
    (or
      (not
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))))
      (and
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (and
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|)))
(pop) ; 17
; Joined path conditions
(assert (and
  (= (as letvar@392@01  Int) (+ val_int@358@01 val_int@366@01))
  (or
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (forall ((k@393@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (or
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (not (<= (+ val_int@358@01 val_int@366@01) k@393@01))))
      (=>
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (<= 0 k@393@01)
          (<= k@393@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
      (or
        (not
          (and
            (not
              (or
                (< (+ val_int@358@01 val_int@366@01) 0)
                (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
            (and
              (<= (+ val_int@358@01 val_int@366@01) k@393@01)
              (<
                k@393@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01)))))
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|))))
(pop) ; 16
; Joined path conditions
(assert (and
  (= (as letvar@392@01  Int) (+ val_int@358@01 val_int@366@01))
  (or
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (forall ((k@393@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (or
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (not (<= (+ val_int@358@01 val_int@366@01) k@393@01))))
      (=>
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (<= 0 k@393@01)
          (<= k@393@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
      (or
        (not
          (and
            (not
              (or
                (< (+ val_int@358@01 val_int@366@01) 0)
                (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
            (and
              (<= (+ val_int@358@01 val_int@366@01) k@393@01)
              (<
                k@393@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01)))))
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|))))
(pop) ; 15
; Joined path conditions
(assert (and
  (= (as letvar@392@01  Int) (+ val_int@358@01 val_int@366@01))
  (or
    (not
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (or
      (< (+ val_int@358@01 val_int@366@01) 0)
      (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
  (forall ((k@393@01 Int)) (!
    (and
      (=>
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (or
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (not (<= (+ val_int@358@01 val_int@366@01) k@393@01))))
      (=>
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (<= 0 k@393@01)
          (<= k@393@01 18446744073709551615)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
      (or
        (not
          (and
            (not
              (or
                (< (+ val_int@358@01 val_int@366@01) 0)
                (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
            (and
              (<= (+ val_int@358@01 val_int@366@01) k@393@01)
              (<
                k@393@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01)))))
        (and
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (and
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01)
  (and
    (= (as letvar@392@01  Int) (+ val_int@358@01 val_int@366@01))
    (or
      (not
        (or
          (< (+ val_int@358@01 val_int@366@01) 0)
          (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
      (or
        (< (+ val_int@358@01 val_int@366@01) 0)
        (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
    (forall ((k@393@01 Int)) (!
      (and
        (=>
          (not
            (or
              (< (+ val_int@358@01 val_int@366@01) 0)
              (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
          (or
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (not (<= (+ val_int@358@01 val_int@366@01) k@393@01))))
        (=>
          (and
            (not
              (or
                (< (+ val_int@358@01 val_int@366@01) 0)
                (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
            (and
              (<= (+ val_int@358@01 val_int@366@01) k@393@01)
              (<
                k@393@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01))))
          (and
            (not
              (or
                (< (+ val_int@358@01 val_int@366@01) 0)
                (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
            (<= (+ val_int@358@01 val_int@366@01) k@393@01)
            (<
              k@393@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))
            (<= 0 k@393@01)
            (<= k@393@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
        (or
          (not
            (and
              (not
                (or
                  (< (+ val_int@358@01 val_int@366@01) 0)
                  (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
              (and
                (<= (+ val_int@358@01 val_int@366@01) k@393@01)
                (<
                  k@393@01
                  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                      $t@303@01
                      ($Snap.first $t@297@01))))
                    $Snap.unit) $t@251@01)))))
          (and
            (not
              (or
                (< (+ val_int@358@01 val_int@366@01) 0)
                (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
            (and
              (<= (+ val_int@358@01 val_int@366@01) k@393@01)
              (<
                k@393@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                    $t@303@01
                    ($Snap.first $t@297@01))))
                  $Snap.unit) $t@251@01))))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882-aux|)))))
(push) ; 13
(assert (not (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01)
  (forall ((k@393@01 Int)) (!
    (=>
      (and
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (and
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882|)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01)
  (forall ((k@393@01 Int)) (!
    (=>
      (and
        (not
          (or
            (< (+ val_int@358@01 val_int@366@01) 0)
            (> (+ val_int@358@01 val_int@366@01) 18446744073709551615)))
        (and
          (<= (+ val_int@358@01 val_int@366@01) k@393@01)
          (<
            k@393@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (<
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01)))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@393@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1306@3372@1306@3882|))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)) == (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_6)
(push) ; 13
; [eval] read$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@381@01
  $Snap.unit) ret@211@01))
(pop) ; 13
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@381@01
  $Snap.unit) ret@211@01))
(set-option :timeout 0)
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@381@01, _), ret@211@01) | dead]
; [else-branch: 116 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@381@01, _), ret@211@01)) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 116 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@381@01, _), ret@211@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@381@01
    $Snap.unit) ret@211@01)))
; [exec]
; assert _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
; [eval] _preserve$0 == _1.val_ref
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] _preserve$1 == _2.val_ref
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write) &&
;   (acc(usize(_5), write) &&
;   (acc(usize(_3), write) &&
;   (acc(bool(_7), write) &&
;   (acc(_1.val_ref, read$()) &&
;   (acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_1.val_ref), write) &&
;   (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))))
(assert (<=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (not (= _1@108@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] read$()
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (<
    $Perm.No
    (-
      (+
        (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
        (read$ $Snap.unit))
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit))))
  (not (= _2@109@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 12
; [eval] !__t32
; [then-branch: 117 | False | dead]
; [else-branch: 117 | True | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 117 | True]
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !(__t18 && __t18)
; [eval] __t18 && __t18
(push) ; 10
; [then-branch: 118 | False | live]
; [else-branch: 118 | True | live]
(push) ; 11
; [then-branch: 118 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 118 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 119 | False | dead]
; [else-branch: 119 | True | live]
(push) ; 10
; [else-branch: 119 | True]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !__t9
; [then-branch: 120 | False | dead]
; [else-branch: 120 | True | live]
(push) ; 8
; [else-branch: 120 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 93 | _63@314@01 != 2]
(assert (not (= _63@314@01 2)))
(pop) ; 7
; [eval] !(__t28 == 2)
; [eval] __t28 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not (= _63@314@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _63@314@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | _63@314@01 != 2 | live]
; [else-branch: 121 | _63@314@01 == 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 121 | _63@314@01 != 2]
(assert (not (= _63@314@01 2)))
; [exec]
; label l21
; [exec]
; label loop3_group3_bb18
; [exec]
; __t12 := true
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | True | live]
; [else-branch: 122 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 122 | True]
; [exec]
; exhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_62.val_ref), read$())
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$Ordering$opensqu$0$closesqu$$_beg_$_end_(_57), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $t@394@01 $Snap)
(declare-const $t@395@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@395@01 $t@311@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@395@01 $t@394@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb15
; [exec]
; __t13 := true
; [exec]
; _66 := builtin$havoc_ref()
(declare-const ret@396@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_66.val_int, write)
(declare-const $t@397@01 Int)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@396@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@396@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@396@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@396@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _66.val_int := _50.val_int
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@396@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@396@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@396@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l26
; [exec]
; _6 := builtin$havoc_ref()
(declare-const ret@398@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write)
(declare-const $t@399@01 $Snap)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ret@211@01 ret@398@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) ==
;   0
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 $Snap.unit))
; [eval] m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6) == 0
; [eval] m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_6)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@399@01 ret@398@01))
(pop) ; 9
; Joined path conditions
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition $t@399@01 ret@398@01))
(assert (=
  (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$discriminant$$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ $t@399@01 ret@398@01)
  0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write)
(assert (= $t@399@01 ($Snap.combine ($Snap.first $t@399@01) ($Snap.second $t@399@01))))
(assert (not (= ret@398@01 $Ref.null)))
(assert (=
  ($Snap.second $t@399@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@399@01))
    ($Snap.second ($Snap.second $t@399@01)))))
(assert (= ($Snap.first ($Snap.second $t@399@01)) $Snap.unit))
; [eval] 0 <= self.discriminant
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@399@01))))
(assert (=
  ($Snap.second ($Snap.second $t@399@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@399@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@399@01))) $Snap.unit))
; [eval] self.discriminant <= 1
(assert (<= ($SortWrappers.$SnapToInt ($Snap.first $t@399@01)) 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@399@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
; [eval] self.discriminant == 0
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@399@01)) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@399@01)) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | First:($t@399@01) == 0 | live]
; [else-branch: 123 | First:($t@399@01) != 0 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 123 | First:($t@399@01) == 0]
(assert (= ($SortWrappers.$SnapToInt ($Snap.first $t@399@01)) 0))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_%trigger $t@399@01 ret@398@01))
; [exec]
; unfold acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_Some(_6.enum_Some), write)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))
    $Ref.null)))
; State saturation: after unfold
(check-sat)
; unknown
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_Some%trigger ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01)))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
; [exec]
; _6.enum_Some.f$0 := _66
; [exec]
; label l27
; [exec]
; _67 := builtin$havoc_ref()
(declare-const ret@401@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_67.val_int, write)
(declare-const $t@402@01 Int)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@396@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@401@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _67.val_int := _5.val_int
(declare-const val_int@403@01 Int)
(assert (=
  val_int@403@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@250@01))))))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@396@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@214@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ret@215@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= $t@276@01 ret@401@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l28
; [exec]
; _60 := _67
; [exec]
; label l29
; [exec]
; label l51
; [exec]
; fold acc(usize(_6.enum_Some.f$0), write)
; [eval] 0 <= self.val_int
; [eval] self.val_int <= 18446744073709551615
(assert (usize%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap val_int@280@01)
  ($Snap.combine $Snap.unit $Snap.unit)) ret@396@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@399@01))))))
  ret@396@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_Some(_6.enum_Some), write)
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_Some%trigger ($Snap.combine
  ($SortWrappers.$RefTo$Snap ret@396@01)
  ($Snap.combine
    ($SortWrappers.IntTo$Snap val_int@280@01)
    ($Snap.combine $Snap.unit $Snap.unit))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01)))))))
; [exec]
; fold acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write)
; [eval] 0 <= self.discriminant
; [eval] self.discriminant <= 1
; [eval] self.discriminant == 0
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= ($SortWrappers.$SnapToInt ($Snap.first $t@399@01)) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | First:($t@399@01) == 0 | live]
; [else-branch: 124 | First:($t@399@01) != 0 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 124 | First:($t@399@01) == 0]
(assert (m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_%trigger ($Snap.combine
  ($Snap.first $t@399@01)
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap ret@396@01)
          ($Snap.combine
            ($SortWrappers.IntTo$Snap val_int@280@01)
            ($Snap.combine $Snap.unit $Snap.unit))))))) ret@398@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@211@01 ret@398@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; label loop3_group3_bb20
; [exec]
; __t16 := true
; [exec]
; _5 := _60
; [exec]
; label l34
; [exec]
; _68 := builtin$havoc_int()
(declare-const ret@404@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@405@01 $Snap)
(assert (= $t@405@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _68 := _47
; [exec]
; label l35
; [exec]
; _69 := builtin$havoc_ref()
(declare-const ret@406@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_0, write)
(declare-const $t@407@01 $Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@406@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@406@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_0.val_int, write)
(declare-const $t@408@01 Int)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@401@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@407@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_1, write)
(declare-const $t@409@01 $Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@275@01 ret@406@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_69.tuple_1.val_bool, write)
(declare-const $t@410@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@409@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@409@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 $t@409@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= $t@409@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _69.tuple_0.val_int := _3.val_int - _68
; [eval] _3.val_int - _68
(declare-const val_int@411@01 Int)
(assert (=
  val_int@411@01
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    _47@269@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@401@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@407@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; _69.tuple_1.val_bool := _3.val_int - _68 < 0 ||
;   _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68 < 0 || _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68 < 0
; [eval] _3.val_int - _68
(set-option :timeout 0)
(push) ; 11
; [then-branch: 125 | First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0 | live]
; [else-branch: 125 | !(First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0) | live]
(push) ; 12
; [then-branch: 125 | First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0]
(assert (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
    _47@269@01)
  0))
(pop) ; 12
(push) ; 12
; [else-branch: 125 | !(First:(First:(Second:(Second:($t@250@01)))) - _47@269@01 < 0)]
(assert (not
  (<
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      _47@269@01)
    0)))
; [eval] _3.val_int - _68 > 18446744073709551615
; [eval] _3.val_int - _68
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      0))
  (<
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
      _47@269@01)
    0)))
(declare-const val_bool@412@01 Bool)
(assert (=
  val_bool@412@01
  (or
    (<
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      0)
    (>
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@250@01)))))
        _47@269@01)
      18446744073709551615))))
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 $t@409@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 $t@409@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 $t@409@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t29 := _69.tuple_1.val_bool
; [exec]
; assert !__t29
; [eval] !__t29
(set-option :timeout 0)
(push) ; 11
(assert (not (not val_bool@412@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not val_bool@412@01))
; [exec]
; label loop3_group3_bb21
; [exec]
; __t17 := true
; [exec]
; _3 := _69.tuple_0
; [exec]
; label l36
; [exec]
; _72 := builtin$havoc_int()
(declare-const ret@413@01 Int)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale true
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _72 := _3.val_int
; [exec]
; label l37
; [exec]
; _71 := builtin$havoc_ref()
(declare-const ret@415@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_71.val_bool, write)
(declare-const $t@416@01 Bool)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@415@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _71.val_bool := _72 > 0
; [eval] _72 > 0
(declare-const val_bool@417@01 Bool)
(assert (= val_bool@417@01 (> val_int@411@01 0)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@415@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; __t30 := _71.val_bool
; [eval] !__t30
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not val_bool@417@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | !(val_bool@417@01) | dead]
; [else-branch: 126 | val_bool@417@01 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 126 | val_bool@417@01]
(assert val_bool@417@01)
(pop) ; 11
; [eval] !!__t30
; [eval] !__t30
(push) ; 11
(set-option :timeout 10)
(assert (not (not val_bool@417@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not val_bool@417@01))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | val_bool@417@01 | live]
; [else-branch: 127 | !(val_bool@417@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 127 | val_bool@417@01]
(assert val_bool@417@01)
; [exec]
; label l38
; [exec]
; label loop3_group3_bb24
; [exec]
; __t18 := true
; [exec]
; _74 := builtin$havoc_ref()
(declare-const ret@418@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_74.val_ref, write)
(declare-const $t@419@01 $Ref)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@418@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _74.val_ref := _6
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@308@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@155@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _1@108@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= _2@109@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@286@01 ret@418@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No)
  (<
    (-
      (- $Perm.Write (read$ $Snap.unit))
      ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_74.val_ref), read$())
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@420@01 $Snap)
(declare-const $t@421@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit)))))
    (=
      $t@421@01
      ($Snap.combine
        ($Snap.first $t@399@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@399@01))))
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap ret@396@01)
                ($Snap.combine
                  ($SortWrappers.IntTo$Snap val_int@280@01)
                  ($Snap.combine $Snap.unit $Snap.unit)))))))))
  (=> (< $Perm.No (read$ $Snap.unit)) (= $t@421@01 $t@420@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l40
; [exec]
; label l41
; [exec]
; _73 := builtin$havoc_ref()
(declare-const ret@422@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(bool(_73), write)
(declare-const $t@423@01 Bool)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@209@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(bool(_73), write)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@422@01)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@422@01 $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bool%trigger ($SortWrappers.BoolTo$Snap $t@423@01) ret@422@01))
; [exec]
; inhale _73.val_bool ==
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 $Snap.unit))
; [eval] _73.val_bool == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_74.val_ref)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@421@01
  $Snap.unit) ret@398@01))
(pop) ; 12
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@421@01
  $Snap.unit) ret@398@01))
(assert (=
  $t@423@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@421@01
    $Snap.unit) ret@398@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label l42
; [eval] __t18 && __t18
(set-option :timeout 0)
(push) ; 12
; [then-branch: 128 | False | live]
; [else-branch: 128 | True | live]
(push) ; 13
; [then-branch: 128 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 128 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | True | live]
; [else-branch: 129 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 129 | True]
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(old[l40](_74.val_ref)), read$())
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
; [eval] old[l40](_74.val_ref)
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (- $Perm.Write ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
      (read$ $Snap.unit))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
        (read$ $Snap.unit))
      (read$ $Snap.unit)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No)
  (<
    (-
      (read$ $Snap.unit)
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        (read$ $Snap.unit)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_6), write -
;   read$())
; [eval] write - read$()
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or
  (= (- $Perm.Write (read$ $Snap.unit)) $Perm.No)
  (< $Perm.No (- $Perm.Write (read$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const $t@425@01 $Snap)
(declare-const $t@426@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit))))
    (= $t@426@01 $t@421@01))
  (=> (< $Perm.No (- $Perm.Write (read$ $Snap.unit))) (= $t@426@01 $t@425@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group3_bb26
; [exec]
; __t19 := true
; [exec]
; __t31 := _73.val_bool
; [eval] !__t31
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not $t@423@01))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not $t@423@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | !($t@423@01) | live]
; [else-branch: 130 | $t@423@01 | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 130 | !($t@423@01)]
(assert (not $t@423@01))
; [exec]
; label l44
; [exec]
; label l52
; [exec]
; label loop3_group3_bb23
; [exec]
; __t21 := true
; [exec]
; _70 := builtin$havoc_ref()
(declare-const ret@427@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_70.val_bool, write)
(declare-const $t@428@01 Bool)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@427@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _70.val_bool := false
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@427@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; label loop3_group3_bb25
; [exec]
; __t22 := true
; [exec]
; _7 := _70
; [exec]
; label l45
; [exec]
; _11 := builtin$havoc_ref()
(declare-const ret@429@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_11), write)
(declare-const $t@430@01 $Snap)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@260@01 ret@429@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop3_group4_bb3
; [exec]
; __t2 := true
; [exec]
; _10 := builtin$havoc_ref()
(declare-const ret@431@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(_10.val_bool, write)
(declare-const $t@432@01 Bool)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@427@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= ret@431@01 $Ref.null)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _10.val_bool := _7.val_bool
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@427@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@422@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@415@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@409@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@176@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= ret@265@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= $t@278@01 ret@431@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [exec]
; label l46
; [exec]
; __t32 := _10.val_bool
; [then-branch: 131 | False | dead]
; [else-branch: 131 | True | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 131 | True]
(pop) ; 14
; [eval] !__t32
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | True | live]
; [else-branch: 132 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 132 | True]
; [exec]
; label l47
; [exec]
; label l54
; [exec]
; label bb4
; [exec]
; __t23 := true
; [exec]
; _9 := builtin$havoc_ref()
(declare-const ret@433@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_9), write)
(declare-const $t@434@01 $Snap)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@429@01 ret@433@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (= ret@260@01 ret@433@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _75 := _6
; [exec]
; label l49
; [exec]
; _0 := _75
; [exec]
; label l50
; [exec]
; label return
; [exec]
; _old$pre$0 := _1.val_ref
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; _old$pre$1 := _2.val_ref
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (<
  $Perm.No
  (+
    (- $Perm.Write ($Perm.min $Perm.Write (read$ $Snap.unit)))
    (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==
;   old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) &&
;   ((forall k: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;     k) }
;     { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k)) }
;     0 <= k &&
;     k <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;     k) ==
;     old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k))) &&
;   ((unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==>
;   (unfolding acc(i32(_old$pre$1), write) in
;     (forall k: Int ::
;       { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;       k) }
;       0 <= k &&
;       k <
;       m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==>
;       !(_old$pre$1.val_int ==
;       m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;       k))))) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==>
;   0 <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) <
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) &&
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)) ==
;   (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) } { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
(declare-const k@435@01 Int)
(push) ; 15
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] 0 <= k
(push) ; 16
; [then-branch: 133 | !(0 <= k@435@01) | live]
; [else-branch: 133 | 0 <= k@435@01 | live]
(push) ; 17
; [then-branch: 133 | !(0 <= k@435@01)]
(assert (not (<= 0 k@435@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 133 | 0 <= k@435@01]
(assert (<= 0 k@435@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@435@01) (not (<= 0 k@435@01))))
(set-option :timeout 0)
(push) ; 16
; [then-branch: 134 | 0 <= k@435@01 && k@435@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
; [else-branch: 134 | !(0 <= k@435@01 && k@435@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
(push) ; 17
; [then-branch: 134 | 0 <= k@435@01 && k@435@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (and
  (<= 0 k@435@01)
  (<
    k@435@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 19
(assert (not (<= k@435@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<= k@435@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (<= k@435@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
(assert (not (<
  k@435@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@435@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (<
    k@435@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 134 | !(0 <= k@435@01 && k@435@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (and
    (<= 0 k@435@01)
    (<
      k@435@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@435@01)
    (<
      k@435@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))
  (and
    (<= 0 k@435@01)
    (<
      k@435@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<= k@435@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
    (<
      k@435@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@435@01)
      (<
        k@435@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))))
  (and
    (<= 0 k@435@01)
    (<
      k@435@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@435@01 Int)) (!
  (and
    (or (<= 0 k@435@01) (not (<= 0 k@435@01)))
    (=>
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@435@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01)))
    (or
      (not
        (and
          (<= 0 k@435@01)
          (<
            k@435@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064-aux|)))
(assert (forall ((k@435@01 Int)) (!
  (and
    (or (<= 0 k@435@01) (not (<= 0 k@435@01)))
    (=>
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<= k@435@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01)))
    (or
      (not
        (and
          (<= 0 k@435@01)
          (<
            k@435@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))))
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064-aux|)))
(assert (forall ((k@435@01 Int)) (!
  (and
    (=>
      (<= 0 k@435@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (=>
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064_precondition|)))
(push) ; 15
(assert (not (forall ((k@435@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (<= 0 k@435@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (=>
          (and
            (<= 0 k@435@01)
            (<
              k@435@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01)))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))))
      (and
        (<= 0 k@435@01)
        (<
          k@435@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@435@01 Int)) (!
  (=>
    (and
      (<= 0 k@435@01)
      (<
        k@435@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01)))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 k@435@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064|)))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@407@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@401@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 15
; Joined path conditions
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 15
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 15
; Joined path conditions
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==> (unfolding acc(i32(_old$pre$1), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> !(_old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(pop) ; 15
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@426@01, _), ret@398@01) | dead]
; [else-branch: 135 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@426@01, _), ret@398@01)) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 135 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@426@01, _), ret@398@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0)
(push) ; 15
; [eval] read$()
(push) ; 16
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(pop) ; 15
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@426@01, _), ret@398@01) | live]
; [else-branch: 136 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@426@01, _), ret@398@01)) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 136 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@426@01, _), ret@398@01)]
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
; [eval] 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))
; [eval] 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
(push) ; 17
; [eval] read$()
(push) ; 18
(pop) ; 18
; Joined path conditions
(push) ; 18
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_pure_1)
(set-option :timeout 0)
(push) ; 18
; [eval] read$()
(push) ; 19
(pop) ; 19
; Joined path conditions
(push) ; 19
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(pop) ; 17
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(set-option :timeout 0)
(push) ; 17
; [then-branch: 137 | !(0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01)) | live]
; [else-branch: 137 | 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01) | live]
(push) ; 18
; [then-branch: 137 | !(0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01))]
(assert (not
  (<=
    0
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01))))
(pop) ; 18
(push) ; 18
; [else-branch: 137 | 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01)]
(assert (<=
  0
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_pure_1)
(set-option :timeout 0)
(push) ; 20
; [eval] read$()
(push) ; 21
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(pop) ; 20
; Joined path conditions
(pop) ; 19
; Joined path conditions
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
(set-option :timeout 0)
(push) ; 19
; [eval] read$()
(push) ; 20
(pop) ; 20
; Joined path conditions
(push) ; 20
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
; Joined path conditions
(set-option :timeout 0)
(push) ; 19
; [then-branch: 138 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)) | live]
; [else-branch: 138 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01) | live]
(push) ; 20
; [then-branch: 138 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01))]
(assert (not
  (<
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))))
(pop) ; 20
(push) ; 20
; [else-branch: 138 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@426@01, _), ret@398@01) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$((First:($t@302@01[($t@303@01, First:($t@297@01))]), _), $t@251@01)]
(assert (<
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    $Snap.unit) $t@251@01)))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)
(push) ; 21
; [eval] read$()
(push) ; 22
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_pure_1)
(set-option :timeout 0)
(push) ; 22
; [eval] read$()
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(pop) ; 22
; Joined path conditions
(pop) ; 21
; Joined path conditions
(set-option :timeout 0)
(push) ; 21
; [eval] read$()
(push) ; 22
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 22
; [eval] read$()
(push) ; 23
(pop) ; 23
; Joined path conditions
(push) ; 23
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(pop) ; 22
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 22
(assert (not (<=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)
  18446744073709551615)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)
  18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
    $t@303@01
    ($Snap.first $t@297@01))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01)))
(pop) ; 21
; Joined path conditions
(assert (and
  (<=
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)
    18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
      $t@303@01
      ($Snap.first $t@297@01))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01))))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not (= $t@407@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= ret@401@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= ret@214@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= ret@215@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= $t@276@01 $t@252@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 21
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (and
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01))
    (<=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01)
      18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)))))
(assert (or
  (<
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
        $t@303@01
        ($Snap.first $t@297@01))))
      $Snap.unit) $t@251@01))
  (not
    (<
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
          $t@303@01
          ($Snap.first $t@297@01))))
        $Snap.unit) $t@251@01)))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (<=
    0
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01))
  (and
    (<=
      0
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01))
    (=>
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (and
        (<
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@426@01
            $Snap.unit) ret@398@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01))
        (<=
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@426@01
            $Snap.unit) ret@398@01)
          18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01))))
    (or
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (not
        (<
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@426@01
            $Snap.unit) ret@398@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
              $t@303@01
              ($Snap.first $t@297@01))))
            $Snap.unit) $t@251@01)))))))
(assert (or
  (<=
    0
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01))
  (not
    (<=
      0
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01)))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)
  (and
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
      $t@426@01
      $Snap.unit) ret@398@01)
    (=>
      (<=
        0
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01))
      (and
        (<=
          0
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@426@01
            $Snap.unit) ret@398@01))
        (=>
          (<
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@426@01
              $Snap.unit) ret@398@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (and
            (<
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@426@01
                $Snap.unit) ret@398@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))
            (<=
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@426@01
                $Snap.unit) ret@398@01)
              18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@426@01
              $Snap.unit) ret@398@01))))
        (or
          (<
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@426@01
              $Snap.unit) ret@398@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                $t@303@01
                ($Snap.first $t@297@01))))
              $Snap.unit) $t@251@01))
          (not
            (<
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@426@01
                $Snap.unit) ret@398@01)
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
                  $t@303@01
                  ($Snap.first $t@297@01))))
                $Snap.unit) $t@251@01))))))
    (or
      (<=
        0
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01))
      (not
        (<=
          0
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@426@01
            $Snap.unit) ret@398@01)))))))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@426@01
  $Snap.unit) ret@398@01))
(set-option :timeout 0)
(push) ; 15
(assert (not (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)
  (and
    (<=
      0
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01))
    (and
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01)))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@426@01
    $Snap.unit) ret@398@01)
  (and
    (<=
      0
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@426@01
        $Snap.unit) ret@398@01))
    (and
      (<
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          $Snap.unit) $t@251@01))
      (=
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
          ($Snap.first (MWSF_apply $t@302@01 ($Snap.combine
            $t@303@01
            ($Snap.first $t@297@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) $t@251@01 (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@426@01
          $Snap.unit) ret@398@01))
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@297@01))))))))
; [exec]
; assert true
; [exec]
; exhale acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) &&
;   acc(i32(_old$pre$1), write)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_0), write)
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [exec]
; label end_of_method
(pop) ; 14
(pop) ; 13
; [eval] !!__t31
; [eval] !__t31
(push) ; 13
(set-option :timeout 10)
(assert (not (not $t@423@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | $t@423@01 | dead]
; [else-branch: 139 | !($t@423@01) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 139 | !($t@423@01)]
(assert (not $t@423@01))
(pop) ; 13
(pop) ; 12
; [eval] !(__t18 && __t18)
; [eval] __t18 && __t18
(push) ; 12
; [then-branch: 140 | False | live]
; [else-branch: 140 | True | live]
(push) ; 13
; [then-branch: 140 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 140 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
; [then-branch: 141 | False | dead]
; [else-branch: 141 | True | live]
(push) ; 12
; [else-branch: 141 | True]
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !__t9
; [then-branch: 142 | False | dead]
; [else-branch: 142 | True | live]
(push) ; 8
; [else-branch: 142 | True]
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 121 | _63@314@01 == 2]
(assert (= _63@314@01 2))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 92 | _63@314@01 == 0]
(assert (= _63@314@01 0))
(pop) ; 6
(pop) ; 5
; [eval] !(__t7 && (__t8 && __t8))
; [eval] __t7 && (__t8 && __t8)
(push) ; 5
; [then-branch: 143 | False | live]
; [else-branch: 143 | True | live]
(push) ; 6
; [then-branch: 143 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 143 | True]
(push) ; 7
; [then-branch: 144 | False | live]
; [else-branch: 144 | True | live]
(push) ; 8
; [then-branch: 144 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 144 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [then-branch: 145 | False | dead]
; [else-branch: 145 | True | live]
(push) ; 5
; [else-branch: 145 | True]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(val_bool@175@01)]
(assert (not val_bool@175@01))
(pop) ; 4
; [eval] !__t24
(push) ; 4
(set-option :timeout 10)
(assert (not val_bool@175@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not val_bool@175@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | !(val_bool@175@01) | live]
; [else-branch: 146 | val_bool@175@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 146 | !(val_bool@175@01)]
(assert (not val_bool@175@01))
; [exec]
; label l5
; [exec]
; label bb4
; [exec]
; __t23 := true
; [exec]
; _9 := builtin$havoc_ref()
(declare-const ret@436@01 $Ref)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(tuple0$(_9), write)
(declare-const $t@437@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _75 := _6
; [exec]
; label l49
; [exec]
; _0 := _75
; [exec]
; label l50
; [exec]
; label return
; [exec]
; _old$pre$0 := _1.val_ref
(declare-const _old$pre$0@438@01 $Ref)
(assert (= _old$pre$0@438@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
; [exec]
; _old$pre$1 := _2.val_ref
(declare-const _old$pre$1@439@01 $Ref)
(assert (=
  _old$pre$1@439@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))))
; [exec]
; assert m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==
;   old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)) &&
;   ((forall k: Int ::
;     { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;     k) }
;     { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k)) }
;     0 <= k &&
;     k <
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==>
;     m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;     k) ==
;     old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref,
;     k))) &&
;   ((unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) ==
;   old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
;   ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==>
;   (unfolding acc(i32(_old$pre$1), write) in
;     (forall k: Int ::
;       { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;       k) }
;       0 <= k &&
;       k <
;       m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==>
;       !(_old$pre$1.val_int ==
;       m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;       k))))) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==>
;   0 <=
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) &&
;   (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) <
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) &&
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0,
;   m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)) ==
;   (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@164@01
  $Snap.unit) _old$pre$0@438@01))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  $t@164@01
  $Snap.unit) _old$pre$0@438@01))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_1.val_ref)
(set-option :timeout 0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) _old$pre$0@438@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    $t@164@01
    $Snap.unit) _old$pre$0@438@01)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) } { old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)))
(declare-const k@440@01 Int)
(push) ; 5
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] 0 <= k
(push) ; 6
; [then-branch: 147 | !(0 <= k@440@01) | live]
; [else-branch: 147 | 0 <= k@440@01 | live]
(push) ; 7
; [then-branch: 147 | !(0 <= k@440@01)]
(assert (not (<= 0 k@440@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 147 | 0 <= k@440@01]
(assert (<= 0 k@440@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@440@01) (not (<= 0 k@440@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 148 | 0 <= k@440@01 && k@440@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01) | live]
; [else-branch: 148 | !(0 <= k@440@01 && k@440@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01)) | live]
(push) ; 7
; [then-branch: 148 | 0 <= k@440@01 && k@440@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01)]
(assert (and
  (<= 0 k@440@01)
  (<
    k@440@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@164@01
      $Snap.unit) _old$pre$0@438@01))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) == old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 9
(assert (not (<= k@440@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= k@440@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (<= k@440@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)))
; [eval] old[pre](m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_1.val_ref, k)
(push) ; 8
; [eval] read$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 9
; [eval] read$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  k@440@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  k@440@01
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)))))
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@149@01))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (<
    k@440@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 148 | !(0 <= k@440@01 && k@440@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01))]
(assert (not
  (and
    (<= 0 k@440@01)
    (<
      k@440@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@440@01)
    (<
      k@440@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01)))
  (and
    (<= 0 k@440@01)
    (<
      k@440@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01))
    (<= k@440@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
    (<
      k@440@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      ($Snap.first ($Snap.second $t@149@01))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@440@01)
      (<
        k@440@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) _old$pre$0@438@01))))
  (and
    (<= 0 k@440@01)
    (<
      k@440@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01)))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@440@01 Int)) (!
  (and
    (or (<= 0 k@440@01) (not (<= 0 k@440@01)))
    (=>
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01))
        (<= k@440@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01)))
    (or
      (not
        (and
          (<= 0 k@440@01)
          (<
            k@440@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) _old$pre$0@438@01))))
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064-aux|)))
(assert (forall ((k@440@01 Int)) (!
  (and
    (or (<= 0 k@440@01) (not (<= 0 k@440@01)))
    (=>
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01))
        (<= k@440@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            ($Snap.first ($Snap.second $t@149@01))
            $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01))))
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01)))
    (or
      (not
        (and
          (<= 0 k@440@01)
          (<
            k@440@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) _old$pre$0@438@01))))
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064-aux|)))
(assert (forall ((k@440@01 Int)) (!
  (and
    (=>
      (<= 0 k@440@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01))
    (=>
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (and
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          ($Snap.first ($Snap.second $t@149@01))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064_precondition|)))
(push) ; 5
(assert (not (forall ((k@440@01 Int)) (!
  (=>
    (and
      (and
        (=>
          (<= 0 k@440@01)
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$%precondition ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01))
        (=>
          (and
            (<= 0 k@440@01)
            (<
              k@440@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) _old$pre$0@438@01)))
          (and
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              $t@164@01
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              ($Snap.first ($Snap.second $t@149@01))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))))
      (and
        (<= 0 k@440@01)
        (<
          k@440@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01))))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((k@440@01 Int)) (!
  (=>
    (and
      (<= 0 k@440@01)
      (<
        k@440@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) _old$pre$0@438@01)))
    (=
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01)
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
        ($Snap.first ($Snap.second $t@149@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01)))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@440@01))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) k@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@414@1989@1064|)))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) == old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
  _old$pre$1@439@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@149@01))) _old$pre$1@439@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@149@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@165@01 _old$pre$1@439@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= ret@160@01 _old$pre$1@439@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= _old$pre$1@439@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
  $Snap.unit))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
(assert (<=
  (- 0 2147483648)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
  $Snap.unit))
; [eval] self.val_int <= 2147483647
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
  2147483647))
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@149@01))) _old$pre$1@439@01)
  (=
    ($Snap.second ($Snap.second ($Snap.second $t@149@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
  (not (= _old$pre$1@439@01 $Ref.null))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))))
  (=
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    $Snap.unit)
  (<=
    (- 0 2147483648)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
  (=
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    $Snap.unit)
  (<=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
    2147483647)))
; [eval] old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))
; [eval] (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)
(set-option :timeout 0)
(push) ; 5
(assert (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@149@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
    $Ref.null)))
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
(pop) ; 5
; Joined path conditions
(assert (and
  (i32%trigger ($Snap.second ($Snap.second ($Snap.second $t@149@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
      $Ref.null))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==> (unfolding acc(i32(_old$pre$1), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> !(_old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 149 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01) | live]
; [else-branch: 149 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 149 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01)]
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
; [eval] (unfolding acc(i32(_old$pre$1), write) in (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> !(_old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
  _old$pre$1@439@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@165@01 _old$pre$1@439@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= ret@160@01 _old$pre$1@439@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] -2147483648 <= self.val_int
; [eval] -2147483648
; [eval] self.val_int <= 2147483647
; [eval] (forall k: Int :: { m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k) } 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> !(_old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k)))
(declare-const k@441@01 Int)
(set-option :timeout 0)
(push) ; 8
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) ==> !(_old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k))
; [eval] 0 <= k && k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] 0 <= k
(push) ; 9
; [then-branch: 150 | !(0 <= k@441@01) | live]
; [else-branch: 150 | 0 <= k@441@01 | live]
(push) ; 10
; [then-branch: 150 | !(0 <= k@441@01)]
(assert (not (<= 0 k@441@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 150 | 0 <= k@441@01]
(assert (<= 0 k@441@01))
; [eval] k < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 k@441@01) (not (<= 0 k@441@01))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 151 | 0 <= k@441@01 && k@441@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01) | live]
; [else-branch: 151 | !(0 <= k@441@01 && k@441@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01)) | live]
(push) ; 10
; [then-branch: 151 | 0 <= k@441@01 && k@441@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01)]
(assert (and
  (<= 0 k@441@01)
  (<
    k@441@01
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
      $t@164@01
      $Snap.unit) _old$pre$0@438@01))))
; [eval] !(_old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k))
; [eval] _old$pre$1.val_int == m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, k)
(push) ; 11
; [eval] read$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= _pure_2
; [eval] _pure_2 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_pure_1)
(set-option :timeout 0)
(push) ; 12
; [eval] read$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (=>
  (< $Perm.No (read$ $Snap.unit))
  (<
    $Perm.No
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
; [eval] 0 <= _pure_2
; [eval] _pure_2 <= 18446744073709551615
(set-option :timeout 0)
(push) ; 12
(assert (not (<= k@441@01 18446744073709551615)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= k@441@01 18446744073709551615))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
  $t@164@01
  ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (<= k@441@01 18446744073709551615)
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 151 | !(0 <= k@441@01 && k@441@01 < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(($t@164@01, _), _old$pre$0@438@01))]
(assert (not
  (and
    (<= 0 k@441@01)
    (<
      k@441@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (and
    (<= 0 k@441@01)
    (<
      k@441@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01)))
  (and
    (<= 0 k@441@01)
    (<
      k@441@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01))
    (<= k@441@01 18446744073709551615)
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 k@441@01)
      (<
        k@441@01
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
          $t@164@01
          $Snap.unit) _old$pre$0@438@01))))
  (and
    (<= 0 k@441@01)
    (<
      k@441@01
      (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
        $t@164@01
        $Snap.unit) _old$pre$0@438@01)))))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@441@01 Int)) (!
  (and
    (or (<= 0 k@441@01) (not (<= 0 k@441@01)))
    (=>
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01))
        (<= k@441@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01)))
    (or
      (not
        (and
          (<= 0 k@441@01)
          (<
            k@441@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) _old$pre$0@438@01))))
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@1447@1989@1904-aux|)))
(pop) ; 7
; Joined path conditions
(assert (forall ((k@441@01 Int)) (!
  (and
    (or (<= 0 k@441@01) (not (<= 0 k@441@01)))
    (=>
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01))
        (<= k@441@01 18446744073709551615)
        (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
          $t@164@01
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01)))
    (or
      (not
        (and
          (<= 0 k@441@01)
          (<
            k@441@01
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
              $t@164@01
              $Snap.unit) _old$pre$0@438@01))))
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))))
  :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
    $t@164@01
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@1447@1989@1904-aux|)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)
  (and
    (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
      $t@168@01
      $Snap.unit) ret@167@01)
    (forall ((k@441@01 Int)) (!
      (and
        (or (<= 0 k@441@01) (not (<= 0 k@441@01)))
        (=>
          (and
            (<= 0 k@441@01)
            (<
              k@441@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) _old$pre$0@438@01)))
          (and
            (<= 0 k@441@01)
            (<
              k@441@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) _old$pre$0@438@01))
            (<= k@441@01 18446744073709551615)
            (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%precondition ($Snap.combine
              $t@164@01
              ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01)))
        (or
          (not
            (and
              (<= 0 k@441@01)
              (<
                k@441@01
                (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                  $t@164@01
                  $Snap.unit) _old$pre$0@438@01))))
          (and
            (<= 0 k@441@01)
            (<
              k@441@01
              (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
                $t@164@01
                $Snap.unit) _old$pre$0@438@01)))))
      :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
        $t@164@01
        ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@1447@1989@1904-aux|)))))
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(push) ; 5
(assert (not (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)
  (forall ((k@441@01 Int)) (!
    (=>
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (not
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            $t@164@01
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@1447@1989@1904|)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_none$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)
  (forall ((k@441@01 Int)) (!
    (=>
      (and
        (<= 0 k@441@01)
        (<
          k@441@01
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$ ($Snap.combine
            $t@164@01
            $Snap.unit) _old$pre$0@438@01)))
      (not
        (=
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@149@01)))))
          (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$ ($Snap.combine
            $t@164@01
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))))
    :pattern ((m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$%limited ($Snap.combine
      $t@164@01
      ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) _old$pre$0@438@01 k@441@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/prusti/Binary_search.rs.vpr@1989@1447@1989@1904|))))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0) ==> 0 <= m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) && (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0) < m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$len$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$(_old$pre$0) && m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$1$closesqu$$$lookup$opensqu$0$closesqu$__$TY$__m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_$$int$$$int$(_old$pre$0, m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$peek$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$int$(_0)) == (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))
; [eval] m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(_0)
(push) ; 5
; [eval] read$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or (= (read$ $Snap.unit) $Perm.No) (< $Perm.No (read$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (read$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(pop) ; 5
; Joined path conditions
(assert (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$%precondition ($Snap.combine
  $t@168@01
  $Snap.unit) ret@167@01))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01) | dead]
; [else-branch: 152 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 152 | !(m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$(($t@168@01, _), ret@167@01))]
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (m_Binary_search$$$opencur$$opencur$impl$closecur$$closecur$$opensqu$3$closesqu$$$is_some$opensqu$0$closesqu$__$TY$__m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_$$bool$ ($Snap.combine
    $t@168@01
    $Snap.unit) ret@167@01)))
; [exec]
; assert true
; [exec]
; exhale acc(m_Binary_search$$VecWrapperI32$opensqu$0$closesqu$$_beg_$_end_(_old$pre$0), write) &&
;   acc(i32(_old$pre$1), write)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@149@01)) _old$pre$0@438@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (+
          (-
            $Perm.Write
            ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
          (read$ $Snap.unit))
        ($Perm.min
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          (read$ $Snap.unit)))
      (- $Perm.Write (read$ $Snap.unit)))
    ($Perm.min
      (+
        (-
          (+
            (-
              $Perm.Write
              ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
            (read$ $Snap.unit))
          ($Perm.min
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            (read$ $Snap.unit)))
        (- $Perm.Write (read$ $Snap.unit)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            (+
              (-
                $Perm.Write
                ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
              (read$ $Snap.unit))
            ($Perm.min
              (+
                (-
                  $Perm.Write
                  ($Perm.min $Perm.Write (- $Perm.Write (read$ $Snap.unit))))
                (read$ $Snap.unit))
              (read$ $Snap.unit)))
          (- $Perm.Write (read$ $Snap.unit)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@149@01))))
  _old$pre$1@439@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(m_Binary_search$$UsizeOption$opensqu$0$closesqu$$_beg_$_end_(_0), write)
; [exec]
; label end_of_method
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 146 | val_bool@175@01]
(assert val_bool@175@01)
(pop) ; 4
(pop) ; 3
; [eval] !(__t0 && __t0)
; [eval] __t0 && __t0
(push) ; 3
; [then-branch: 153 | False | live]
; [else-branch: 153 | True | live]
(push) ; 4
; [then-branch: 153 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 153 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [then-branch: 154 | False | dead]
; [else-branch: 154 | True | live]
(push) ; 3
; [else-branch: 154 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- builtin$havoc_int ----------
(declare-const ret@442@01 Int)
(declare-const ret@443@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- builtin$havoc_bool ----------
(declare-const ret@444@01 Bool)
(declare-const ret@445@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- builtin$havoc_ref ----------
(declare-const ret@446@01 $Ref)
(declare-const ret@447@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
