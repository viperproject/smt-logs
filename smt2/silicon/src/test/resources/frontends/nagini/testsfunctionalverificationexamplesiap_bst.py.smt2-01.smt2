(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-27 01:47:57
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const TreeNode<PyType> PyType)
(declare-const BinarySearchTree<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun object___bool__ ($Snap $Ref) Bool)
(declare-fun object___bool__%limited ($Snap $Ref) Bool)
(declare-fun object___bool__%stateless ($Ref) Bool)
(declare-fun object___bool__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun _asserting ($Snap $Ref Bool) $Ref)
(declare-fun _asserting%limited ($Snap $Ref Bool) $Ref)
(declare-fun _asserting%stateless ($Ref Bool) Bool)
(declare-fun _asserting%precondition ($Snap $Ref Bool) Bool)
(declare-fun TreeNode_isRoot ($Snap $Ref) $Ref)
(declare-fun TreeNode_isRoot%limited ($Snap $Ref) $Ref)
(declare-fun TreeNode_isRoot%stateless ($Ref) Bool)
(declare-fun TreeNode_isRoot%precondition ($Snap $Ref) Bool)
(declare-fun TreeNode_hasBothChildren ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasBothChildren%limited ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasBothChildren%stateless ($Ref) Bool)
(declare-fun TreeNode_hasBothChildren%precondition ($Snap $Ref) Bool)
(declare-fun sorted ($Snap $Ref $Ref $Ref) $Ref)
(declare-fun sorted%limited ($Snap $Ref $Ref $Ref) $Ref)
(declare-fun sorted%stateless ($Ref $Ref $Ref) Bool)
(declare-fun sorted%precondition ($Snap $Ref $Ref $Ref) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun TreeNode_hasLeftChild ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasLeftChild%limited ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasLeftChild%stateless ($Ref) Bool)
(declare-fun TreeNode_hasLeftChild%precondition ($Snap $Ref) Bool)
(declare-fun TreeNode_hasAnyChildren ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasAnyChildren%limited ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasAnyChildren%stateless ($Ref) Bool)
(declare-fun TreeNode_hasAnyChildren%precondition ($Snap $Ref) Bool)
(declare-fun TreeNode_isLeaf ($Snap $Ref) $Ref)
(declare-fun TreeNode_isLeaf%limited ($Snap $Ref) $Ref)
(declare-fun TreeNode_isLeaf%stateless ($Ref) Bool)
(declare-fun TreeNode_isLeaf%precondition ($Snap $Ref) Bool)
(declare-fun TreeNode_hasRightChild ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasRightChild%limited ($Snap $Ref) $Ref)
(declare-fun TreeNode_hasRightChild%stateless ($Ref) Bool)
(declare-fun TreeNode_hasRightChild%precondition ($Snap $Ref) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___mul__ ($Snap Int Int) Int)
(declare-fun int___mul__%limited ($Snap Int Int) Int)
(declare-fun int___mul__%stateless (Int Int) Bool)
(declare-fun int___mul__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun mytree ($Snap) $Ref)
(declare-fun mytree%limited ($Snap) $Ref)
(declare-const mytree%stateless Bool)
(declare-fun mytree%precondition ($Snap) Bool)
(declare-fun getParent ($Snap $Ref) $Ref)
(declare-fun getParent%limited ($Snap $Ref) $Ref)
(declare-fun getParent%stateless ($Ref) Bool)
(declare-fun getParent%precondition ($Snap $Ref) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun tree%trigger ($Snap $Ref) Bool)
(declare-fun bst%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> TreeNode<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> BinarySearchTree<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as TreeNode<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as TreeNode<PyType>  PyType))
    (as TreeNode<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as BinarySearchTree<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as BinarySearchTree<PyType>  PyType))
    (as BinarySearchTree<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@68@00 ($Snap $Ref) PyType)
(declare-fun joined_unfolding@75@00 ($Snap $Ref) Bool)
(declare-fun joined_unfolding@77@00 ($Snap $Ref) $Ref)
(declare-fun joined_unfolding@79@00 ($Snap $Ref $Ref $Ref) Bool)
(declare-fun joined_unfolding@82@00 ($Snap $Ref) $Ref)
(declare-fun joined_unfolding@84@00 ($Snap $Ref) Bool)
(declare-fun joined_unfolding@89@00 ($Snap $Ref) $Ref)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-2450|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-2451|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-2452|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2453|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2508|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2509|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (object___bool__%limited s@$ self@4@00) (object___bool__ s@$ self@4@00))
  :pattern ((object___bool__ s@$ self@4@00))
  :qid |quant-u-2454|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (object___bool__%stateless self@4@00)
  :pattern ((object___bool__%limited s@$ self@4@00))
  :qid |quant-u-2455|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (object___bool__%limited s@$ self@4@00))) (=>
    (object___bool__%precondition s@$ self@4@00)
    (and
      (=> (= self@4@00 $Ref.null) (not result@5@00))
      (=>
        (not (= self@4@00 $Ref.null))
        (let ((t (typeof<PyType> self@4@00))) (=>
          (and
            (not (issubtype<Bool> t (list<PyType> (list_arg<PyType> t 0))))
            (and
              (not (issubtype<Bool> t (set<PyType> (set_arg<PyType> t 0))))
              (not
                (issubtype<Bool> t (dict<PyType> (dict_arg<PyType> t 0) (dict_arg<PyType> t 1))))))
          result@5@00))))))
  :pattern ((object___bool__%limited s@$ self@4@00))
  :qid |quant-u-2510|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (object___bool__%limited s@$ self@4@00))) true)
  :pattern ((object___bool__%limited s@$ self@4@00))
  :qid |quant-u-2511|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (object___bool__%limited s@$ self@4@00))) (=>
    (and
      (object___bool__%precondition s@$ self@4@00)
      (not (= self@4@00 $Ref.null)))
    (let ((t (typeof<PyType> self@4@00))) true)))
  :pattern ((object___bool__%limited s@$ self@4@00))
  :qid |quant-u-2512|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@6@00)
    (__prim__bool___box__ s@$ prim@6@00))
  :pattern ((__prim__bool___box__ s@$ prim@6@00))
  :qid |quant-u-2456|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (__prim__bool___box__%stateless prim@6@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2457|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (and
      (= (typeof<PyType> result@7@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@7@00) prim@6@00)
      (= (int___unbox__%limited $Snap.unit result@7@00) (ite prim@6@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2513|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2514|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (bool___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2515|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (int___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2516|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@8@00) (int___unbox__ s@$ box@8@00))
  :pattern ((int___unbox__ s@$ box@8@00))
  :qid |quant-u-2458|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (int___unbox__%stateless box@8@00)
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2459|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (int___unbox__%precondition s@$ box@8@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@9@00) box@8@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@9@00 0)))
          box@8@00)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2517|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (not (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@9@00)))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2518|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@9@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2519|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@10@00) (bool___unbox__ s@$ box@10@00))
  :pattern ((bool___unbox__ s@$ box@10@00))
  :qid |quant-u-2460|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (bool___unbox__%stateless box@10@00)
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-2461|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (=>
    (bool___unbox__%precondition s@$ box@10@00)
    (= (__prim__bool___box__%limited $Snap.unit result@11@00) box@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-2520|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (=>
    (bool___unbox__%precondition s@$ box@10@00)
    (__prim__bool___box__%precondition $Snap.unit result@11@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-2521|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  :qid |quant-u-2462|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-2463|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (and
      (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-2522|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-2523|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (int___unbox__%precondition $Snap.unit result@13@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-2524|)))
(assert (forall ((s@$ $Snap) (self@14@00 Int) (other@15@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@14@00 other@15@00)
    (int___gt__ s@$ self@14@00 other@15@00))
  :pattern ((int___gt__ s@$ self@14@00 other@15@00))
  :qid |quant-u-2464|)))
(assert (forall ((s@$ $Snap) (self@14@00 Int) (other@15@00 Int)) (!
  (int___gt__%stateless self@14@00 other@15@00)
  :pattern ((int___gt__%limited s@$ self@14@00 other@15@00))
  :qid |quant-u-2465|)))
(assert (forall ((s@$ $Snap) (self@14@00 Int) (other@15@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@14@00 other@15@00)
    (= (int___gt__ s@$ self@14@00 other@15@00) (> self@14@00 other@15@00)))
  :pattern ((int___gt__ s@$ self@14@00 other@15@00))
  :qid |quant-u-2525|)))
(assert (forall ((s@$ $Snap) (self@14@00 Int) (other@15@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@14@00 other@15@00))
  :qid |quant-u-2526|)))
(assert (forall ((s@$ $Snap) (self@17@00 Int) (other@18@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@17@00 other@18@00)
    (int___lt__ s@$ self@17@00 other@18@00))
  :pattern ((int___lt__ s@$ self@17@00 other@18@00))
  :qid |quant-u-2466|)))
(assert (forall ((s@$ $Snap) (self@17@00 Int) (other@18@00 Int)) (!
  (int___lt__%stateless self@17@00 other@18@00)
  :pattern ((int___lt__%limited s@$ self@17@00 other@18@00))
  :qid |quant-u-2467|)))
(assert (forall ((s@$ $Snap) (self@17@00 Int) (other@18@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@17@00 other@18@00)
    (= (int___lt__ s@$ self@17@00 other@18@00) (< self@17@00 other@18@00)))
  :pattern ((int___lt__ s@$ self@17@00 other@18@00))
  :qid |quant-u-2527|)))
(assert (forall ((s@$ $Snap) (self@17@00 Int) (other@18@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@17@00 other@18@00))
  :qid |quant-u-2528|)))
(assert (forall ((s@$ $Snap) (id@20@00 Int)) (!
  (= (_isDefined%limited s@$ id@20@00) (_isDefined s@$ id@20@00))
  :pattern ((_isDefined s@$ id@20@00))
  :qid |quant-u-2468|)))
(assert (forall ((s@$ $Snap) (id@20@00 Int)) (!
  (_isDefined%stateless id@20@00)
  :pattern ((_isDefined%limited s@$ id@20@00))
  :qid |quant-u-2469|)))
(assert (forall ((s@$ $Snap) (r@22@00 $Ref)) (!
  (= (Level%limited s@$ r@22@00) (Level s@$ r@22@00))
  :pattern ((Level s@$ r@22@00))
  :qid |quant-u-2470|)))
(assert (forall ((s@$ $Snap) (r@22@00 $Ref)) (!
  (Level%stateless r@22@00)
  :pattern ((Level%limited s@$ r@22@00))
  :qid |quant-u-2471|)))
(assert (forall ((s@$ $Snap) (len@24@00 Int) (value@25@00 Int)) (!
  (=
    (str___create__%limited s@$ len@24@00 value@25@00)
    (str___create__ s@$ len@24@00 value@25@00))
  :pattern ((str___create__ s@$ len@24@00 value@25@00))
  :qid |quant-u-2472|)))
(assert (forall ((s@$ $Snap) (len@24@00 Int) (value@25@00 Int)) (!
  (str___create__%stateless len@24@00 value@25@00)
  :pattern ((str___create__%limited s@$ len@24@00 value@25@00))
  :qid |quant-u-2473|)))
(assert (forall ((s@$ $Snap) (len@24@00 Int) (value@25@00 Int)) (!
  (let ((result@26@00 (str___create__%limited s@$ len@24@00 value@25@00))) (=>
    (str___create__%precondition s@$ len@24@00 value@25@00)
    (and
      (= (str___len__ $Snap.unit result@26@00) len@24@00)
      (= (str___val__ $Snap.unit result@26@00) value@25@00)
      (= (typeof<PyType> result@26@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@24@00 value@25@00))
  :qid |quant-u-2529|)))
(assert (forall ((s@$ $Snap) (len@24@00 Int) (value@25@00 Int)) (!
  (let ((result@26@00 (str___create__%limited s@$ len@24@00 value@25@00))) (=>
    (str___create__%precondition s@$ len@24@00 value@25@00)
    (str___len__%precondition $Snap.unit result@26@00)))
  :pattern ((str___create__%limited s@$ len@24@00 value@25@00))
  :qid |quant-u-2530|)))
(assert (forall ((s@$ $Snap) (len@24@00 Int) (value@25@00 Int)) (!
  (let ((result@26@00 (str___create__%limited s@$ len@24@00 value@25@00))) (=>
    (str___create__%precondition s@$ len@24@00 value@25@00)
    (str___val__%precondition $Snap.unit result@26@00)))
  :pattern ((str___create__%limited s@$ len@24@00 value@25@00))
  :qid |quant-u-2531|)))
(assert (forall ((s@$ $Snap) (len@24@00 Int) (value@25@00 Int)) (!
  (let ((result@26@00 (str___create__%limited s@$ len@24@00 value@25@00))) true)
  :pattern ((str___create__%limited s@$ len@24@00 value@25@00))
  :qid |quant-u-2532|)))
(assert (forall ((s@$ $Snap) (val@27@00 $Ref) (ass@28@00 Bool)) (!
  (=
    (_asserting%limited s@$ val@27@00 ass@28@00)
    (_asserting s@$ val@27@00 ass@28@00))
  :pattern ((_asserting s@$ val@27@00 ass@28@00))
  :qid |quant-u-2474|)))
(assert (forall ((s@$ $Snap) (val@27@00 $Ref) (ass@28@00 Bool)) (!
  (_asserting%stateless val@27@00 ass@28@00)
  :pattern ((_asserting%limited s@$ val@27@00 ass@28@00))
  :qid |quant-u-2475|)))
(assert (forall ((s@$ $Snap) (val@27@00 $Ref) (ass@28@00 Bool)) (!
  (=>
    (_asserting%precondition s@$ val@27@00 ass@28@00)
    (= (_asserting s@$ val@27@00 ass@28@00) val@27@00))
  :pattern ((_asserting s@$ val@27@00 ass@28@00))
  :qid |quant-u-2533|)))
(assert (forall ((s@$ $Snap) (val@27@00 $Ref) (ass@28@00 Bool)) (!
  true
  :pattern ((_asserting s@$ val@27@00 ass@28@00))
  :qid |quant-u-2534|)))
(assert (forall ((s@$ $Snap) (self_1@30@00 $Ref)) (!
  (=
    (TreeNode_isRoot%limited s@$ self_1@30@00)
    (TreeNode_isRoot s@$ self_1@30@00))
  :pattern ((TreeNode_isRoot s@$ self_1@30@00))
  :qid |quant-u-2476|)))
(assert (forall ((s@$ $Snap) (self_1@30@00 $Ref)) (!
  (TreeNode_isRoot%stateless self_1@30@00)
  :pattern ((TreeNode_isRoot%limited s@$ self_1@30@00))
  :qid |quant-u-2477|)))
(assert (forall ((s@$ $Snap) (self_1@30@00 $Ref)) (!
  (let ((result@31@00 (TreeNode_isRoot%limited s@$ self_1@30@00))) (=>
    (TreeNode_isRoot%precondition s@$ self_1@30@00)
    (issubtype<Bool> (typeof<PyType> result@31@00) (as bool<PyType>  PyType))))
  :pattern ((TreeNode_isRoot%limited s@$ self_1@30@00))
  :qid |quant-u-2535|)))
(assert (forall ((s@$ $Snap) (self_1@30@00 $Ref)) (!
  (let ((result@31@00 (TreeNode_isRoot%limited s@$ self_1@30@00))) true)
  :pattern ((TreeNode_isRoot%limited s@$ self_1@30@00))
  :qid |quant-u-2536|)))
(assert (forall ((s@$ $Snap) (self_1@30@00 $Ref)) (!
  (=>
    (TreeNode_isRoot%precondition s@$ self_1@30@00)
    (=
      (TreeNode_isRoot s@$ self_1@30@00)
      (__prim__bool___box__ $Snap.unit (not
        (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  :pattern ((TreeNode_isRoot s@$ self_1@30@00))
  :pattern ((TreeNode_isRoot%stateless self_1@30@00) (tree%trigger ($Snap.second ($Snap.second s@$)) self_1@30@00))
  :qid |quant-u-2537|)))
(assert (forall ((s@$ $Snap) (self_1@30@00 $Ref)) (!
  (=>
    (TreeNode_isRoot%precondition s@$ self_1@30@00)
    (and
      (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
      (__prim__bool___box__%precondition $Snap.unit (not
        (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))
  :pattern ((TreeNode_isRoot s@$ self_1@30@00))
  :qid |quant-u-2538|)))
(assert (forall ((s@$ $Snap) (self_4@32@00 $Ref)) (!
  (=
    (TreeNode_hasBothChildren%limited s@$ self_4@32@00)
    (TreeNode_hasBothChildren s@$ self_4@32@00))
  :pattern ((TreeNode_hasBothChildren s@$ self_4@32@00))
  :qid |quant-u-2478|)))
(assert (forall ((s@$ $Snap) (self_4@32@00 $Ref)) (!
  (TreeNode_hasBothChildren%stateless self_4@32@00)
  :pattern ((TreeNode_hasBothChildren%limited s@$ self_4@32@00))
  :qid |quant-u-2479|)))
(assert (forall ((s@$ $Snap) (self_4@32@00 $Ref)) (!
  (let ((result@33@00 (TreeNode_hasBothChildren%limited s@$ self_4@32@00))) (=>
    (TreeNode_hasBothChildren%precondition s@$ self_4@32@00)
    (or
      (= result@33@00 $Ref.null)
      (issubtype<Bool> (typeof<PyType> result@33@00) (as TreeNode<PyType>  PyType)))))
  :pattern ((TreeNode_hasBothChildren%limited s@$ self_4@32@00))
  :qid |quant-u-2539|)))
(assert (forall ((s@$ $Snap) (self_4@32@00 $Ref)) (!
  (let ((result@33@00 (TreeNode_hasBothChildren%limited s@$ self_4@32@00))) true)
  :pattern ((TreeNode_hasBothChildren%limited s@$ self_4@32@00))
  :qid |quant-u-2540|)))
(assert (forall ((s@$ $Snap) (self_4@32@00 $Ref)) (!
  (=>
    (TreeNode_hasBothChildren%precondition s@$ self_4@32@00)
    (=
      (TreeNode_hasBothChildren s@$ self_4@32@00)
      (ite
        (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  :pattern ((TreeNode_hasBothChildren s@$ self_4@32@00))
  :pattern ((TreeNode_hasBothChildren%stateless self_4@32@00) (tree%trigger ($Snap.second ($Snap.second s@$)) self_4@32@00))
  :qid |quant-u-2541|)))
(assert (forall ((s@$ $Snap) (self_4@32@00 $Ref)) (!
  (=>
    (TreeNode_hasBothChildren%precondition s@$ self_4@32@00)
    (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  :pattern ((TreeNode_hasBothChildren s@$ self_4@32@00))
  :qid |quant-u-2542|)))
(assert (forall ((s@$ $Snap) (n_0@34@00 $Ref) (upper_0@35@00 $Ref) (lower_0@36@00 $Ref)) (!
  (=
    (sorted%limited s@$ n_0@34@00 upper_0@35@00 lower_0@36@00)
    (sorted s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :pattern ((sorted s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :qid |quant-u-2480|)))
(assert (forall ((s@$ $Snap) (n_0@34@00 $Ref) (upper_0@35@00 $Ref) (lower_0@36@00 $Ref)) (!
  (sorted%stateless n_0@34@00 upper_0@35@00 lower_0@36@00)
  :pattern ((sorted%limited s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :qid |quant-u-2481|)))
(assert (forall ((s@$ $Snap) (n_0@34@00 $Ref) (upper_0@35@00 $Ref) (lower_0@36@00 $Ref)) (!
  (let ((result@37@00 (sorted%limited s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))) (=>
    (sorted%precondition s@$ n_0@34@00 upper_0@35@00 lower_0@36@00)
    (issubtype<Bool> (typeof<PyType> result@37@00) (as bool<PyType>  PyType))))
  :pattern ((sorted%limited s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :qid |quant-u-2543|)))
(assert (forall ((s@$ $Snap) (n_0@34@00 $Ref) (upper_0@35@00 $Ref) (lower_0@36@00 $Ref)) (!
  (let ((result@37@00 (sorted%limited s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))) true)
  :pattern ((sorted%limited s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :qid |quant-u-2544|)))
(assert (forall ((s@$ $Snap) (n_0@34@00 $Ref) (upper_0@35@00 $Ref) (lower_0@36@00 $Ref)) (!
  (=>
    (sorted%precondition s@$ n_0@34@00 upper_0@35@00 lower_0@36@00)
    (=
      (sorted s@$ n_0@34@00 upper_0@35@00 lower_0@36@00)
      (__prim__bool___box__ $Snap.unit (and
        (=>
          (not (= upper_0@35@00 $Ref.null))
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit upper_0@35@00)))
        (and
          (=>
            (not (= lower_0@36@00 $Ref.null))
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit lower_0@36@00)))
          (and
            (=>
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
                  $Ref.null))
              (bool___unbox__ $Snap.unit (sorted%limited ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) lower_0@36@00)))
            (=>
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
                  $Ref.null))
              (bool___unbox__ $Snap.unit (sorted%limited ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))) upper_0@35@00 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  :pattern ((sorted s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :pattern ((sorted%stateless n_0@34@00 upper_0@35@00 lower_0@36@00) (tree%trigger ($Snap.second ($Snap.second ($Snap.second s@$))) n_0@34@00))
  :qid |quant-u-2545|)))
(assert (forall ((s@$ $Snap) (n_0@34@00 $Ref) (upper_0@35@00 $Ref) (lower_0@36@00 $Ref)) (!
  (=>
    (sorted%precondition s@$ n_0@34@00 upper_0@35@00 lower_0@36@00)
    (and
      (and
        (=>
          (not (= upper_0@35@00 $Ref.null))
          (and
            (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
            (int___unbox__%precondition $Snap.unit upper_0@35@00)
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit upper_0@35@00))))
        (=>
          (=>
            (not (= upper_0@35@00 $Ref.null))
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit upper_0@35@00)))
          (and
            (=>
              (not (= lower_0@36@00 $Ref.null))
              (and
                (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                (int___unbox__%precondition $Snap.unit lower_0@36@00)
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit lower_0@36@00))))
            (=>
              (=>
                (not (= lower_0@36@00 $Ref.null))
                (int___gt__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit lower_0@36@00)))
              (and
                (=>
                  (not
                    (=
                      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
                      $Ref.null))
                  (and
                    (sorted%precondition ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) lower_0@36@00)
                    (bool___unbox__%precondition $Snap.unit (sorted%limited ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) lower_0@36@00))))
                (=>
                  (and
                    (=>
                      (not
                        (=
                          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
                          $Ref.null))
                      (bool___unbox__ $Snap.unit (sorted%limited ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) lower_0@36@00)))
                    (not
                      (=
                        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
                        $Ref.null)))
                  (and
                    (sorted%precondition ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))) upper_0@35@00 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))
                    (bool___unbox__%precondition $Snap.unit (sorted%limited ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))) upper_0@35@00 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
      (__prim__bool___box__%precondition $Snap.unit (and
        (=>
          (not (= upper_0@35@00 $Ref.null))
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit upper_0@35@00)))
        (and
          (=>
            (not (= lower_0@36@00 $Ref.null))
            (int___gt__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))) (int___unbox__ $Snap.unit lower_0@36@00)))
          (and
            (=>
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))
                  $Ref.null))
              (bool___unbox__ $Snap.unit (sorted%limited ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))) lower_0@36@00)))
            (=>
              (not
                (=
                  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
                  $Ref.null))
              (bool___unbox__ $Snap.unit (sorted%limited ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))) upper_0@35@00 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  :pattern ((sorted s@$ n_0@34@00 upper_0@35@00 lower_0@36@00))
  :qid |quant-u-2546|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-2482|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-2483|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@39@00 id@40@00)
    (_checkDefined s@$ val@39@00 id@40@00))
  :pattern ((_checkDefined s@$ val@39@00 id@40@00))
  :qid |quant-u-2484|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  (_checkDefined%stateless val@39@00 id@40@00)
  :pattern ((_checkDefined%limited s@$ val@39@00 id@40@00))
  :qid |quant-u-2485|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@39@00 id@40@00)
    (= (_checkDefined s@$ val@39@00 id@40@00) val@39@00))
  :pattern ((_checkDefined s@$ val@39@00 id@40@00))
  :qid |quant-u-2547|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@39@00 id@40@00))
  :qid |quant-u-2548|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref)) (!
  (=
    (TreeNode_hasLeftChild%limited s@$ self@42@00)
    (TreeNode_hasLeftChild s@$ self@42@00))
  :pattern ((TreeNode_hasLeftChild s@$ self@42@00))
  :qid |quant-u-2486|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref)) (!
  (TreeNode_hasLeftChild%stateless self@42@00)
  :pattern ((TreeNode_hasLeftChild%limited s@$ self@42@00))
  :qid |quant-u-2487|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref)) (!
  (let ((result@43@00 (TreeNode_hasLeftChild%limited s@$ self@42@00))) (=>
    (TreeNode_hasLeftChild%precondition s@$ self@42@00)
    (or
      (= result@43@00 $Ref.null)
      (issubtype<Bool> (typeof<PyType> result@43@00) (as TreeNode<PyType>  PyType)))))
  :pattern ((TreeNode_hasLeftChild%limited s@$ self@42@00))
  :qid |quant-u-2549|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref)) (!
  (let ((result@43@00 (TreeNode_hasLeftChild%limited s@$ self@42@00))) true)
  :pattern ((TreeNode_hasLeftChild%limited s@$ self@42@00))
  :qid |quant-u-2550|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref)) (!
  (=>
    (TreeNode_hasLeftChild%precondition s@$ self@42@00)
    (=
      (TreeNode_hasLeftChild s@$ self@42@00)
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second s@$))))))
  :pattern ((TreeNode_hasLeftChild s@$ self@42@00))
  :qid |quant-u-2551|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref)) (!
  true
  :pattern ((TreeNode_hasLeftChild s@$ self@42@00))
  :qid |quant-u-2552|)))
(assert (forall ((s@$ $Snap) (self_3@44@00 $Ref)) (!
  (=
    (TreeNode_hasAnyChildren%limited s@$ self_3@44@00)
    (TreeNode_hasAnyChildren s@$ self_3@44@00))
  :pattern ((TreeNode_hasAnyChildren s@$ self_3@44@00))
  :qid |quant-u-2488|)))
(assert (forall ((s@$ $Snap) (self_3@44@00 $Ref)) (!
  (TreeNode_hasAnyChildren%stateless self_3@44@00)
  :pattern ((TreeNode_hasAnyChildren%limited s@$ self_3@44@00))
  :qid |quant-u-2489|)))
(assert (forall ((s@$ $Snap) (self_3@44@00 $Ref)) (!
  (let ((result@45@00 (TreeNode_hasAnyChildren%limited s@$ self_3@44@00))) (=>
    (TreeNode_hasAnyChildren%precondition s@$ self_3@44@00)
    (or
      (= result@45@00 $Ref.null)
      (issubtype<Bool> (typeof<PyType> result@45@00) (as TreeNode<PyType>  PyType)))))
  :pattern ((TreeNode_hasAnyChildren%limited s@$ self_3@44@00))
  :qid |quant-u-2553|)))
(assert (forall ((s@$ $Snap) (self_3@44@00 $Ref)) (!
  (let ((result@45@00 (TreeNode_hasAnyChildren%limited s@$ self_3@44@00))) true)
  :pattern ((TreeNode_hasAnyChildren%limited s@$ self_3@44@00))
  :qid |quant-u-2554|)))
(assert (forall ((s@$ $Snap) (self_3@44@00 $Ref)) (!
  (=>
    (TreeNode_hasAnyChildren%precondition s@$ self_3@44@00)
    (=
      (TreeNode_hasAnyChildren s@$ self_3@44@00)
      (ite
        (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
  :pattern ((TreeNode_hasAnyChildren s@$ self_3@44@00))
  :pattern ((TreeNode_hasAnyChildren%stateless self_3@44@00) (tree%trigger ($Snap.second ($Snap.second s@$)) self_3@44@00))
  :qid |quant-u-2555|)))
(assert (forall ((s@$ $Snap) (self_3@44@00 $Ref)) (!
  (=>
    (TreeNode_hasAnyChildren%precondition s@$ self_3@44@00)
    (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))
  :pattern ((TreeNode_hasAnyChildren s@$ self_3@44@00))
  :qid |quant-u-2556|)))
(assert (forall ((s@$ $Snap) (self_2@46@00 $Ref)) (!
  (=
    (TreeNode_isLeaf%limited s@$ self_2@46@00)
    (TreeNode_isLeaf s@$ self_2@46@00))
  :pattern ((TreeNode_isLeaf s@$ self_2@46@00))
  :qid |quant-u-2490|)))
(assert (forall ((s@$ $Snap) (self_2@46@00 $Ref)) (!
  (TreeNode_isLeaf%stateless self_2@46@00)
  :pattern ((TreeNode_isLeaf%limited s@$ self_2@46@00))
  :qid |quant-u-2491|)))
(assert (forall ((s@$ $Snap) (self_2@46@00 $Ref)) (!
  (let ((result@47@00 (TreeNode_isLeaf%limited s@$ self_2@46@00))) (=>
    (TreeNode_isLeaf%precondition s@$ self_2@46@00)
    (issubtype<Bool> (typeof<PyType> result@47@00) (as bool<PyType>  PyType))))
  :pattern ((TreeNode_isLeaf%limited s@$ self_2@46@00))
  :qid |quant-u-2557|)))
(assert (forall ((s@$ $Snap) (self_2@46@00 $Ref)) (!
  (let ((result@47@00 (TreeNode_isLeaf%limited s@$ self_2@46@00))) true)
  :pattern ((TreeNode_isLeaf%limited s@$ self_2@46@00))
  :qid |quant-u-2558|)))
(assert (forall ((s@$ $Snap) (self_2@46@00 $Ref)) (!
  (=>
    (TreeNode_isLeaf%precondition s@$ self_2@46@00)
    (=
      (TreeNode_isLeaf s@$ self_2@46@00)
      (__prim__bool___box__ $Snap.unit (not
        (object___bool__ $Snap.unit (ite
          (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  :pattern ((TreeNode_isLeaf s@$ self_2@46@00))
  :pattern ((TreeNode_isLeaf%stateless self_2@46@00) (tree%trigger ($Snap.second ($Snap.second s@$)) self_2@46@00))
  :qid |quant-u-2559|)))
(assert (forall ((s@$ $Snap) (self_2@46@00 $Ref)) (!
  (=>
    (TreeNode_isLeaf%precondition s@$ self_2@46@00)
    (and
      (and
        (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
        (object___bool__%precondition $Snap.unit (ite
          (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
      (__prim__bool___box__%precondition $Snap.unit (not
        (object___bool__ $Snap.unit (ite
          (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))
          ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$))))))))))))))))
  :pattern ((TreeNode_isLeaf s@$ self_2@46@00))
  :qid |quant-u-2560|)))
(assert (forall ((s@$ $Snap) (self_0@48@00 $Ref)) (!
  (=
    (TreeNode_hasRightChild%limited s@$ self_0@48@00)
    (TreeNode_hasRightChild s@$ self_0@48@00))
  :pattern ((TreeNode_hasRightChild s@$ self_0@48@00))
  :qid |quant-u-2492|)))
(assert (forall ((s@$ $Snap) (self_0@48@00 $Ref)) (!
  (TreeNode_hasRightChild%stateless self_0@48@00)
  :pattern ((TreeNode_hasRightChild%limited s@$ self_0@48@00))
  :qid |quant-u-2493|)))
(assert (forall ((s@$ $Snap) (self_0@48@00 $Ref)) (!
  (let ((result@49@00 (TreeNode_hasRightChild%limited s@$ self_0@48@00))) (=>
    (TreeNode_hasRightChild%precondition s@$ self_0@48@00)
    (or
      (= result@49@00 $Ref.null)
      (issubtype<Bool> (typeof<PyType> result@49@00) (as TreeNode<PyType>  PyType)))))
  :pattern ((TreeNode_hasRightChild%limited s@$ self_0@48@00))
  :qid |quant-u-2561|)))
(assert (forall ((s@$ $Snap) (self_0@48@00 $Ref)) (!
  (let ((result@49@00 (TreeNode_hasRightChild%limited s@$ self_0@48@00))) true)
  :pattern ((TreeNode_hasRightChild%limited s@$ self_0@48@00))
  :qid |quant-u-2562|)))
(assert (forall ((s@$ $Snap) (self_0@48@00 $Ref)) (!
  (=>
    (TreeNode_hasRightChild%precondition s@$ self_0@48@00)
    (=
      (TreeNode_hasRightChild s@$ self_0@48@00)
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second s@$))))))
  :pattern ((TreeNode_hasRightChild s@$ self_0@48@00))
  :qid |quant-u-2563|)))
(assert (forall ((s@$ $Snap) (self_0@48@00 $Ref)) (!
  true
  :pattern ((TreeNode_hasRightChild s@$ self_0@48@00))
  :qid |quant-u-2564|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@50@00 other@51@00)
    (str___eq__ s@$ self@50@00 other@51@00))
  :pattern ((str___eq__ s@$ self@50@00 other@51@00))
  :qid |quant-u-2494|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (str___eq__%stateless self@50@00 other@51@00)
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-2495|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (let ((result@52@00 (str___eq__%limited s@$ self@50@00 other@51@00))) (=>
    (str___eq__%precondition s@$ self@50@00 other@51@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@50@00)
          (str___val__ $Snap.unit other@51@00))
        result@52@00)
      (=>
        result@52@00
        (=
          (str___len__ $Snap.unit self@50@00)
          (str___len__ $Snap.unit other@51@00))))))
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-2565|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (let ((result@52@00 (str___eq__%limited s@$ self@50@00 other@51@00))) (=>
    (str___eq__%precondition s@$ self@50@00 other@51@00)
    (and
      (str___val__%precondition $Snap.unit self@50@00)
      (str___val__%precondition $Snap.unit other@51@00))))
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-2566|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (let ((result@52@00 (str___eq__%limited s@$ self@50@00 other@51@00))) (=>
    (and (str___eq__%precondition s@$ self@50@00 other@51@00) result@52@00)
    (and
      (str___len__%precondition $Snap.unit self@50@00)
      (str___len__%precondition $Snap.unit other@51@00))))
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-2567|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  (=
    (int___mul__%limited s@$ self@53@00 other@54@00)
    (int___mul__ s@$ self@53@00 other@54@00))
  :pattern ((int___mul__ s@$ self@53@00 other@54@00))
  :qid |quant-u-2496|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  (int___mul__%stateless self@53@00 other@54@00)
  :pattern ((int___mul__%limited s@$ self@53@00 other@54@00))
  :qid |quant-u-2497|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  (=>
    (int___mul__%precondition s@$ self@53@00 other@54@00)
    (= (int___mul__ s@$ self@53@00 other@54@00) (* self@53@00 other@54@00)))
  :pattern ((int___mul__ s@$ self@53@00 other@54@00))
  :qid |quant-u-2568|)))
(assert (forall ((s@$ $Snap) (self@53@00 Int) (other@54@00 Int)) (!
  true
  :pattern ((int___mul__ s@$ self@53@00 other@54@00))
  :qid |quant-u-2569|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  (=
    (int___add__%limited s@$ self@56@00 other@57@00)
    (int___add__ s@$ self@56@00 other@57@00))
  :pattern ((int___add__ s@$ self@56@00 other@57@00))
  :qid |quant-u-2498|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  (int___add__%stateless self@56@00 other@57@00)
  :pattern ((int___add__%limited s@$ self@56@00 other@57@00))
  :qid |quant-u-2499|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@56@00 other@57@00)
    (= (int___add__ s@$ self@56@00 other@57@00) (+ self@56@00 other@57@00)))
  :pattern ((int___add__ s@$ self@56@00 other@57@00))
  :qid |quant-u-2570|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@56@00 other@57@00))
  :qid |quant-u-2571|)))
(assert (forall ((s@$ $Snap)) (!
  (= (mytree%limited s@$) (mytree s@$))
  :pattern ((mytree s@$))
  :qid |quant-u-2500|)))
(assert (forall ((s@$ $Snap)) (!
  (as mytree%stateless  Bool)
  :pattern ((mytree%limited s@$))
  :qid |quant-u-2501|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@59@00 (mytree%limited s@$))) (=>
    (mytree%precondition s@$)
    (issubtype<Bool> (typeof<PyType> result@59@00) (as BinarySearchTree<PyType>  PyType))))
  :pattern ((mytree%limited s@$))
  :qid |quant-u-2572|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@59@00 (mytree%limited s@$))) true)
  :pattern ((mytree%limited s@$))
  :qid |quant-u-2573|)))
(assert (forall ((s@$ $Snap) (node@60@00 $Ref)) (!
  (= (getParent%limited s@$ node@60@00) (getParent s@$ node@60@00))
  :pattern ((getParent s@$ node@60@00))
  :qid |quant-u-2502|)))
(assert (forall ((s@$ $Snap) (node@60@00 $Ref)) (!
  (getParent%stateless node@60@00)
  :pattern ((getParent%limited s@$ node@60@00))
  :qid |quant-u-2503|)))
(assert (forall ((s@$ $Snap) (node@60@00 $Ref)) (!
  (let ((result@61@00 (getParent%limited s@$ node@60@00))) (=>
    (getParent%precondition s@$ node@60@00)
    (or
      (= result@61@00 $Ref.null)
      (issubtype<Bool> (typeof<PyType> result@61@00) (as TreeNode<PyType>  PyType)))))
  :pattern ((getParent%limited s@$ node@60@00))
  :qid |quant-u-2574|)))
(assert (forall ((s@$ $Snap) (node@60@00 $Ref)) (!
  (let ((result@61@00 (getParent%limited s@$ node@60@00))) true)
  :pattern ((getParent%limited s@$ node@60@00))
  :qid |quant-u-2575|)))
(assert (forall ((s@$ $Snap) (node@60@00 $Ref)) (!
  (=>
    (getParent%precondition s@$ node@60@00)
    (=
      (getParent s@$ node@60@00)
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))))))))))))
  :pattern ((getParent s@$ node@60@00))
  :qid |quant-u-2576|)))
(assert (forall ((s@$ $Snap) (node@60@00 $Ref)) (!
  true
  :pattern ((getParent s@$ node@60@00))
  :qid |quant-u-2577|)))
(assert (forall ((s@$ $Snap) (self@62@00 $Ref) (other@63@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@62@00 other@63@00)
    (int___eq__ s@$ self@62@00 other@63@00))
  :pattern ((int___eq__ s@$ self@62@00 other@63@00))
  :qid |quant-u-2504|)))
(assert (forall ((s@$ $Snap) (self@62@00 $Ref) (other@63@00 $Ref)) (!
  (int___eq__%stateless self@62@00 other@63@00)
  :pattern ((int___eq__%limited s@$ self@62@00 other@63@00))
  :qid |quant-u-2505|)))
(assert (forall ((s@$ $Snap) (self@62@00 $Ref) (other@63@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@62@00 other@63@00)
    (=
      (int___eq__ s@$ self@62@00 other@63@00)
      (=
        (int___unbox__ $Snap.unit self@62@00)
        (int___unbox__ $Snap.unit other@63@00))))
  :pattern ((int___eq__ s@$ self@62@00 other@63@00))
  :qid |quant-u-2578|)))
(assert (forall ((s@$ $Snap) (self@62@00 $Ref) (other@63@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@62@00 other@63@00)
    (and
      (int___unbox__%precondition $Snap.unit self@62@00)
      (int___unbox__%precondition $Snap.unit other@63@00)))
  :pattern ((int___eq__ s@$ self@62@00 other@63@00))
  :qid |quant-u-2579|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-2506|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-2507|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- print_0 ----------
(declare-const _cthread_172@0@01 $Ref)
(declare-const _caller_measures_172@1@01 Seq<Measure$>)
(declare-const _residue_172@2@01 $Perm)
(declare-const o@3@01 $Ref)
(declare-const _current_wait_level_172@4@01 $Perm)
(declare-const _cthread_172@5@01 $Ref)
(declare-const _caller_measures_172@6@01 Seq<Measure$>)
(declare-const _residue_172@7@01 $Perm)
(declare-const o@8@01 $Ref)
(declare-const _current_wait_level_172@9@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] _cthread_172 != null
(assert (not (= _cthread_172@5@01 $Ref.null)))
(assert (=
  ($Snap.second $t@10@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@01))
    ($Snap.second ($Snap.second $t@10@01)))))
(assert (= ($Snap.first ($Snap.second $t@10@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_172@5@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@10@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@10@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@10@01))) $Snap.unit))
; [eval] issubtype(typeof(o), object())
; [eval] typeof(o)
; [eval] object()
(assert (issubtype<Bool> (typeof<PyType> o@8@01) (as object<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@10@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@11@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@11@01))
    ($Snap.second ($Snap.second $t@11@01)))))
(assert (= ($Snap.first ($Snap.second $t@11@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@11@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@11@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@11@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_172@7@01 _current_wait_level_172@9@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@11@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@12@01 $Ref)
; [exec]
; var o_0: Ref
(declare-const o_0@13@01 $Ref)
; [exec]
; var _cwl_172: Perm
(declare-const _cwl_172@14@01 $Perm)
; [exec]
; var _method_measures_172: Seq[Measure$]
(declare-const _method_measures_172@15@01 Seq<Measure$>)
; [exec]
; _method_measures_172 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; o_0 := o
; [exec]
; label __end
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- TreeNode___init__ ----------
(declare-const _cthread_162@16@01 $Ref)
(declare-const _caller_measures_162@17@01 Seq<Measure$>)
(declare-const _residue_162@18@01 $Perm)
(declare-const self_5@19@01 $Ref)
(declare-const key_0@20@01 $Ref)
(declare-const val@21@01 $Ref)
(declare-const left@22@01 $Ref)
(declare-const right@23@01 $Ref)
(declare-const parent@24@01 $Ref)
(declare-const _current_wait_level_162@25@01 $Perm)
(declare-const _cthread_162@26@01 $Ref)
(declare-const _caller_measures_162@27@01 Seq<Measure$>)
(declare-const _residue_162@28@01 $Perm)
(declare-const self_5@29@01 $Ref)
(declare-const key_0@30@01 $Ref)
(declare-const val@31@01 $Ref)
(declare-const left@32@01 $Ref)
(declare-const right@33@01 $Ref)
(declare-const parent@34@01 $Ref)
(declare-const _current_wait_level_162@35@01 $Perm)
(push) ; 1
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] _cthread_162 != null
(assert (not (= _cthread_162@26@01 $Ref.null)))
(assert (=
  ($Snap.second $t@36@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@36@01))
    ($Snap.second ($Snap.second $t@36@01)))))
(assert (= ($Snap.first ($Snap.second $t@36@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_162@26@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@36@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@36@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@36@01))) $Snap.unit))
; [eval] self_5 != null
(assert (not (= self_5@29@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@36@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5), TreeNode())
; [eval] typeof(self_5)
; [eval] TreeNode()
(assert (issubtype<Bool> (typeof<PyType> self_5@29@01) (as TreeNode<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(key_0), int())
; [eval] typeof(key_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> key_0@30@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(val), str())
; [eval] typeof(val)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> val@31@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))
  $Snap.unit))
; [eval] left == null || issubtype(typeof(left), TreeNode())
; [eval] left == null
(set-option :timeout 0)
(push) ; 2
; [then-branch: 0 | left@32@01 == Null | live]
; [else-branch: 0 | left@32@01 != Null | live]
(push) ; 3
; [then-branch: 0 | left@32@01 == Null]
(assert (= left@32@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 0 | left@32@01 != Null]
(assert (not (= left@32@01 $Ref.null)))
; [eval] issubtype(typeof(left), TreeNode())
; [eval] typeof(left)
; [eval] TreeNode()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= left@32@01 $Ref.null)) (= left@32@01 $Ref.null)))
(assert (or
  (= left@32@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> left@32@01) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))
  $Snap.unit))
; [eval] right == null || issubtype(typeof(right), TreeNode())
; [eval] right == null
(push) ; 2
; [then-branch: 1 | right@33@01 == Null | live]
; [else-branch: 1 | right@33@01 != Null | live]
(push) ; 3
; [then-branch: 1 | right@33@01 == Null]
(assert (= right@33@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 1 | right@33@01 != Null]
(assert (not (= right@33@01 $Ref.null)))
; [eval] issubtype(typeof(right), TreeNode())
; [eval] typeof(right)
; [eval] TreeNode()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= right@33@01 $Ref.null)) (= right@33@01 $Ref.null)))
(assert (or
  (= right@33@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> right@33@01) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))))
  $Snap.unit))
; [eval] parent == null || issubtype(typeof(parent), TreeNode())
; [eval] parent == null
(push) ; 2
; [then-branch: 2 | parent@34@01 == Null | live]
; [else-branch: 2 | parent@34@01 != Null | live]
(push) ; 3
; [then-branch: 2 | parent@34@01 == Null]
(assert (= parent@34@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 2 | parent@34@01 != Null]
(assert (not (= parent@34@01 $Ref.null)))
; [eval] issubtype(typeof(parent), TreeNode())
; [eval] typeof(parent)
; [eval] TreeNode()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= parent@34@01 $Ref.null)) (= parent@34@01 $Ref.null)))
(assert (or
  (= parent@34@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> parent@34@01) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))))
  $Snap.unit))
; [eval] self_5 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 ($Snap.combine ($Snap.first $t@37@01) ($Snap.second $t@37@01))))
(assert (= ($Snap.first $t@37@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@37@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@37@01))
    ($Snap.second ($Snap.second $t@37@01)))))
(assert (= ($Snap.first ($Snap.second $t@37@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@37@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@37@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@37@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_162@28@01 _current_wait_level_162@35@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@37@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))
  $Snap.unit))
; [eval] self_5.TreeNode_key == key_0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))
  key_0@30@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_payload == val
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))
  val@31@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(push) ; 3
; [then-branch: 3 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))) == Null | live]
; [else-branch: 3 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))) != Null | live]
(push) ; 4
; [then-branch: 3 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 3 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == left
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))
  left@32@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(push) ; 3
; [then-branch: 4 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01))))))))))))) == Null | live]
; [else-branch: 4 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01))))))))))))) != Null | live]
(push) ; 4
; [then-branch: 4 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == right
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))
  right@33@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(push) ; 3
; [then-branch: 5 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))))))))) == Null | live]
; [else-branch: 5 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))))))))) != Null | live]
(push) ; 4
; [then-branch: 5 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@37@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == parent
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01)))))))))))))))))
  parent@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@37@01))))))))))))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@38@01 $Ref)
; [exec]
; var self_13: Ref
(declare-const self_13@39@01 $Ref)
; [exec]
; var key_6: Ref
(declare-const key_6@40@01 $Ref)
; [exec]
; var val_2: Ref
(declare-const val_2@41@01 $Ref)
; [exec]
; var left_0: Ref
(declare-const left_0@42@01 $Ref)
; [exec]
; var right_0: Ref
(declare-const right_0@43@01 $Ref)
; [exec]
; var parent_0: Ref
(declare-const parent_0@44@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@45@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@46@01 Seq<Measure$>)
; [exec]
; _method_measures_162 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_5) == TreeNode()
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] typeof(self_5) == TreeNode()
; [eval] typeof(self_5)
; [eval] TreeNode()
(assert (= (typeof<PyType> self_5@29@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_13 := self_5
; [exec]
; key_6 := key_0
; [exec]
; val_2 := val
; [exec]
; left_0 := left
; [exec]
; right_0 := right
; [exec]
; parent_0 := parent
; [eval] perm(_MaySet(self_13, 37570294749124271794790167124)) > none
; [eval] perm(_MaySet(self_13, 37570294749124271794790167124))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | True | live]
; [else-branch: 6 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6 | True]
; [exec]
; exhale acc(_MaySet(self_13, 37570294749124271794790167124), write)
; [exec]
; inhale acc(self_13.TreeNode_key, write)
(declare-const $t@48@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_13.TreeNode_key := key_6
; [eval] perm(_MaySet(self_13, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(self_13, 133428712315442505103991910045925601876))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | True | live]
; [else-branch: 7 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 7 | True]
; [exec]
; exhale acc(_MaySet(self_13, 133428712315442505103991910045925601876), write)
; [exec]
; inhale acc(self_13.TreeNode_payload, write)
(declare-const $t@49@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_13.TreeNode_payload := val_2
; [eval] perm(_MaySet(self_13, 8748119199110060322885764141532520454124116)) > none
; [eval] perm(_MaySet(self_13, 8748119199110060322885764141532520454124116))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | True | live]
; [else-branch: 8 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 8 | True]
; [exec]
; exhale acc(_MaySet(self_13, 8748119199110060322885764141532520454124116), write)
; [exec]
; inhale acc(self_13.TreeNode_leftChild, write)
(declare-const $t@50@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_13.TreeNode_leftChild := left_0
; [eval] perm(_MaySet(self_13, 2239518514972175601730513505296554308663603796)) > none
; [eval] perm(_MaySet(self_13, 2239518514972175601730513505296554308663603796))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | True | live]
; [else-branch: 9 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 9 | True]
; [exec]
; exhale acc(_MaySet(self_13, 2239518514972175601730513505296554308663603796), write)
; [exec]
; inhale acc(self_13.TreeNode_rightChild, write)
(declare-const $t@51@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_13.TreeNode_rightChild := right_0
; [eval] perm(_MaySet(self_13, 604545538089943218283080865013920340)) > none
; [eval] perm(_MaySet(self_13, 604545538089943218283080865013920340))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | True | live]
; [else-branch: 10 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 10 | True]
; [exec]
; exhale acc(_MaySet(self_13, 604545538089943218283080865013920340), write)
; [exec]
; inhale acc(self_13.TreeNode_parent, write)
(declare-const $t@52@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_13.TreeNode_parent := parent_0
; [exec]
; label __end
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
; [eval] self_5.TreeNode_key == key_0
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
; [eval] self_5.TreeNode_payload == val
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 11 | left@32@01 == Null | live]
; [else-branch: 11 | left@32@01 != Null | live]
(push) ; 9
; [then-branch: 11 | left@32@01 == Null]
(assert (= left@32@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 11 | left@32@01 != Null]
(assert (not (= left@32@01 $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] self_5.TreeNode_leftChild == left
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 12 | right@33@01 == Null | live]
; [else-branch: 12 | right@33@01 != Null | live]
(push) ; 9
; [then-branch: 12 | right@33@01 == Null]
(assert (= right@33@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 12 | right@33@01 != Null]
(assert (not (= right@33@01 $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] self_5.TreeNode_rightChild == right
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(push) ; 8
; [then-branch: 13 | parent@34@01 == Null | live]
; [else-branch: 13 | parent@34@01 != Null | live]
(push) ; 9
; [then-branch: 13 | parent@34@01 == Null]
(assert (= parent@34@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 13 | parent@34@01 != Null]
(assert (not (= parent@34@01 $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] self_5.TreeNode_parent == parent
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 7
; [eval] !(perm(_MaySet(self_13, 604545538089943218283080865013920340)) > none)
; [eval] perm(_MaySet(self_13, 604545538089943218283080865013920340)) > none
; [eval] perm(_MaySet(self_13, 604545538089943218283080865013920340))
; [then-branch: 14 | False | dead]
; [else-branch: 14 | True | live]
(push) ; 7
; [else-branch: 14 | True]
(pop) ; 7
(pop) ; 6
; [eval] !(perm(_MaySet(self_13, 2239518514972175601730513505296554308663603796)) > none)
; [eval] perm(_MaySet(self_13, 2239518514972175601730513505296554308663603796)) > none
; [eval] perm(_MaySet(self_13, 2239518514972175601730513505296554308663603796))
; [then-branch: 15 | False | dead]
; [else-branch: 15 | True | live]
(push) ; 6
; [else-branch: 15 | True]
(pop) ; 6
(pop) ; 5
; [eval] !(perm(_MaySet(self_13, 8748119199110060322885764141532520454124116)) > none)
; [eval] perm(_MaySet(self_13, 8748119199110060322885764141532520454124116)) > none
; [eval] perm(_MaySet(self_13, 8748119199110060322885764141532520454124116))
; [then-branch: 16 | False | dead]
; [else-branch: 16 | True | live]
(push) ; 5
; [else-branch: 16 | True]
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(self_13, 133428712315442505103991910045925601876)) > none)
; [eval] perm(_MaySet(self_13, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(self_13, 133428712315442505103991910045925601876))
; [then-branch: 17 | False | dead]
; [else-branch: 17 | True | live]
(push) ; 4
; [else-branch: 17 | True]
(pop) ; 4
(pop) ; 3
; [eval] !(perm(_MaySet(self_13, 37570294749124271794790167124)) > none)
; [eval] perm(_MaySet(self_13, 37570294749124271794790167124)) > none
; [eval] perm(_MaySet(self_13, 37570294749124271794790167124))
; [then-branch: 18 | False | dead]
; [else-branch: 18 | True | live]
(push) ; 3
; [else-branch: 18 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree___init__ ----------
(declare-const _cthread_163@53@01 $Ref)
(declare-const _caller_measures_163@54@01 Seq<Measure$>)
(declare-const _residue_163@55@01 $Perm)
(declare-const self_6@56@01 $Ref)
(declare-const _current_wait_level_163@57@01 $Perm)
(declare-const _cthread_163@58@01 $Ref)
(declare-const _caller_measures_163@59@01 Seq<Measure$>)
(declare-const _residue_163@60@01 $Perm)
(declare-const self_6@61@01 $Ref)
(declare-const _current_wait_level_163@62@01 $Perm)
(push) ; 1
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 ($Snap.combine ($Snap.first $t@63@01) ($Snap.second $t@63@01))))
(assert (= ($Snap.first $t@63@01) $Snap.unit))
; [eval] _cthread_163 != null
(assert (not (= _cthread_163@58@01 $Ref.null)))
(assert (=
  ($Snap.second $t@63@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@63@01))
    ($Snap.second ($Snap.second $t@63@01)))))
(assert (= ($Snap.first ($Snap.second $t@63@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_163@58@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@63@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@63@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@63@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@63@01))) $Snap.unit))
; [eval] self_6 != null
(assert (not (= self_6@61@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@63@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_6), BinarySearchTree())
; [eval] typeof(self_6)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_6@61@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))))
  $Snap.unit))
; [eval] self_6 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@64@01 $Snap)
(assert (= $t@64@01 ($Snap.combine ($Snap.first $t@64@01) ($Snap.second $t@64@01))))
(assert (= ($Snap.first $t@64@01) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@64@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@64@01))
    ($Snap.second ($Snap.second $t@64@01)))))
(assert (= ($Snap.first ($Snap.second $t@64@01)) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@64@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@64@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@64@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@64@01))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_163@60@01 _current_wait_level_163@62@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@64@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@64@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@64@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@65@01 $Ref)
; [exec]
; var self_14: Ref
(declare-const self_14@66@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@67@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@68@01 Seq<Measure$>)
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_6) == BinarySearchTree()
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] typeof(self_6) == BinarySearchTree()
; [eval] typeof(self_6)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_6@61@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_14 := self_6
; [eval] perm(_MaySet(self_14, 170170373251925421444582457427464176135250765572418)) > none
; [eval] perm(_MaySet(self_14, 170170373251925421444582457427464176135250765572418))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | True | live]
; [else-branch: 19 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 19 | True]
; [exec]
; exhale acc(_MaySet(self_14, 170170373251925421444582457427464176135250765572418), write)
; [exec]
; inhale acc(self_14.BinarySearchTree_root, write)
(declare-const $t@70@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_14.BinarySearchTree_root := null
; [eval] perm(_MaySet(self_14, 148310513873082034654315146951689972238776244529474)) > none
; [eval] perm(_MaySet(self_14, 148310513873082034654315146951689972238776244529474))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | True | live]
; [else-branch: 20 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 20 | True]
; [exec]
; exhale acc(_MaySet(self_14, 148310513873082034654315146951689972238776244529474), write)
; [exec]
; inhale acc(self_14.BinarySearchTree_size, write)
(declare-const $t@71@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_14.BinarySearchTree_size := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const BinarySearchTree_size@72@01 $Ref)
(assert (= BinarySearchTree_size@72@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; fold acc(bst(self_14), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> BinarySearchTree_size@72@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> BinarySearchTree_size@72@01) (as int<PyType>  PyType)))
; [eval] t_0.BinarySearchTree_root != null
; [then-branch: 21 | False | dead]
; [else-branch: 21 | True | live]
(push) ; 5
; [else-branch: 21 | True]
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap $Ref.null)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap BinarySearchTree_size@72@01)
          ($Snap.combine $Snap.unit $Snap.unit)))))) self_6@61@01))
; [exec]
; label __end
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(self_14, 148310513873082034654315146951689972238776244529474)) > none)
; [eval] perm(_MaySet(self_14, 148310513873082034654315146951689972238776244529474)) > none
; [eval] perm(_MaySet(self_14, 148310513873082034654315146951689972238776244529474))
; [then-branch: 22 | False | dead]
; [else-branch: 22 | True | live]
(push) ; 4
; [else-branch: 22 | True]
(pop) ; 4
(pop) ; 3
; [eval] !(perm(_MaySet(self_14, 170170373251925421444582457427464176135250765572418)) > none)
; [eval] perm(_MaySet(self_14, 170170373251925421444582457427464176135250765572418)) > none
; [eval] perm(_MaySet(self_14, 170170373251925421444582457427464176135250765572418))
; [then-branch: 23 | False | dead]
; [else-branch: 23 | True | live]
(push) ; 3
; [else-branch: 23 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree_put ----------
(declare-const _cthread_164@73@01 $Ref)
(declare-const _caller_measures_164@74@01 Seq<Measure$>)
(declare-const _residue_164@75@01 $Perm)
(declare-const self_7@76@01 $Ref)
(declare-const key_1@77@01 $Ref)
(declare-const val_0@78@01 $Ref)
(declare-const _current_wait_level_164@79@01 $Perm)
(declare-const _cthread_164@80@01 $Ref)
(declare-const _caller_measures_164@81@01 Seq<Measure$>)
(declare-const _residue_164@82@01 $Perm)
(declare-const self_7@83@01 $Ref)
(declare-const key_1@84@01 $Ref)
(declare-const val_0@85@01 $Ref)
(declare-const _current_wait_level_164@86@01 $Perm)
(push) ; 1
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
; [eval] _cthread_164 != null
(assert (not (= _cthread_164@80@01 $Ref.null)))
(assert (=
  ($Snap.second $t@87@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@87@01))
    ($Snap.second ($Snap.second $t@87@01)))))
(assert (= ($Snap.first ($Snap.second $t@87@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_164@80@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@87@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@87@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@87@01))) $Snap.unit))
; [eval] issubtype(typeof(self_7), BinarySearchTree())
; [eval] typeof(self_7)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_7@83@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@87@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
  $Snap.unit))
; [eval] issubtype(typeof(key_1), int())
; [eval] typeof(key_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> key_1@84@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(val_0), str())
; [eval] typeof(val_0)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> val_0@85@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  $Snap.unit))
; [eval] self_7 != null
(assert (not (= self_7@83@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 ($Snap.combine ($Snap.first $t@88@01) ($Snap.second $t@88@01))))
(assert (= ($Snap.first $t@88@01) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@88@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@88@01))
    ($Snap.second ($Snap.second $t@88@01)))))
(assert (= ($Snap.first ($Snap.second $t@88@01)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@88@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@88@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@88@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_164@82@01 _current_wait_level_164@86@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@88@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@89@01 $Ref)
; [exec]
; var increased_size: Ref
(declare-const increased_size@90@01 $Ref)
; [exec]
; var self_15: Ref
(declare-const self_15@91@01 $Ref)
; [exec]
; var key_7: Ref
(declare-const key_7@92@01 $Ref)
; [exec]
; var val_3: Ref
(declare-const val_3@93@01 $Ref)
; [exec]
; var _put_res: Ref
(declare-const _put_res@94@01 $Ref)
; [exec]
; var TreeNode_res: Ref
(declare-const TreeNode_res@95@01 $Ref)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@96@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@97@01 Seq<Measure$>)
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_7) == BinarySearchTree()
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] typeof(self_7) == BinarySearchTree()
; [eval] typeof(self_7)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_7@83@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_15 := self_7
; [exec]
; key_7 := key_1
; [exec]
; val_3 := val_0
; [exec]
; unfold acc(bst(self_15), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Snap.unit))
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(set-option :timeout 0)
(push) ; 3
; [then-branch: 24 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null | live]
; [else-branch: 24 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null | live]
(push) ; 4
; [then-branch: 24 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 24 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) (as int<PyType>  PyType)))
; [eval] t_0.BinarySearchTree_root != null
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null | live]
; [else-branch: 25 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 25 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 4
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))) (as TreeNode<PyType>  PyType)))
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))) (as TreeNode<PyType>  PyType))
  (sorted%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)))
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bst%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))) self_7@83@01))
; [eval] object___bool__(self_15.BinarySearchTree_root)
(set-option :timeout 0)
(push) ; 4
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(pop) ; 4
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 26 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))) | live]
; [else-branch: 26 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 26 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))))]
(assert (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
; [exec]
; _cwl_164, _put_res := BinarySearchTree__put(_cthread_164, _method_measures_164,
;   _residue_164, self_15, key_7, val_3, self_15.BinarySearchTree_root, null,
;   null)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_8), BinarySearchTree())
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_2), int())
; [eval] typeof(key_2)
; [eval] int()
; [eval] issubtype(typeof(val_1), str())
; [eval] typeof(val_1)
; [eval] str()
; [eval] issubtype(typeof(currentNode), TreeNode())
; [eval] typeof(currentNode)
; [eval] TreeNode()
; [eval] upper == null || issubtype(typeof(upper), int())
; [eval] upper == null
; [eval] lower == null || issubtype(typeof(lower), int())
; [eval] lower == null
; [eval] self_8 != null
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 5
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
; [eval] upper != null ==> int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] upper != null
(push) ; 5
; [then-branch: 27 | False | dead]
; [else-branch: 27 | True | live]
(push) ; 6
; [else-branch: 27 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] lower != null ==> int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] lower != null
(push) ; 5
; [then-branch: 28 | False | dead]
; [else-branch: 28 | True | live]
(push) ; 6
; [else-branch: 28 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@99@01 $Perm)
(declare-const _res@100@01 $Ref)
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@101@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@101@01))
    ($Snap.second ($Snap.second $t@101@01)))))
(assert (= ($Snap.first ($Snap.second $t@101@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@101@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@101@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@101@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_164@82@01 _current_wait_level_165@99@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@101@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@100@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 5
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null))
(pop) ; 5
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null))
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))) $Ref.null $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  $Snap.unit))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 5
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(pop) ; 5
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 5
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(pop) ; 5
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; increased_size := _put_res
; [exec]
; inhale _isDefined(2058221841198536259493351676669545)
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; [eval] _isDefined(2058221841198536259493351676669545)
(set-option :timeout 0)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 2058221841198536259493351676669545))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 2058221841198536259493351676669545))
(assert (_isDefined $Snap.unit 2058221841198536259493351676669545))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] bool___unbox__(_checkDefined(increased_size, 2058221841198536259493351676669545))
; [eval] _checkDefined(increased_size, 2058221841198536259493351676669545)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@100@01 2058221841198536259493351676669545))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@100@01 2058221841198536259493351676669545))
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545)) | live]
; [else-branch: 29 | !(bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 29 | bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)))
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474)) > none
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474))
; [then-branch: 30 | False | dead]
; [else-branch: 30 | True | live]
(push) ; 6
; [else-branch: 30 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474)) > none)
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474)) > none
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | True | live]
; [else-branch: 31 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 31 | True]
; [exec]
; self_15.BinarySearchTree_size := __prim__int___box__(int___add__(int___unbox__(self_15.BinarySearchTree_size),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(self_15.BinarySearchTree_size), 1))
; [eval] int___add__(int___unbox__(self_15.BinarySearchTree_size), 1)
; [eval] int___unbox__(self_15.BinarySearchTree_size)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1)))
(declare-const BinarySearchTree_size@103@01 $Ref)
(assert (=
  BinarySearchTree_size@103@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1))))
; [exec]
; fold acc(bst(self_15), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(push) ; 7
; [then-branch: 32 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null | live]
; [else-branch: 32 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null | live]
(push) ; 8
; [then-branch: 32 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 32 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null]
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> BinarySearchTree_size@103@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> BinarySearchTree_size@103@01) (as int<PyType>  PyType)))
; [eval] t_0.BinarySearchTree_root != null
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null | live]
; [else-branch: 33 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 33 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null]
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 8
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap BinarySearchTree_size@103@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
              $Snap.unit))))))) self_7@83@01))
; [exec]
; label __end
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 29 | !(bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545))))
(pop) ; 5
; [eval] !bool___unbox__(_checkDefined(increased_size, 2058221841198536259493351676669545))
; [eval] bool___unbox__(_checkDefined(increased_size, 2058221841198536259493351676669545))
; [eval] _checkDefined(increased_size, 2058221841198536259493351676669545)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | !(bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545))) | live]
; [else-branch: 34 | bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 34 | !(bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545))))
; [exec]
; fold acc(bst(self_15), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(push) ; 6
; [then-branch: 35 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null | live]
; [else-branch: 35 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null | live]
(push) ; 7
; [then-branch: 35 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null))
(pop) ; 7
(push) ; 7
; [else-branch: 35 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null]
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
; [eval] t_0.BinarySearchTree_root != null
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null | live]
; [else-branch: 36 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 36 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) != Null]
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 7
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 7
; Joined path conditions
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
              $Snap.unit))))))) self_7@83@01))
; [exec]
; label __end
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 34 | bool___unbox__(_, _checkDefined(_, _res@100@01, 2058221841198536259493351676669545))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit _res@100@01 2058221841198536259493351676669545)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 26 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(pop) ; 4
; [eval] !object___bool__(self_15.BinarySearchTree_root)
; [eval] object___bool__(self_15.BinarySearchTree_root)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))))) | live]
; [else-branch: 37 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 37 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
; [exec]
; TreeNode_res := new()
(declare-const TreeNode_res@104@01 $Ref)
(assert (not (= TreeNode_res@104@01 $Ref.null)))
(assert (not (= TreeNode_res@104@01 val_0@85@01)))
(assert (not (= TreeNode_res@104@01 self_7@83@01)))
(assert (not (= TreeNode_res@104@01 _cthread_164@80@01)))
(assert (not (= TreeNode_res@104@01 _put_res@94@01)))
(assert (not (= TreeNode_res@104@01 increased_size@90@01)))
(assert (not (= TreeNode_res@104@01 TreeNode_res@95@01)))
(assert (not
  (=
    TreeNode_res@104@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (not
  (=
    TreeNode_res@104@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (not (= TreeNode_res@104@01 key_1@84@01)))
; [exec]
; inhale typeof(TreeNode_res) == TreeNode()
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 $Snap.unit))
; [eval] typeof(TreeNode_res) == TreeNode()
; [eval] typeof(TreeNode_res)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res@104@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res, 37570294749124271794790167124), write)
(declare-const $t@106@01 $Snap)
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res, 133428712315442505103991910045925601876), write)
(declare-const $t@107@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= $t@106@01 $t@107@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res, 8748119199110060322885764141532520454124116), write)
(declare-const $t@108@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= $t@106@01 $t@108@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@109@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= $t@106@01 $t@109@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res, 604545538089943218283080865013920340), write)
(declare-const $t@110@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= $t@106@01 $t@110@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; _cwl_164 := TreeNode___init__(_cthread_164, _method_measures_164, _residue_164,
;   TreeNode_res, key_7, val_3, null, null, null)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unsat
(pop) ; 4
(push) ; 4
; [else-branch: 37 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))))]
(assert (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 25 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bst%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))) self_7@83@01))
; [eval] object___bool__(self_15.BinarySearchTree_root)
(set-option :timeout 0)
(push) ; 4
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(pop) ; 4
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))) | dead]
; [else-branch: 38 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 38 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(pop) ; 4
; [eval] !object___bool__(self_15.BinarySearchTree_root)
; [eval] object___bool__(self_15.BinarySearchTree_root)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))))) | live]
; [else-branch: 39 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 39 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
; [exec]
; TreeNode_res := new()
(declare-const TreeNode_res@111@01 $Ref)
(assert (not (= TreeNode_res@111@01 $Ref.null)))
(assert (not (= TreeNode_res@111@01 val_0@85@01)))
(assert (not (= TreeNode_res@111@01 self_7@83@01)))
(assert (not (= TreeNode_res@111@01 _cthread_164@80@01)))
(assert (not (= TreeNode_res@111@01 _put_res@94@01)))
(assert (not (= TreeNode_res@111@01 increased_size@90@01)))
(assert (not (= TreeNode_res@111@01 TreeNode_res@95@01)))
(assert (not
  (=
    TreeNode_res@111@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (not
  (=
    TreeNode_res@111@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (not (= TreeNode_res@111@01 key_1@84@01)))
; [exec]
; inhale typeof(TreeNode_res) == TreeNode()
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 $Snap.unit))
; [eval] typeof(TreeNode_res) == TreeNode()
; [eval] typeof(TreeNode_res)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res@111@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res, 37570294749124271794790167124), write)
(declare-const $t@113@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res, 133428712315442505103991910045925601876), write)
(declare-const $t@114@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res, 8748119199110060322885764141532520454124116), write)
(declare-const $t@115@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@116@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res, 604545538089943218283080865013920340), write)
(declare-const $t@117@01 $Snap)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_164 := TreeNode___init__(_cthread_164, _method_measures_164, _residue_164,
;   TreeNode_res, key_7, val_3, null, null, null)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
; [eval] issubtype(typeof(self_5), TreeNode())
; [eval] typeof(self_5)
; [eval] TreeNode()
(set-option :timeout 0)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> TreeNode_res@111@01) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> TreeNode_res@111@01) (as TreeNode<PyType>  PyType)))
; [eval] issubtype(typeof(key_0), int())
; [eval] typeof(key_0)
; [eval] int()
; [eval] issubtype(typeof(val), str())
; [eval] typeof(val)
; [eval] str()
; [eval] left == null || issubtype(typeof(left), TreeNode())
; [eval] left == null
; [eval] right == null || issubtype(typeof(right), TreeNode())
; [eval] right == null
; [eval] parent == null || issubtype(typeof(parent), TreeNode())
; [eval] parent == null
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@118@01 $Perm)
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 ($Snap.combine ($Snap.first $t@119@01) ($Snap.second $t@119@01))))
(assert (= ($Snap.first $t@119@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@119@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@119@01))
    ($Snap.second ($Snap.second $t@119@01)))))
(assert (= ($Snap.first ($Snap.second $t@119@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@119@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@119@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@119@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_164@82@01 _current_wait_level_162@118@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@119@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))
  $Snap.unit))
; [eval] self_5.TreeNode_key == key_0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))
  key_1@84@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_payload == val
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))
  val_0@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(push) ; 5
; [then-branch: 40 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) == Null | live]
; [else-branch: 40 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) != Null | live]
(push) ; 6
; [then-branch: 40 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 40 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == left
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(push) ; 5
; [then-branch: 41 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) == Null | live]
; [else-branch: 41 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) != Null | live]
(push) ; 6
; [then-branch: 41 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 41 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == right
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(push) ; 5
; [then-branch: 42 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) == Null | live]
; [else-branch: 42 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) != Null | live]
(push) ; 6
; [then-branch: 42 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 42 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == parent
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_15, 170170373251925421444582457427464176135250765572418)) > none
; [eval] perm(_MaySet(self_15, 170170373251925421444582457427464176135250765572418))
; [then-branch: 43 | False | dead]
; [else-branch: 43 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 43 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(self_15, 170170373251925421444582457427464176135250765572418)) > none)
; [eval] perm(_MaySet(self_15, 170170373251925421444582457427464176135250765572418)) > none
; [eval] perm(_MaySet(self_15, 170170373251925421444582457427464176135250765572418))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | True | live]
; [else-branch: 44 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 44 | True]
; [exec]
; self_15.BinarySearchTree_root := TreeNode_res
; [exec]
; fold acc(tree(self_15.BinarySearchTree_root), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(push) ; 6
; [then-branch: 45 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) == Null | live]
; [else-branch: 45 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) != Null | live]
(push) ; 7
; [then-branch: 45 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) == Null]
(pop) ; 7
(push) ; 7
; [else-branch: 45 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 6
; [then-branch: 46 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) == Null | live]
; [else-branch: 46 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) != Null | live]
(push) ; 7
; [then-branch: 46 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) == Null]
(pop) ; 7
(push) ; 7
; [else-branch: 46 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 6
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) == Null | live]
; [else-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) != Null | live]
(push) ; 7
; [then-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) == Null]
(pop) ; 7
(push) ; 7
; [else-branch: 47 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 48 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) != Null | dead]
; [else-branch: 48 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) == Null | live]
(push) ; 6
; [else-branch: 48 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01)))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 49 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) != Null | dead]
; [else-branch: 49 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) == Null | live]
(push) ; 7
; [else-branch: 49 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@119@01))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) TreeNode_res@111@01))
; [exec]
; increased_size := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const increased_size@120@01 $Ref)
(assert (= increased_size@120@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(2058221841198536259493351676669545)
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] _isDefined(2058221841198536259493351676669545)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 2058221841198536259493351676669545))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 2058221841198536259493351676669545))
(assert (_isDefined $Snap.unit 2058221841198536259493351676669545))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] bool___unbox__(_checkDefined(increased_size, 2058221841198536259493351676669545))
; [eval] _checkDefined(increased_size, 2058221841198536259493351676669545)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit increased_size@120@01 2058221841198536259493351676669545))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit increased_size@120@01 2058221841198536259493351676669545))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | bool___unbox__(_, _checkDefined(_, increased_size@120@01, 2058221841198536259493351676669545)) | live]
; [else-branch: 50 | !(bool___unbox__(_, _checkDefined(_, increased_size@120@01, 2058221841198536259493351676669545))) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 50 | bool___unbox__(_, _checkDefined(_, increased_size@120@01, 2058221841198536259493351676669545))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)))
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474)) > none
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474))
; [then-branch: 51 | False | dead]
; [else-branch: 51 | True | live]
(push) ; 9
; [else-branch: 51 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474)) > none)
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474)) > none
; [eval] perm(_MaySet(self_15, 148310513873082034654315146951689972238776244529474))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | True | live]
; [else-branch: 52 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 52 | True]
; [exec]
; self_15.BinarySearchTree_size := __prim__int___box__(int___add__(int___unbox__(self_15.BinarySearchTree_size),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(self_15.BinarySearchTree_size), 1))
; [eval] int___add__(int___unbox__(self_15.BinarySearchTree_size), 1)
; [eval] int___unbox__(self_15.BinarySearchTree_size)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(pop) ; 10
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(push) ; 10
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1))
(pop) ; 10
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1)))
(declare-const BinarySearchTree_size@122@01 $Ref)
(assert (=
  BinarySearchTree_size@122@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))) 1))))
; [exec]
; fold acc(bst(self_15), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(push) ; 10
; [then-branch: 53 | TreeNode_res@111@01 == Null | live]
; [else-branch: 53 | TreeNode_res@111@01 != Null | live]
(push) ; 11
; [then-branch: 53 | TreeNode_res@111@01 == Null]
(assert (= TreeNode_res@111@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 53 | TreeNode_res@111@01 != Null]
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= TreeNode_res@111@01 $Ref.null)) (= TreeNode_res@111@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= TreeNode_res@111@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res@111@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= TreeNode_res@111@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res@111@01) (as TreeNode<PyType>  PyType))))
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> BinarySearchTree_size@122@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> BinarySearchTree_size@122@01) (as int<PyType>  PyType)))
; [eval] t_0.BinarySearchTree_root != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= TreeNode_res@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | TreeNode_res@111@01 != Null | live]
; [else-branch: 54 | TreeNode_res@111@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 54 | TreeNode_res@111@01 != Null]
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 11
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null))
(pop) ; 11
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null))
(push) ; 11
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null))))
(push) ; 11
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) TreeNode_res@111@01 $Ref.null $Ref.null)))
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$RefTo$Snap TreeNode_res@111@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap BinarySearchTree_size@122@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@119@01))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01)))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@119@01))))))))))))))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)))))))))))))
              $Snap.unit))))))) self_7@83@01))
; [exec]
; label __end
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !bool___unbox__(_checkDefined(increased_size, 2058221841198536259493351676669545))
; [eval] bool___unbox__(_checkDefined(increased_size, 2058221841198536259493351676669545))
; [eval] _checkDefined(increased_size, 2058221841198536259493351676669545)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | !(bool___unbox__(_, _checkDefined(_, increased_size@120@01, 2058221841198536259493351676669545))) | dead]
; [else-branch: 55 | bool___unbox__(_, _checkDefined(_, increased_size@120@01, 2058221841198536259493351676669545)) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 55 | bool___unbox__(_, _checkDefined(_, increased_size@120@01, 2058221841198536259493351676669545))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit increased_size@120@01 2058221841198536259493351676669545)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree__put ----------
(declare-const _cthread_165@123@01 $Ref)
(declare-const _caller_measures_165@124@01 Seq<Measure$>)
(declare-const _residue_165@125@01 $Perm)
(declare-const self_8@126@01 $Ref)
(declare-const key_2@127@01 $Ref)
(declare-const val_1@128@01 $Ref)
(declare-const currentNode@129@01 $Ref)
(declare-const upper@130@01 $Ref)
(declare-const lower@131@01 $Ref)
(declare-const _current_wait_level_165@132@01 $Perm)
(declare-const _res@133@01 $Ref)
(declare-const _cthread_165@134@01 $Ref)
(declare-const _caller_measures_165@135@01 Seq<Measure$>)
(declare-const _residue_165@136@01 $Perm)
(declare-const self_8@137@01 $Ref)
(declare-const key_2@138@01 $Ref)
(declare-const val_1@139@01 $Ref)
(declare-const currentNode@140@01 $Ref)
(declare-const upper@141@01 $Ref)
(declare-const lower@142@01 $Ref)
(declare-const _current_wait_level_165@143@01 $Perm)
(declare-const _res@144@01 $Ref)
(push) ; 1
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(assert (= ($Snap.first $t@145@01) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@134@01 $Ref.null)))
(assert (=
  ($Snap.second $t@145@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@145@01))
    ($Snap.second ($Snap.second $t@145@01)))))
(assert (= ($Snap.first ($Snap.second $t@145@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@134@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@145@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@145@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@145@01))) $Snap.unit))
; [eval] issubtype(typeof(self_8), BinarySearchTree())
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_8@137@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@145@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  $Snap.unit))
; [eval] issubtype(typeof(key_2), int())
; [eval] typeof(key_2)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> key_2@138@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(val_1), str())
; [eval] typeof(val_1)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> val_1@139@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(currentNode), TreeNode())
; [eval] typeof(currentNode)
; [eval] TreeNode()
(assert (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  $Snap.unit))
; [eval] upper == null || issubtype(typeof(upper), int())
; [eval] upper == null
(push) ; 2
; [then-branch: 56 | upper@141@01 == Null | live]
; [else-branch: 56 | upper@141@01 != Null | live]
(push) ; 3
; [then-branch: 56 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 56 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper), int())
; [eval] typeof(upper)
; [eval] int()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= upper@141@01 $Ref.null)) (= upper@141@01 $Ref.null)))
(assert (or
  (= upper@141@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  $Snap.unit))
; [eval] lower == null || issubtype(typeof(lower), int())
; [eval] lower == null
(push) ; 2
; [then-branch: 57 | lower@142@01 == Null | live]
; [else-branch: 57 | lower@142@01 != Null | live]
(push) ; 3
; [then-branch: 57 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 57 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower), int())
; [eval] typeof(lower)
; [eval] int()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= lower@142@01 $Ref.null)) (= lower@142@01 $Ref.null)))
(assert (or
  (= lower@142@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  $Snap.unit))
; [eval] self_8 != null
(assert (not (= self_8@137@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 2
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 3
; [then-branch: 58 | upper@141@01 == Null | live]
; [else-branch: 58 | upper@141@01 != Null | live]
(push) ; 4
; [then-branch: 58 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 58 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 3
; [then-branch: 59 | lower@142@01 == Null | live]
; [else-branch: 59 | lower@142@01 != Null | live]
(push) ; 4
; [then-branch: 59 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 59 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 2
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 2
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 2
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  $Snap.unit))
; [eval] upper != null ==> int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] upper != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= upper@141@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= upper@141@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | upper@141@01 != Null | live]
; [else-branch: 60 | upper@141@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 60 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] int___unbox__(key_2)
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
(pop) ; 4
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
; [eval] int___unbox__(upper)
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit upper@141@01))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit upper@141@01)))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))
(pop) ; 3
(push) ; 3
; [else-branch: 60 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (not (= upper@141@01 $Ref.null))
  (and
    (not (= upper@141@01 $Ref.null))
    (int___unbox__%precondition $Snap.unit key_2@138@01)
    (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit upper@141@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))))
; Joined path conditions
(assert (or (= upper@141@01 $Ref.null) (not (= upper@141@01 $Ref.null))))
(assert (=>
  (not (= upper@141@01 $Ref.null))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
  $Snap.unit))
; [eval] lower != null ==> int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] lower != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= lower@142@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= lower@142@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | lower@142@01 != Null | live]
; [else-branch: 61 | lower@142@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 61 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] int___unbox__(key_2)
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
(pop) ; 4
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
; [eval] int___unbox__(lower)
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit lower@142@01))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit lower@142@01)))
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))
(pop) ; 3
(push) ; 3
; [else-branch: 61 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (not (= lower@142@01 $Ref.null))
  (and
    (not (= lower@142@01 $Ref.null))
    (int___unbox__%precondition $Snap.unit key_2@138@01)
    (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit lower@142@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))))
; Joined path conditions
(assert (or (= lower@142@01 $Ref.null) (not (= lower@142@01 $Ref.null))))
(assert (=>
  (not (= lower@142@01 $Ref.null))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 ($Snap.combine ($Snap.first $t@146@01) ($Snap.second $t@146@01))))
(assert (= ($Snap.first $t@146@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@146@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@01))
    ($Snap.second ($Snap.second $t@146@01)))))
(assert (= ($Snap.first ($Snap.second $t@146@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@146@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@146@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@136@01 _current_wait_level_165@143@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@144@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 3
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 4
; [then-branch: 62 | upper@141@01 == Null | live]
; [else-branch: 62 | upper@141@01 != Null | live]
(push) ; 5
; [then-branch: 62 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 62 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 4
; [then-branch: 63 | lower@142@01 == Null | live]
; [else-branch: 63 | lower@142@01 != Null | live]
(push) ; 5
; [then-branch: 63 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 63 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 3
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
  $Snap.unit))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 3
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))) currentNode@140@01))
(pop) ; 3
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 3
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 3
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@147@01 $Ref)
; [exec]
; var res: Ref
(declare-const res@148@01 $Ref)
; [exec]
; var self_16: Ref
(declare-const self_16@149@01 $Ref)
; [exec]
; var key_8: Ref
(declare-const key_8@150@01 $Ref)
; [exec]
; var val_4: Ref
(declare-const val_4@151@01 $Ref)
; [exec]
; var currentNode_1: Ref
(declare-const currentNode_1@152@01 $Ref)
; [exec]
; var upper_1: Ref
(declare-const upper_1@153@01 $Ref)
; [exec]
; var lower_1: Ref
(declare-const lower_1@154@01 $Ref)
; [exec]
; var _put_res_0: Ref
(declare-const _put_res_0@155@01 $Ref)
; [exec]
; var TreeNode_res_0: Ref
(declare-const TreeNode_res_0@156@01 $Ref)
; [exec]
; var _put_res_1: Ref
(declare-const _put_res_1@157@01 $Ref)
; [exec]
; var TreeNode_res_1: Ref
(declare-const TreeNode_res_1@158@01 $Ref)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@159@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@160@01 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_8) == BinarySearchTree()
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] typeof(self_8) == BinarySearchTree()
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_8@137@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; self_16 := self_8
; [exec]
; key_8 := key_2
; [exec]
; val_4 := val_1
; [exec]
; currentNode_1 := currentNode
; [exec]
; upper_1 := upper
; [exec]
; lower_1 := lower
; [exec]
; unfold acc(tree(currentNode_1), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(assert (not (= currentNode@140@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 3
; [then-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 4
; [then-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 3
; [then-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 4
; [then-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 3
; [then-branch: 66 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 66 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 4
; [then-branch: 66 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 66 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
; [eval] n_1.TreeNode_leftChild != null
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 67 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 67 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 4
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))) (as TreeNode<PyType>  PyType)))
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))) (as TreeNode<PyType>  PyType))
  (getParent%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  currentNode@140@01))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 68 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 68 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType)))
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType))
  (getParent%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  currentNode@140@01))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))) currentNode@140@01))
; [exec]
; res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 5
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const res@162@01 $Ref)
(assert (= res@162@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 7562610))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7562610))
(assert (_isDefined $Snap.unit 7562610))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 5
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 69 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 69 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 6
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 6
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 6
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 71 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | live]
; [else-branch: 71 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 71 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
; [exec]
; _cwl_165, _put_res_0 := BinarySearchTree__put(_cthread_165, _method_measures_165,
;   _residue_165, self_16, key_8, val_4, currentNode_1.TreeNode_leftChild, currentNode_1.TreeNode_key,
;   lower_1)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_8), BinarySearchTree())
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_2), int())
; [eval] typeof(key_2)
; [eval] int()
; [eval] issubtype(typeof(val_1), str())
; [eval] typeof(val_1)
; [eval] str()
; [eval] issubtype(typeof(currentNode), TreeNode())
; [eval] typeof(currentNode)
; [eval] TreeNode()
; [eval] upper == null || issubtype(typeof(upper), int())
; [eval] upper == null
(push) ; 7
; [then-branch: 72 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 72 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 72 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 72 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(upper), int())
; [eval] typeof(upper)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 7
(assert (not (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType))))
; [eval] lower == null || issubtype(typeof(lower), int())
; [eval] lower == null
(push) ; 7
; [then-branch: 73 | lower@142@01 == Null | live]
; [else-branch: 73 | lower@142@01 != Null | live]
(push) ; 8
; [then-branch: 73 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 73 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower), int())
; [eval] typeof(lower)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] self_8 != null
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 7
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 8
; [then-branch: 74 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 74 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 74 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 74 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 8
; [then-branch: 75 | lower@142@01 == Null | live]
; [else-branch: 75 | lower@142@01 != Null | live]
(push) ; 9
; [then-branch: 75 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 75 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(pop) ; 7
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))))
(push) ; 7
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
; [eval] upper != null ==> int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] upper != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
; [else-branch: 76 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 76 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] int___unbox__(key_2)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(upper)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 7
(assert (not (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] lower != null ==> int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] lower != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lower@142@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lower@142@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | lower@142@01 != Null | live]
; [else-branch: 77 | lower@142@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 77 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] int___unbox__(key_2)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(lower)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit lower@142@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit lower@142@01)))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 77 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not (= lower@142@01 $Ref.null))
  (and
    (not (= lower@142@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit lower@142@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))))
; Joined path conditions
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@164@01 $Perm)
(declare-const _res@165@01 $Ref)
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@166@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@166@01))
    ($Snap.second ($Snap.second $t@166@01)))))
(assert (= ($Snap.first ($Snap.second $t@166@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@166@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@166@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@166@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@136@01 _current_wait_level_165@164@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@166@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@165@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 8
; [then-branch: 78 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 78 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 78 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 78 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 8
; [then-branch: 79 | lower@142@01 == Null | live]
; [else-branch: 79 | lower@142@01 != Null | live]
(push) ; 9
; [then-branch: 79 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 79 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(pop) ; 7
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  $Snap.unit))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 7
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 7
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 7
; Joined path conditions
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res := _put_res_0
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 $Snap.unit))
; [eval] _isDefined(7562610)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 80 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 80 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 80 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 80 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 7
; [then-branch: 81 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 81 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 81 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 81 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 7
; [then-branch: 82 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 82 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 82 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 82 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 8
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  currentNode@140@01))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 84 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 84 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 9
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                            $Snap.unit)
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@165@01 7562610))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@165@01 7562610))
(declare-const _res@168@01 $Ref)
(assert (= _res@168@01 (_checkDefined $Snap.unit _res@165@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> _res@168@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@168@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 9
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 10
; [then-branch: 85 | upper@141@01 == Null | live]
; [else-branch: 85 | upper@141@01 != Null | live]
(push) ; 11
; [then-branch: 85 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 85 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 10
; [then-branch: 86 | lower@142@01 == Null | live]
; [else-branch: 86 | lower@142@01 != Null | live]
(push) ; 11
; [then-branch: 86 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 86 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 9
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 9
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 9
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 9
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 87 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 88 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | dead]
; [else-branch: 88 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 88 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 69 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 89 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 89 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 90 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 90 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 91 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 91 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 91 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 91 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 7
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 7
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 7
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 92 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | live]
; [else-branch: 92 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 92 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
; [exec]
; _cwl_165, _put_res_1 := BinarySearchTree__put(_cthread_165, _method_measures_165,
;   _residue_165, self_16, key_8, val_4, currentNode_1.TreeNode_rightChild, upper_1,
;   currentNode_1.TreeNode_key)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_8), BinarySearchTree())
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_2), int())
; [eval] typeof(key_2)
; [eval] int()
; [eval] issubtype(typeof(val_1), str())
; [eval] typeof(val_1)
; [eval] str()
; [eval] issubtype(typeof(currentNode), TreeNode())
; [eval] typeof(currentNode)
; [eval] TreeNode()
; [eval] upper == null || issubtype(typeof(upper), int())
; [eval] upper == null
(push) ; 8
; [then-branch: 93 | upper@141@01 == Null | live]
; [else-branch: 93 | upper@141@01 != Null | live]
(push) ; 9
; [then-branch: 93 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 93 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper), int())
; [eval] typeof(upper)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] lower == null || issubtype(typeof(lower), int())
; [eval] lower == null
(push) ; 8
; [then-branch: 94 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 94 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 94 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 94 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(lower), int())
; [eval] typeof(lower)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 8
(assert (not (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType))))
; [eval] self_8 != null
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 8
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 9
; [then-branch: 95 | upper@141@01 == Null | live]
; [else-branch: 95 | upper@141@01 != Null | live]
(push) ; 10
; [then-branch: 95 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 95 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 9
; [then-branch: 96 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 96 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 96 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 96 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] upper != null ==> int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] upper != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upper@141@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upper@141@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | upper@141@01 != Null | live]
; [else-branch: 97 | upper@141@01 == Null | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 97 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] int___unbox__(key_2)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] int___unbox__(upper)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit upper@141@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit upper@141@01)))
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 97 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (not (= upper@141@01 $Ref.null))
  (and
    (not (= upper@141@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit upper@141@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))))
; Joined path conditions
; [eval] lower != null ==> int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] lower != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
; [else-branch: 98 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 98 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] int___unbox__(key_2)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] int___unbox__(lower)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 8
(assert (not (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@169@01 $Perm)
(declare-const _res@170@01 $Ref)
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 ($Snap.combine ($Snap.first $t@171@01) ($Snap.second $t@171@01))))
(assert (= ($Snap.first $t@171@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@171@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@171@01))
    ($Snap.second ($Snap.second $t@171@01)))))
(assert (= ($Snap.first ($Snap.second $t@171@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@171@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@171@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@171@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@136@01 _current_wait_level_165@169@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@171@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@171@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@171@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@170@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 9
; [then-branch: 99 | upper@141@01 == Null | live]
; [else-branch: 99 | upper@141@01 != Null | live]
(push) ; 10
; [then-branch: 99 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 99 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 9
; [then-branch: 100 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 100 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 100 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 100 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))
  $Snap.unit))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 8
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 8
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 8
; Joined path conditions
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res := _put_res_1
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] _isDefined(7562610)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 101 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 101 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 101 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 101 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 102 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 102 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 102 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 102 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 104 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 104 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 9
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 105 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 105 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  currentNode@140@01))
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@170@01 7562610))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@170@01 7562610))
(declare-const _res@173@01 $Ref)
(assert (= _res@173@01 (_checkDefined $Snap.unit _res@170@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@173@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@173@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 10
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 11
; [then-branch: 106 | upper@141@01 == Null | live]
; [else-branch: 106 | upper@141@01 != Null | live]
(push) ; 12
; [then-branch: 106 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 106 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 11
; [then-branch: 107 | lower@142@01 == Null | live]
; [else-branch: 107 | lower@142@01 != Null | live]
(push) ; 12
; [then-branch: 107 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 107 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 10
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@171@01)))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 92 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
(pop) ; 7
; [eval] !object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 108 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 108 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 108 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 108 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | live]
; [else-branch: 109 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 109 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
; [exec]
; TreeNode_res_1 := new()
(declare-const TreeNode_res_1@174@01 $Ref)
(assert (not (= TreeNode_res_1@174@01 $Ref.null)))
(assert (not (= TreeNode_res_1@174@01 TreeNode_res_0@156@01)))
(assert (not (= TreeNode_res_1@174@01 key_2@138@01)))
(assert (not (= TreeNode_res_1@174@01 res@162@01)))
(assert (not (= TreeNode_res_1@174@01 upper@141@01)))
(assert (not (= TreeNode_res_1@174@01 _put_res_0@155@01)))
(assert (not
  (=
    TreeNode_res_1@174@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@174@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@174@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@174@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@174@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (not (= TreeNode_res_1@174@01 _cthread_165@134@01)))
(assert (not (= TreeNode_res_1@174@01 currentNode@140@01)))
(assert (not (= TreeNode_res_1@174@01 self_8@137@01)))
(assert (not (= TreeNode_res_1@174@01 TreeNode_res_1@158@01)))
(assert (not (= TreeNode_res_1@174@01 val_1@139@01)))
(assert (not (= TreeNode_res_1@174@01 _put_res_1@157@01)))
(assert (not (= TreeNode_res_1@174@01 lower@142@01)))
; [exec]
; inhale typeof(TreeNode_res_1) == TreeNode()
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 $Snap.unit))
; [eval] typeof(TreeNode_res_1) == TreeNode()
; [eval] typeof(TreeNode_res_1)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res_1@174@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 37570294749124271794790167124), write)
(declare-const $t@176@01 $Snap)
; State saturation: after inhale
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 133428712315442505103991910045925601876), write)
(declare-const $t@177@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (= $t@176@01 $t@177@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 8748119199110060322885764141532520454124116), write)
(declare-const $t@178@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (= $t@176@01 $t@178@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@179@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (= $t@176@01 $t@179@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 604545538089943218283080865013920340), write)
(declare-const $t@180@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (= $t@176@01 $t@180@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; _cwl_165 := TreeNode___init__(_cthread_165, _method_measures_165, _residue_165,
;   TreeNode_res_1, key_8, val_4, null, null, currentNode_1)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(check-sat)
; unsat
(pop) ; 7
(push) ; 7
; [else-branch: 109 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 90 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 6
; [eval] !int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 110 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 110 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
; [then-branch: 111 | False | dead]
; [else-branch: 111 | True | live]
(push) ; 7
; [else-branch: 111 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none)
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | True | live]
; [else-branch: 112 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 112 | True]
; [exec]
; currentNode_1.TreeNode_payload := val_4
; [exec]
; res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const res@181@01 $Ref)
(assert (= res@181@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 113 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 113 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 113 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 113 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 114 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 114 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 114 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 114 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 115 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 115 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 115 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 115 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 116 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 116 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 9
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 117 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 117 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 10
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap val_1@139@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@181@01 7562610))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@181@01 7562610))
(declare-const _res@183@01 $Ref)
(assert (= _res@183@01 (_checkDefined $Snap.unit res@181@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@183@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@183@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 10
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 11
; [then-branch: 118 | upper@141@01 == Null | live]
; [else-branch: 118 | upper@141@01 != Null | live]
(push) ; 12
; [then-branch: 118 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 118 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 11
; [then-branch: 119 | lower@142@01 == Null | live]
; [else-branch: 119 | lower@142@01 != Null | live]
(push) ; 12
; [then-branch: 119 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 119 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 10
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 110 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 89 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 68 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))) currentNode@140@01))
; [exec]
; res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 5
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const res@184@01 $Ref)
(assert (= res@184@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 7562610))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7562610))
(assert (_isDefined $Snap.unit 7562610))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 5
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 120 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 120 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 121 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 121 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 121 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 121 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 6
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 6
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 6
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 122 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | live]
; [else-branch: 122 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 122 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
; [exec]
; _cwl_165, _put_res_0 := BinarySearchTree__put(_cthread_165, _method_measures_165,
;   _residue_165, self_16, key_8, val_4, currentNode_1.TreeNode_leftChild, currentNode_1.TreeNode_key,
;   lower_1)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_8), BinarySearchTree())
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_2), int())
; [eval] typeof(key_2)
; [eval] int()
; [eval] issubtype(typeof(val_1), str())
; [eval] typeof(val_1)
; [eval] str()
; [eval] issubtype(typeof(currentNode), TreeNode())
; [eval] typeof(currentNode)
; [eval] TreeNode()
; [eval] upper == null || issubtype(typeof(upper), int())
; [eval] upper == null
(push) ; 7
; [then-branch: 123 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 123 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 123 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 123 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(upper), int())
; [eval] typeof(upper)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 7
(assert (not (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType))))
; [eval] lower == null || issubtype(typeof(lower), int())
; [eval] lower == null
(push) ; 7
; [then-branch: 124 | lower@142@01 == Null | live]
; [else-branch: 124 | lower@142@01 != Null | live]
(push) ; 8
; [then-branch: 124 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 124 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower), int())
; [eval] typeof(lower)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] self_8 != null
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 7
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 8
; [then-branch: 125 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 125 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 125 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 125 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 8
; [then-branch: 126 | lower@142@01 == Null | live]
; [else-branch: 126 | lower@142@01 != Null | live]
(push) ; 9
; [then-branch: 126 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 126 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(pop) ; 7
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))))
(push) ; 7
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
; [eval] upper != null ==> int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] upper != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
; [else-branch: 127 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 127 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] int___unbox__(key_2)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(upper)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 7
(assert (not (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] lower != null ==> int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] lower != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lower@142@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lower@142@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | lower@142@01 != Null | live]
; [else-branch: 128 | lower@142@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 128 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] int___unbox__(key_2)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(lower)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit lower@142@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit lower@142@01)))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 128 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not (= lower@142@01 $Ref.null))
  (and
    (not (= lower@142@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> lower@142@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit lower@142@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit lower@142@01)))))
; Joined path conditions
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@186@01 $Perm)
(declare-const _res@187@01 $Ref)
(declare-const $t@188@01 $Snap)
(assert (= $t@188@01 ($Snap.combine ($Snap.first $t@188@01) ($Snap.second $t@188@01))))
(assert (= ($Snap.first $t@188@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@188@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@188@01))
    ($Snap.second ($Snap.second $t@188@01)))))
(assert (= ($Snap.first ($Snap.second $t@188@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@188@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@188@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@188@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@188@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@136@01 _current_wait_level_165@186@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@188@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@188@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@188@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@187@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 7
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 8
; [then-branch: 129 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 129 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 129 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 129 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 8
; [then-branch: 130 | lower@142@01 == Null | live]
; [else-branch: 130 | lower@142@01 != Null | live]
(push) ; 9
; [then-branch: 130 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 130 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(pop) ; 7
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))
(push) ; 7
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))) lower@142@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))
  $Snap.unit))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 7
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 7
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 7
; Joined path conditions
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res := _put_res_0
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@189@01 $Snap)
(assert (= $t@189@01 $Snap.unit))
; [eval] _isDefined(7562610)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 131 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 131 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 131 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 131 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 7
; [then-branch: 132 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 132 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 132 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 8
(push) ; 8
; [else-branch: 132 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 7
; [then-branch: 133 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 133 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 133 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 133 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 134 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 134 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 8
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  currentNode@140@01))
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 135 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | dead]
; [else-branch: 135 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
(push) ; 8
; [else-branch: 135 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                            $Snap.unit)
                          $Snap.unit))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@187@01 7562610))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@187@01 7562610))
(declare-const _res@190@01 $Ref)
(assert (= _res@190@01 (_checkDefined $Snap.unit _res@187@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> _res@190@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@190@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 9
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 10
; [then-branch: 136 | upper@141@01 == Null | live]
; [else-branch: 136 | upper@141@01 != Null | live]
(push) ; 11
; [then-branch: 136 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 136 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 10
; [then-branch: 137 | lower@142@01 == Null | live]
; [else-branch: 137 | lower@142@01 != Null | live]
(push) ; 11
; [then-branch: 137 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 137 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 9
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                    $Snap.unit)
                                  $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                    $Snap.unit)
                                  $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                              $Snap.unit)
                            $Snap.unit)))))))))))))) currentNode@140@01))
(pop) ; 9
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                              $Snap.unit)
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 9
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 9
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                $Snap.unit)
                              $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@188@01)))))
                                $Snap.unit)
                              $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 138 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 138 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 138 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 138 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 139 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | dead]
; [else-branch: 139 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 139 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 120 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 140 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 140 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 141 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 141 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 142 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 142 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 142 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 142 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 7
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 7
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 7
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | dead]
; [else-branch: 143 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 143 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
(pop) ; 7
; [eval] !object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 144 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 144 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 144 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 144 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | live]
; [else-branch: 145 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 145 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
; [exec]
; TreeNode_res_1 := new()
(declare-const TreeNode_res_1@191@01 $Ref)
(assert (not (= TreeNode_res_1@191@01 $Ref.null)))
(assert (not (= TreeNode_res_1@191@01 TreeNode_res_0@156@01)))
(assert (not (= TreeNode_res_1@191@01 key_2@138@01)))
(assert (not (= TreeNode_res_1@191@01 upper@141@01)))
(assert (not (= TreeNode_res_1@191@01 _put_res_0@155@01)))
(assert (not
  (=
    TreeNode_res_1@191@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@191@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@191@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@191@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@191@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (not (= TreeNode_res_1@191@01 _cthread_165@134@01)))
(assert (not (= TreeNode_res_1@191@01 currentNode@140@01)))
(assert (not (= TreeNode_res_1@191@01 self_8@137@01)))
(assert (not (= TreeNode_res_1@191@01 TreeNode_res_1@158@01)))
(assert (not (= TreeNode_res_1@191@01 val_1@139@01)))
(assert (not (= TreeNode_res_1@191@01 _put_res_1@157@01)))
(assert (not (= TreeNode_res_1@191@01 lower@142@01)))
(assert (not (= TreeNode_res_1@191@01 res@184@01)))
; [exec]
; inhale typeof(TreeNode_res_1) == TreeNode()
(declare-const $t@192@01 $Snap)
(assert (= $t@192@01 $Snap.unit))
; [eval] typeof(TreeNode_res_1) == TreeNode()
; [eval] typeof(TreeNode_res_1)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res_1@191@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 37570294749124271794790167124), write)
(declare-const $t@193@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 133428712315442505103991910045925601876), write)
(declare-const $t@194@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 8748119199110060322885764141532520454124116), write)
(declare-const $t@195@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@196@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 604545538089943218283080865013920340), write)
(declare-const $t@197@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_165 := TreeNode___init__(_cthread_165, _method_measures_165, _residue_165,
;   TreeNode_res_1, key_8, val_4, null, null, currentNode_1)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
; [eval] issubtype(typeof(self_5), TreeNode())
; [eval] typeof(self_5)
; [eval] TreeNode()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> TreeNode_res_1@191@01) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> TreeNode_res_1@191@01) (as TreeNode<PyType>  PyType)))
; [eval] issubtype(typeof(key_0), int())
; [eval] typeof(key_0)
; [eval] int()
; [eval] issubtype(typeof(val), str())
; [eval] typeof(val)
; [eval] str()
; [eval] left == null || issubtype(typeof(left), TreeNode())
; [eval] left == null
; [eval] right == null || issubtype(typeof(right), TreeNode())
; [eval] right == null
; [eval] parent == null || issubtype(typeof(parent), TreeNode())
; [eval] parent == null
(push) ; 8
; [then-branch: 146 | currentNode@140@01 == Null | live]
; [else-branch: 146 | currentNode@140@01 != Null | live]
(push) ; 9
; [then-branch: 146 | currentNode@140@01 == Null]
(assert (= currentNode@140@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 146 | currentNode@140@01 != Null]
; [eval] issubtype(typeof(parent), TreeNode())
; [eval] typeof(parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (= currentNode@140@01 $Ref.null)) (= currentNode@140@01 $Ref.null)))
(push) ; 8
(assert (not (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType))))
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@198@01 $Perm)
(declare-const $t@199@01 $Snap)
(assert (= $t@199@01 ($Snap.combine ($Snap.first $t@199@01) ($Snap.second $t@199@01))))
(assert (= ($Snap.first $t@199@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@199@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@199@01))
    ($Snap.second ($Snap.second $t@199@01)))))
(assert (= ($Snap.first ($Snap.second $t@199@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@199@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@199@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@199@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_165@136@01 _current_wait_level_162@198@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@199@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@191@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))
  $Snap.unit))
; [eval] self_5.TreeNode_key == key_0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
  key_2@138@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@191@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_payload == val
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))
  val_1@139@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@191@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 147 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) == Null | live]
; [else-branch: 147 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) != Null | live]
(push) ; 9
; [then-branch: 147 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 147 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == left
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@191@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 148 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) == Null | live]
; [else-branch: 148 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 148 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 148 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == right
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@191@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 149 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) == Null | live]
; [else-branch: 149 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 149 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 149 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == parent
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
  currentNode@140@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796)) > none
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796))
; [then-branch: 150 | False | dead]
; [else-branch: 150 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 150 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796)) > none)
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796)) > none
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | True | live]
; [else-branch: 151 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 151 | True]
; [exec]
; currentNode_1.TreeNode_rightChild := TreeNode_res_1
(push) ; 9
(set-option :timeout 10)
(assert (not (= TreeNode_res_1@191@01 currentNode@140@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(currentNode_1.TreeNode_rightChild), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 152 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) == Null | live]
; [else-branch: 152 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) != Null | live]
(push) ; 10
; [then-branch: 152 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 152 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 9
; [then-branch: 153 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) == Null | live]
; [else-branch: 153 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 153 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 153 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 9
; [then-branch: 154 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) == Null | live]
; [else-branch: 154 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 154 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 154 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 155 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) != Null | dead]
; [else-branch: 155 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) == Null | live]
(push) ; 9
; [else-branch: 155 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01)))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 156 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) != Null | dead]
; [else-branch: 156 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) == Null | live]
(push) ; 10
; [else-branch: 156 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@199@01))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) TreeNode_res_1@191@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  TreeNode_res_1@191@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
; [then-branch: 157 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 157 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 157 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 157 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 11
; [then-branch: 158 | TreeNode_res_1@191@01 == Null | live]
; [else-branch: 158 | TreeNode_res_1@191@01 != Null | live]
(push) ; 12
; [then-branch: 158 | TreeNode_res_1@191@01 == Null]
(assert (= TreeNode_res_1@191@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 158 | TreeNode_res_1@191@01 != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= TreeNode_res_1@191@01 $Ref.null))
  (= TreeNode_res_1@191@01 $Ref.null)))
(push) ; 11
(assert (not (or
  (= TreeNode_res_1@191@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_1@191@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= TreeNode_res_1@191@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_1@191@01) (as TreeNode<PyType>  PyType))))
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 11
; [then-branch: 159 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 159 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 159 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 159 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 160 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 160 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 12
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (= TreeNode_res_1@191@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | TreeNode_res_1@191@01 != Null | live]
; [else-branch: 161 | TreeNode_res_1@191@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 161 | TreeNode_res_1@191@01 != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@191@01))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@191@01))
(push) ; 13
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@191@01)
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@191@01)
  currentNode@140@01))
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)
                          ($Snap.combine
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))))))))))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@184@01 7562610))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@184@01 7562610))
(declare-const _res@200@01 $Ref)
(assert (= _res@200@01 (_checkDefined $Snap.unit res@184@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> _res@200@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@200@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 13
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 14
; [then-branch: 162 | upper@141@01 == Null | live]
; [else-branch: 162 | upper@141@01 != Null | live]
(push) ; 15
; [then-branch: 162 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 162 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 14
; [then-branch: 163 | lower@142@01 == Null | live]
; [else-branch: 163 | lower@142@01 != Null | live]
(push) ; 15
; [then-branch: 163 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 163 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 13
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 13
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 13
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_1@191@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 141 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 6
; [eval] !int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 164 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 164 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
; [then-branch: 165 | False | dead]
; [else-branch: 165 | True | live]
(push) ; 7
; [else-branch: 165 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none)
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | True | live]
; [else-branch: 166 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 166 | True]
; [exec]
; currentNode_1.TreeNode_payload := val_4
; [exec]
; res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const res@201@01 $Ref)
(assert (= res@201@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 167 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 167 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 167 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 167 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 168 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 168 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 168 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 168 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 169 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 169 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 169 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 169 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
; [else-branch: 170 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 170 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 9
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 171 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | dead]
; [else-branch: 171 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 171 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap val_1@139@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)
                          $Snap.unit))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@201@01 7562610))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@201@01 7562610))
(declare-const _res@203@01 $Ref)
(assert (= _res@203@01 (_checkDefined $Snap.unit res@201@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@203@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@203@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 10
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 11
; [then-branch: 172 | upper@141@01 == Null | live]
; [else-branch: 172 | upper@141@01 != Null | live]
(push) ; 12
; [then-branch: 172 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 172 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 11
; [then-branch: 173 | lower@142@01 == Null | live]
; [else-branch: 173 | lower@142@01 != Null | live]
(push) ; 12
; [then-branch: 173 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 173 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 10
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit)
                                  $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            $Snap.unit)))))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit)
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit)
                              $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 164 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 140 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 67 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 174 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 174 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 5
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType)))
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))) (as TreeNode<PyType>  PyType))
  (getParent%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  currentNode@140@01))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))) currentNode@140@01))
; [exec]
; res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 5
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const res@204@01 $Ref)
(assert (= res@204@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 7562610))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7562610))
(assert (_isDefined $Snap.unit 7562610))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 5
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 175 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 175 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 8
(push) ; 8
; [else-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 6
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 6
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 6
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | dead]
; [else-branch: 177 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 177 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
(pop) ; 6
; [eval] !object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 178 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 178 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 178 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 8
(push) ; 8
; [else-branch: 178 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | live]
; [else-branch: 179 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 179 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
; [exec]
; TreeNode_res_0 := new()
(declare-const TreeNode_res_0@206@01 $Ref)
(assert (not (= TreeNode_res_0@206@01 $Ref.null)))
(assert (not (= TreeNode_res_0@206@01 TreeNode_res_0@156@01)))
(assert (not (= TreeNode_res_0@206@01 key_2@138@01)))
(assert (not (= TreeNode_res_0@206@01 upper@141@01)))
(assert (not (= TreeNode_res_0@206@01 _put_res_0@155@01)))
(assert (not
  (=
    TreeNode_res_0@206@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@206@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@206@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@206@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@206@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (not (= TreeNode_res_0@206@01 _cthread_165@134@01)))
(assert (not (= TreeNode_res_0@206@01 currentNode@140@01)))
(assert (not (= TreeNode_res_0@206@01 self_8@137@01)))
(assert (not (= TreeNode_res_0@206@01 TreeNode_res_1@158@01)))
(assert (not (= TreeNode_res_0@206@01 val_1@139@01)))
(assert (not (= TreeNode_res_0@206@01 _put_res_1@157@01)))
(assert (not (= TreeNode_res_0@206@01 lower@142@01)))
(assert (not (= TreeNode_res_0@206@01 res@204@01)))
; [exec]
; inhale typeof(TreeNode_res_0) == TreeNode()
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 $Snap.unit))
; [eval] typeof(TreeNode_res_0) == TreeNode()
; [eval] typeof(TreeNode_res_0)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res_0@206@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 37570294749124271794790167124), write)
(declare-const $t@208@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 133428712315442505103991910045925601876), write)
(declare-const $t@209@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 8748119199110060322885764141532520454124116), write)
(declare-const $t@210@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@211@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 604545538089943218283080865013920340), write)
(declare-const $t@212@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_165 := TreeNode___init__(_cthread_165, _method_measures_165, _residue_165,
;   TreeNode_res_0, key_8, val_4, null, null, currentNode_1)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
; [eval] issubtype(typeof(self_5), TreeNode())
; [eval] typeof(self_5)
; [eval] TreeNode()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> TreeNode_res_0@206@01) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> TreeNode_res_0@206@01) (as TreeNode<PyType>  PyType)))
; [eval] issubtype(typeof(key_0), int())
; [eval] typeof(key_0)
; [eval] int()
; [eval] issubtype(typeof(val), str())
; [eval] typeof(val)
; [eval] str()
; [eval] left == null || issubtype(typeof(left), TreeNode())
; [eval] left == null
; [eval] right == null || issubtype(typeof(right), TreeNode())
; [eval] right == null
; [eval] parent == null || issubtype(typeof(parent), TreeNode())
; [eval] parent == null
(push) ; 7
; [then-branch: 180 | currentNode@140@01 == Null | live]
; [else-branch: 180 | currentNode@140@01 != Null | live]
(push) ; 8
; [then-branch: 180 | currentNode@140@01 == Null]
(assert (= currentNode@140@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 180 | currentNode@140@01 != Null]
; [eval] issubtype(typeof(parent), TreeNode())
; [eval] typeof(parent)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= currentNode@140@01 $Ref.null)) (= currentNode@140@01 $Ref.null)))
(push) ; 7
(assert (not (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType))))
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@213@01 $Perm)
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 ($Snap.combine ($Snap.first $t@214@01) ($Snap.second $t@214@01))))
(assert (= ($Snap.first $t@214@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@214@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@214@01))
    ($Snap.second ($Snap.second $t@214@01)))))
(assert (= ($Snap.first ($Snap.second $t@214@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@214@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@214@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@214@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_165@136@01 _current_wait_level_162@213@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@214@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@206@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))
  $Snap.unit))
; [eval] self_5.TreeNode_key == key_0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
  key_2@138@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@206@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_payload == val
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))
  val_1@139@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@206@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 181 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) == Null | live]
; [else-branch: 181 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) != Null | live]
(push) ; 8
; [then-branch: 181 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 181 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == left
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@206@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 182 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) == Null | live]
; [else-branch: 182 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 182 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 182 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == right
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@206@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 183 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) == Null | live]
; [else-branch: 183 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 183 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 183 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == parent
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
  currentNode@140@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116)) > none
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116))
; [then-branch: 184 | False | dead]
; [else-branch: 184 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 184 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116)) > none)
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116)) > none
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | True | live]
; [else-branch: 185 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 185 | True]
; [exec]
; currentNode_1.TreeNode_leftChild := TreeNode_res_0
(push) ; 8
(set-option :timeout 10)
(assert (not (= TreeNode_res_0@206@01 currentNode@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(currentNode_1.TreeNode_leftChild), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 186 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) == Null | live]
; [else-branch: 186 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) != Null | live]
(push) ; 9
; [then-branch: 186 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 186 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 187 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) == Null | live]
; [else-branch: 187 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 187 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 187 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 188 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) == Null | live]
; [else-branch: 188 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 188 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 188 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) != Null | dead]
; [else-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) == Null | live]
(push) ; 8
; [else-branch: 189 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01)))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 190 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) != Null | dead]
; [else-branch: 190 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 190 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@214@01))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) TreeNode_res_0@206@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  TreeNode_res_0@206@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 10
; [then-branch: 191 | TreeNode_res_0@206@01 == Null | live]
; [else-branch: 191 | TreeNode_res_0@206@01 != Null | live]
(push) ; 11
; [then-branch: 191 | TreeNode_res_0@206@01 == Null]
(assert (= TreeNode_res_0@206@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 191 | TreeNode_res_0@206@01 != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= TreeNode_res_0@206@01 $Ref.null))
  (= TreeNode_res_0@206@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= TreeNode_res_0@206@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_0@206@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= TreeNode_res_0@206@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_0@206@01) (as TreeNode<PyType>  PyType))))
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 10
; [then-branch: 192 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 192 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 11
; [then-branch: 192 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 192 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 10
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 11
; [then-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 193 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= TreeNode_res_0@206@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | TreeNode_res_0@206@01 != Null | live]
; [else-branch: 194 | TreeNode_res_0@206@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 194 | TreeNode_res_0@206@01 != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 11
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@206@01))
(pop) ; 11
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@206@01))
(push) ; 11
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@206@01)
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@206@01)
  currentNode@140@01))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 195 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 195 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 12
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))))))))))))
                            $Snap.unit)
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@204@01 7562610))
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@204@01 7562610))
(declare-const _res@215@01 $Ref)
(assert (= _res@215@01 (_checkDefined $Snap.unit res@204@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@215@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@215@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 12
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 13
; [then-branch: 196 | upper@141@01 == Null | live]
; [else-branch: 196 | upper@141@01 != Null | live]
(push) ; 14
; [then-branch: 196 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 196 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 13
; [then-branch: 197 | lower@142@01 == Null | live]
; [else-branch: 197 | lower@142@01 != Null | live]
(push) ; 14
; [then-branch: 197 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 197 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 12
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit)
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 12
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 12
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit)
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 12
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 12
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap TreeNode_res_0@206@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit)
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 175 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 198 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 198 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 199 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 199 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 200 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 200 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 200 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 200 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 7
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 7
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 7
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 201 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | live]
; [else-branch: 201 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 201 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
; [exec]
; _cwl_165, _put_res_1 := BinarySearchTree__put(_cthread_165, _method_measures_165,
;   _residue_165, self_16, key_8, val_4, currentNode_1.TreeNode_rightChild, upper_1,
;   currentNode_1.TreeNode_key)
; [eval] _cthread_165 != null
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_8), BinarySearchTree())
; [eval] typeof(self_8)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_2), int())
; [eval] typeof(key_2)
; [eval] int()
; [eval] issubtype(typeof(val_1), str())
; [eval] typeof(val_1)
; [eval] str()
; [eval] issubtype(typeof(currentNode), TreeNode())
; [eval] typeof(currentNode)
; [eval] TreeNode()
; [eval] upper == null || issubtype(typeof(upper), int())
; [eval] upper == null
(push) ; 8
; [then-branch: 202 | upper@141@01 == Null | live]
; [else-branch: 202 | upper@141@01 != Null | live]
(push) ; 9
; [then-branch: 202 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 202 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper), int())
; [eval] typeof(upper)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] lower == null || issubtype(typeof(lower), int())
; [eval] lower == null
(push) ; 8
; [then-branch: 203 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 203 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 203 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 203 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(lower), int())
; [eval] typeof(lower)
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 8
(assert (not (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))) (as int<PyType>  PyType))))
; [eval] self_8 != null
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 8
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 9
; [then-branch: 204 | upper@141@01 == Null | live]
; [else-branch: 204 | upper@141@01 != Null | live]
(push) ; 10
; [then-branch: 204 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 204 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 9
; [then-branch: 205 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 205 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 205 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 205 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] upper != null ==> int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] upper != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upper@141@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upper@141@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | upper@141@01 != Null | live]
; [else-branch: 206 | upper@141@01 == Null | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 206 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] int___lt__(int___unbox__(key_2), int___unbox__(upper))
; [eval] int___unbox__(key_2)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] int___unbox__(upper)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit upper@141@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit upper@141@01)))
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 206 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (not (= upper@141@01 $Ref.null))
  (and
    (not (= upper@141@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> upper@141@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit upper@141@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit upper@141@01)))))
; Joined path conditions
; [eval] lower != null ==> int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] lower != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
; [else-branch: 207 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 207 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
; [eval] int___gt__(int___unbox__(key_2), int___unbox__(lower))
; [eval] int___unbox__(key_2)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] int___unbox__(lower)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    $Ref.null)))
(push) ; 8
(assert (not (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
      $Ref.null))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] perm(MustTerminate(_cthread_165)) == none
; [eval] perm(MustTerminate(_cthread_165))
; [eval] (forperm _r_13: Ref [MustInvokeBounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [MustInvokeUnbounded(_r_13)] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: false)
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_165@216@01 $Perm)
(declare-const _res@217@01 $Ref)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 ($Snap.combine ($Snap.first $t@218@01) ($Snap.second $t@218@01))))
(assert (= ($Snap.first $t@218@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@218@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@218@01))
    ($Snap.second ($Snap.second $t@218@01)))))
(assert (= ($Snap.first ($Snap.second $t@218@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@218@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@218@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@218@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@136@01 _current_wait_level_165@216@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@218@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> _res@217@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 8
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 9
; [then-branch: 208 | upper@141@01 == Null | live]
; [else-branch: 208 | upper@141@01 != Null | live]
(push) ; 10
; [then-branch: 208 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 208 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 9
; [then-branch: 209 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null | live]
; [else-branch: 209 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 209 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 209 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))) != Null]
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))) upper@141@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
  $Snap.unit))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 8
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 8
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 8
; Joined path conditions
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res := _put_res_1
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] _isDefined(7562610)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 210 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 210 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 210 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 210 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 211 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 211 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 211 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 211 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 212 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 212 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 212 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 212 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 213 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | dead]
; [else-branch: 213 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
(push) ; 8
; [else-branch: 213 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 214 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 214 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  currentNode@140@01))
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@217@01 7562610))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@217@01 7562610))
(declare-const _res@220@01 $Ref)
(assert (= _res@220@01 (_checkDefined $Snap.unit _res@217@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@220@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@220@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 10
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 11
; [then-branch: 215 | upper@141@01 == Null | live]
; [else-branch: 215 | upper@141@01 != Null | live]
(push) ; 12
; [then-branch: 215 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 215 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 11
; [then-branch: 216 | lower@142@01 == Null | live]
; [else-branch: 216 | lower@142@01 != Null | live]
(push) ; 12
; [then-branch: 216 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 216 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 10
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 217 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 217 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 217 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 217 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 218 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | dead]
; [else-branch: 218 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 218 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))]
(assert (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 199 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 6
; [eval] !int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 219 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 219 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
; [then-branch: 220 | False | dead]
; [else-branch: 220 | True | live]
(push) ; 7
; [else-branch: 220 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none)
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | True | live]
; [else-branch: 221 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 221 | True]
; [exec]
; currentNode_1.TreeNode_payload := val_4
; [exec]
; res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const res@221@01 $Ref)
(assert (= res@221@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 222 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 222 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 222 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 222 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 223 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 223 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 223 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 223 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 224 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 224 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 224 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 224 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 225 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | dead]
; [else-branch: 225 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
(push) ; 8
; [else-branch: 225 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
; [else-branch: 226 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 226 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(pop) ; 10
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap val_1@139@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@221@01 7562610))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@221@01 7562610))
(declare-const _res@223@01 $Ref)
(assert (= _res@223@01 (_checkDefined $Snap.unit res@221@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@223@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@223@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 10
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 11
; [then-branch: 227 | upper@141@01 == Null | live]
; [else-branch: 227 | upper@141@01 != Null | live]
(push) ; 12
; [then-branch: 227 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 227 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 11
; [then-branch: 228 | lower@142@01 == Null | live]
; [else-branch: 228 | lower@142@01 != Null | live]
(push) ; 12
; [then-branch: 228 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 228 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 10
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 219 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 198 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 174 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))) currentNode@140@01))
; [exec]
; res := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 5
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const res@224@01 $Ref)
(assert (= res@224@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 7562610))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7562610))
(assert (_isDefined $Snap.unit 7562610))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_2@138@01))
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 5
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 229 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 229 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 230 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 230 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 230 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 8
(push) ; 8
; [else-branch: 230 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 6
; Joined path conditions
(assert (TreeNode_hasLeftChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 6
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 6
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | dead]
; [else-branch: 231 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 231 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
(pop) ; 6
; [eval] !object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasLeftChild(currentNode_1))
; [eval] TreeNode_hasLeftChild(currentNode_1)
(push) ; 6
; [eval] issubtype(typeof(self), TreeNode())
; [eval] typeof(self)
; [eval] TreeNode()
; [eval] self != null
; [eval] self.TreeNode_leftChild == null || issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] self.TreeNode_leftChild == null
(push) ; 7
; [then-branch: 232 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 232 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 232 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 8
(push) ; 8
; [else-branch: 232 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self.TreeNode_leftChild), TreeNode())
; [eval] typeof(self.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01))) | live]
; [else-branch: 233 | object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 233 | !(object___bool__(_, TreeNode_hasLeftChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasLeftChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
; [exec]
; TreeNode_res_0 := new()
(declare-const TreeNode_res_0@226@01 $Ref)
(assert (not (= TreeNode_res_0@226@01 $Ref.null)))
(assert (not (= TreeNode_res_0@226@01 TreeNode_res_0@156@01)))
(assert (not (= TreeNode_res_0@226@01 key_2@138@01)))
(assert (not (= TreeNode_res_0@226@01 upper@141@01)))
(assert (not (= TreeNode_res_0@226@01 _put_res_0@155@01)))
(assert (not
  (=
    TreeNode_res_0@226@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@226@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@226@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@226@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (not
  (=
    TreeNode_res_0@226@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (not (= TreeNode_res_0@226@01 _cthread_165@134@01)))
(assert (not (= TreeNode_res_0@226@01 currentNode@140@01)))
(assert (not (= TreeNode_res_0@226@01 self_8@137@01)))
(assert (not (= TreeNode_res_0@226@01 TreeNode_res_1@158@01)))
(assert (not (= TreeNode_res_0@226@01 res@224@01)))
(assert (not (= TreeNode_res_0@226@01 val_1@139@01)))
(assert (not (= TreeNode_res_0@226@01 _put_res_1@157@01)))
(assert (not (= TreeNode_res_0@226@01 lower@142@01)))
; [exec]
; inhale typeof(TreeNode_res_0) == TreeNode()
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 $Snap.unit))
; [eval] typeof(TreeNode_res_0) == TreeNode()
; [eval] typeof(TreeNode_res_0)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res_0@226@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 37570294749124271794790167124), write)
(declare-const $t@228@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 133428712315442505103991910045925601876), write)
(declare-const $t@229@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 8748119199110060322885764141532520454124116), write)
(declare-const $t@230@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@231@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_0, 604545538089943218283080865013920340), write)
(declare-const $t@232@01 $Snap)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_165 := TreeNode___init__(_cthread_165, _method_measures_165, _residue_165,
;   TreeNode_res_0, key_8, val_4, null, null, currentNode_1)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
; [eval] issubtype(typeof(self_5), TreeNode())
; [eval] typeof(self_5)
; [eval] TreeNode()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> TreeNode_res_0@226@01) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> TreeNode_res_0@226@01) (as TreeNode<PyType>  PyType)))
; [eval] issubtype(typeof(key_0), int())
; [eval] typeof(key_0)
; [eval] int()
; [eval] issubtype(typeof(val), str())
; [eval] typeof(val)
; [eval] str()
; [eval] left == null || issubtype(typeof(left), TreeNode())
; [eval] left == null
; [eval] right == null || issubtype(typeof(right), TreeNode())
; [eval] right == null
; [eval] parent == null || issubtype(typeof(parent), TreeNode())
; [eval] parent == null
(push) ; 7
; [then-branch: 234 | currentNode@140@01 == Null | live]
; [else-branch: 234 | currentNode@140@01 != Null | live]
(push) ; 8
; [then-branch: 234 | currentNode@140@01 == Null]
(assert (= currentNode@140@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 234 | currentNode@140@01 != Null]
; [eval] issubtype(typeof(parent), TreeNode())
; [eval] typeof(parent)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= currentNode@140@01 $Ref.null)) (= currentNode@140@01 $Ref.null)))
(push) ; 7
(assert (not (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType))))
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@233@01 $Perm)
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 ($Snap.combine ($Snap.first $t@234@01) ($Snap.second $t@234@01))))
(assert (= ($Snap.first $t@234@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@234@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@234@01))
    ($Snap.second ($Snap.second $t@234@01)))))
(assert (= ($Snap.first ($Snap.second $t@234@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@234@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@234@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@234@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_165@136@01 _current_wait_level_162@233@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@234@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@226@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
  $Snap.unit))
; [eval] self_5.TreeNode_key == key_0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))
  key_2@138@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@226@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_payload == val
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
  val_1@139@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@226@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 235 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) == Null | live]
; [else-branch: 235 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) != Null | live]
(push) ; 8
; [then-branch: 235 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 235 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == left
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@226@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 236 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) == Null | live]
; [else-branch: 236 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 236 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 236 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == right
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_0@226@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 237 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) == Null | live]
; [else-branch: 237 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) != Null | live]
(push) ; 8
; [then-branch: 237 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 237 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == parent
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
  currentNode@140@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116)) > none
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116))
; [then-branch: 238 | False | dead]
; [else-branch: 238 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 238 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116)) > none)
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116)) > none
; [eval] perm(_MaySet(currentNode_1, 8748119199110060322885764141532520454124116))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | True | live]
; [else-branch: 239 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 239 | True]
; [exec]
; currentNode_1.TreeNode_leftChild := TreeNode_res_0
(push) ; 8
(set-option :timeout 10)
(assert (not (= TreeNode_res_0@226@01 currentNode@140@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(currentNode_1.TreeNode_leftChild), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) == Null | live]
; [else-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) != Null | live]
(push) ; 9
; [then-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 240 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 241 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) == Null | live]
; [else-branch: 241 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 241 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 241 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 242 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) == Null | live]
; [else-branch: 242 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 242 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 242 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 243 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) != Null | dead]
; [else-branch: 243 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) == Null | live]
(push) ; 8
; [else-branch: 243 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 244 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) != Null | dead]
; [else-branch: 244 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 244 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) TreeNode_res_0@226@01))
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(push) ; 10
; [then-branch: 245 | TreeNode_res_0@226@01 == Null | live]
; [else-branch: 245 | TreeNode_res_0@226@01 != Null | live]
(push) ; 11
; [then-branch: 245 | TreeNode_res_0@226@01 == Null]
(assert (= TreeNode_res_0@226@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 245 | TreeNode_res_0@226@01 != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= TreeNode_res_0@226@01 $Ref.null))
  (= TreeNode_res_0@226@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= TreeNode_res_0@226@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_0@226@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= TreeNode_res_0@226@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_0@226@01) (as TreeNode<PyType>  PyType))))
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 10
; [then-branch: 246 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 246 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 11
; [then-branch: 246 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 11
(push) ; 11
; [else-branch: 246 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 10
; [then-branch: 247 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 247 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 11
; [then-branch: 247 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 247 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= TreeNode_res_0@226@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | TreeNode_res_0@226@01 != Null | live]
; [else-branch: 248 | TreeNode_res_0@226@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 248 | TreeNode_res_0@226@01 != Null]
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(push) ; 11
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@226@01))
(pop) ; 11
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@226@01))
(push) ; 11
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@226@01)
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_0@226@01)
  currentNode@140@01))
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 249 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | dead]
; [else-branch: 249 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
(push) ; 11
; [else-branch: 249 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))))))))))))
                            $Snap.unit)
                          $Snap.unit))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@224@01 7562610))
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@224@01 7562610))
(declare-const _res@235@01 $Ref)
(assert (= _res@235@01 (_checkDefined $Snap.unit res@224@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> _res@235@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@235@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 12
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 13
; [then-branch: 250 | upper@141@01 == Null | live]
; [else-branch: 250 | upper@141@01 != Null | live]
(push) ; 14
; [then-branch: 250 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 250 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 13
; [then-branch: 251 | lower@142@01 == Null | live]
; [else-branch: 251 | lower@142@01 != Null | live]
(push) ; 14
; [then-branch: 251 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 251 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 12
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit)
                                  $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit)
                                  $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 12
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit)
                                $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit)
                            $Snap.unit)))))))))))))) currentNode@140@01))
(pop) ; 12
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit)
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 12
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 12
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit)
                              $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap TreeNode_res_0@226@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit)
                              $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 229 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 252 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 252 | !(int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
; [else-branch: 253 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 253 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 254 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 254 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 254 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 254 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(pop) ; 7
; Joined path conditions
(assert (TreeNode_hasRightChild%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))
(push) ; 7
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(pop) ; 7
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | dead]
; [else-branch: 255 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 255 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
(pop) ; 7
; [eval] !object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] object___bool__(TreeNode_hasRightChild(currentNode_1))
; [eval] TreeNode_hasRightChild(currentNode_1)
(push) ; 7
; [eval] issubtype(typeof(self_0), TreeNode())
; [eval] typeof(self_0)
; [eval] TreeNode()
; [eval] self_0 != null
; [eval] self_0.TreeNode_rightChild == null || issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] self_0.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 256 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 256 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 256 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 256 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_0.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_0.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
      $Snap.unit))) currentNode@140@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01))) | live]
; [else-branch: 257 | object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 257 | !(object___bool__(_, TreeNode_hasRightChild((_, (_, (First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))), _))), currentNode@140@01)))]
(assert (not
  (object___bool__ $Snap.unit (TreeNode_hasRightChild ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
        $Snap.unit))) currentNode@140@01))))
; [exec]
; TreeNode_res_1 := new()
(declare-const TreeNode_res_1@236@01 $Ref)
(assert (not (= TreeNode_res_1@236@01 $Ref.null)))
(assert (not (= TreeNode_res_1@236@01 TreeNode_res_0@156@01)))
(assert (not (= TreeNode_res_1@236@01 key_2@138@01)))
(assert (not (= TreeNode_res_1@236@01 upper@141@01)))
(assert (not (= TreeNode_res_1@236@01 _put_res_0@155@01)))
(assert (not
  (=
    TreeNode_res_1@236@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@236@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@236@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@236@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (not
  (=
    TreeNode_res_1@236@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (not (= TreeNode_res_1@236@01 _cthread_165@134@01)))
(assert (not (= TreeNode_res_1@236@01 currentNode@140@01)))
(assert (not (= TreeNode_res_1@236@01 self_8@137@01)))
(assert (not (= TreeNode_res_1@236@01 TreeNode_res_1@158@01)))
(assert (not (= TreeNode_res_1@236@01 res@224@01)))
(assert (not (= TreeNode_res_1@236@01 val_1@139@01)))
(assert (not (= TreeNode_res_1@236@01 _put_res_1@157@01)))
(assert (not (= TreeNode_res_1@236@01 lower@142@01)))
; [exec]
; inhale typeof(TreeNode_res_1) == TreeNode()
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 $Snap.unit))
; [eval] typeof(TreeNode_res_1) == TreeNode()
; [eval] typeof(TreeNode_res_1)
; [eval] TreeNode()
(assert (= (typeof<PyType> TreeNode_res_1@236@01) (as TreeNode<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 37570294749124271794790167124), write)
(declare-const $t@238@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 133428712315442505103991910045925601876), write)
(declare-const $t@239@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 8748119199110060322885764141532520454124116), write)
(declare-const $t@240@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 2239518514972175601730513505296554308663603796), write)
(declare-const $t@241@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(TreeNode_res_1, 604545538089943218283080865013920340), write)
(declare-const $t@242@01 $Snap)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_165 := TreeNode___init__(_cthread_165, _method_measures_165, _residue_165,
;   TreeNode_res_1, key_8, val_4, null, null, currentNode_1)
; [eval] _cthread_162 != null
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
; [eval] self_5 != null
; [eval] issubtype(typeof(self_5), TreeNode())
; [eval] typeof(self_5)
; [eval] TreeNode()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> TreeNode_res_1@236@01) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> TreeNode_res_1@236@01) (as TreeNode<PyType>  PyType)))
; [eval] issubtype(typeof(key_0), int())
; [eval] typeof(key_0)
; [eval] int()
; [eval] issubtype(typeof(val), str())
; [eval] typeof(val)
; [eval] str()
; [eval] left == null || issubtype(typeof(left), TreeNode())
; [eval] left == null
; [eval] right == null || issubtype(typeof(right), TreeNode())
; [eval] right == null
; [eval] parent == null || issubtype(typeof(parent), TreeNode())
; [eval] parent == null
(push) ; 8
; [then-branch: 258 | currentNode@140@01 == Null | live]
; [else-branch: 258 | currentNode@140@01 != Null | live]
(push) ; 9
; [then-branch: 258 | currentNode@140@01 == Null]
(assert (= currentNode@140@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 258 | currentNode@140@01 != Null]
; [eval] issubtype(typeof(parent), TreeNode())
; [eval] typeof(parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (= currentNode@140@01 $Ref.null)) (= currentNode@140@01 $Ref.null)))
(push) ; 8
(assert (not (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= currentNode@140@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode@140@01) (as TreeNode<PyType>  PyType))))
; [eval] self_5 != null
; [eval] perm(MustTerminate(_cthread_162)) == none
; [eval] perm(MustTerminate(_cthread_162))
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_162@243@01 $Perm)
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@244@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@244@01))
    ($Snap.second ($Snap.second $t@244@01)))))
(assert (= ($Snap.first ($Snap.second $t@244@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@244@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@244@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@244@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_165@136@01 _current_wait_level_162@243@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@244@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@236@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_key), int())
; [eval] typeof(self_5.TreeNode_key)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
  $Snap.unit))
; [eval] self_5.TreeNode_key == key_0
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  key_2@138@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@236@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_5.TreeNode_payload), str())
; [eval] typeof(self_5.TreeNode_payload)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_payload == val
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  val_1@139@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@236@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == null || issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] self_5.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 259 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) == Null | live]
; [else-branch: 259 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) != Null | live]
(push) ; 9
; [then-branch: 259 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 259 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_leftChild), TreeNode())
; [eval] typeof(self_5.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_leftChild == left
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@236@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == null || issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] self_5.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 260 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) == Null | live]
; [else-branch: 260 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 260 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 260 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_rightChild), TreeNode())
; [eval] typeof(self_5.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_rightChild == right
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= currentNode@140@01 TreeNode_res_1@236@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == null || issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] self_5.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 261 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) == Null | live]
; [else-branch: 261 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 261 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 261 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_5.TreeNode_parent), TreeNode())
; [eval] typeof(self_5.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))))
  $Snap.unit))
; [eval] self_5.TreeNode_parent == parent
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
  currentNode@140@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796)) > none
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796))
; [then-branch: 262 | False | dead]
; [else-branch: 262 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 262 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796)) > none)
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796)) > none
; [eval] perm(_MaySet(currentNode_1, 2239518514972175601730513505296554308663603796))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | True | live]
; [else-branch: 263 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 263 | True]
; [exec]
; currentNode_1.TreeNode_rightChild := TreeNode_res_1
(push) ; 9
(set-option :timeout 10)
(assert (not (= TreeNode_res_1@236@01 currentNode@140@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree(currentNode_1.TreeNode_rightChild), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 264 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) == Null | live]
; [else-branch: 264 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) != Null | live]
(push) ; 10
; [then-branch: 264 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 264 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 9
; [then-branch: 265 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) == Null | live]
; [else-branch: 265 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 265 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 265 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 9
; [then-branch: 266 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) == Null | live]
; [else-branch: 266 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 266 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 266 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 267 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) != Null | dead]
; [else-branch: 267 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) == Null | live]
(push) ; 9
; [else-branch: 267 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01)))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 268 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) != Null | dead]
; [else-branch: 268 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) == Null | live]
(push) ; 10
; [else-branch: 268 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) TreeNode_res_1@236@01))
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(push) ; 11
; [then-branch: 269 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 269 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 269 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 269 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 11
; [then-branch: 270 | TreeNode_res_1@236@01 == Null | live]
; [else-branch: 270 | TreeNode_res_1@236@01 != Null | live]
(push) ; 12
; [then-branch: 270 | TreeNode_res_1@236@01 == Null]
(assert (= TreeNode_res_1@236@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 270 | TreeNode_res_1@236@01 != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= TreeNode_res_1@236@01 $Ref.null))
  (= TreeNode_res_1@236@01 $Ref.null)))
(push) ; 11
(assert (not (or
  (= TreeNode_res_1@236@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_1@236@01) (as TreeNode<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= TreeNode_res_1@236@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> TreeNode_res_1@236@01) (as TreeNode<PyType>  PyType))))
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 11
; [then-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 271 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 272 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | dead]
; [else-branch: 272 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
(push) ; 11
; [else-branch: 272 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (= TreeNode_res_1@236@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | TreeNode_res_1@236@01 != Null | live]
; [else-branch: 273 | TreeNode_res_1@236@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 273 | TreeNode_res_1@236@01 != Null]
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@236@01))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@236@01))
(push) ; 13
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@236@01)
  currentNode@140@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) TreeNode_res_1@236@01)
  currentNode@140@01))
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      $Snap.unit)))))))))))))
                            $Snap.unit)))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@224@01 7562610))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@224@01 7562610))
(declare-const _res@245@01 $Ref)
(assert (= _res@245@01 (_checkDefined $Snap.unit res@224@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> _res@245@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@245@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 13
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 14
; [then-branch: 274 | upper@141@01 == Null | live]
; [else-branch: 274 | upper@141@01 != Null | live]
(push) ; 15
; [then-branch: 274 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 274 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 14
; [then-branch: 275 | lower@142@01 == Null | live]
; [else-branch: 275 | lower@142@01 != Null | live]
(push) ; 15
; [then-branch: 275 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 275 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 13
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 13
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              $Snap.unit)))))))))))))
                                    $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 13
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          ($Snap.combine
                                                            $Snap.unit
                                                            $Snap.unit)))))))))))))
                                  $Snap.unit))))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                    ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                        ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                            ($Snap.combine
                                              $Snap.unit
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                ($Snap.combine
                                                  $Snap.unit
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        $Snap.unit)))))))))))))
                              $Snap.unit))))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 13
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.$RefTo$Snap TreeNode_res_1@236@01)
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
                                              ($Snap.combine
                                                $Snap.unit
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
                                                  ($Snap.combine
                                                    $Snap.unit
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
                                                      ($Snap.combine
                                                        $Snap.unit
                                                        ($Snap.combine
                                                          $Snap.unit
                                                          $Snap.unit)))))))))))))
                                $Snap.unit))))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 253 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(pop) ; 6
; [eval] !int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___gt__(int___unbox__(key_8), int___unbox__(currentNode_1.TreeNode_key))
; [eval] int___unbox__(key_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(currentNode_1.TreeNode_key)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))) | live]
; [else-branch: 276 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 276 | !(int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
; [then-branch: 277 | False | dead]
; [else-branch: 277 | True | live]
(push) ; 7
; [else-branch: 277 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none)
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876)) > none
; [eval] perm(_MaySet(currentNode_1, 133428712315442505103991910045925601876))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | True | live]
; [else-branch: 278 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 278 | True]
; [exec]
; currentNode_1.TreeNode_payload := val_4
; [exec]
; res := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const res@246@01 $Ref)
(assert (= res@246@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 $Snap.unit))
; [eval] _isDefined(7562610)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_1), write)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
; [eval] int()
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
; [eval] str()
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 279 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
; [else-branch: 279 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 279 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 279 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(push) ; 8
; [then-branch: 280 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
; [else-branch: 280 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 280 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 280 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(push) ; 8
; [then-branch: 281 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null | live]
; [else-branch: 281 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 281 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 281 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
; [then-branch: 282 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) != Null | dead]
; [else-branch: 282 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null | live]
(push) ; 8
; [else-branch: 282 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
; [then-branch: 283 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) != Null | dead]
; [else-branch: 283 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 283 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap val_1@139@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) currentNode@140@01))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@246@01 7562610))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@246@01 7562610))
(declare-const _res@248@01 $Ref)
(assert (= _res@248@01 (_checkDefined $Snap.unit res@246@01 7562610)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@248@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@248@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(sorted(currentNode, upper, lower))
; [eval] sorted(currentNode, upper, lower)
(push) ; 10
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
(push) ; 11
; [then-branch: 284 | upper@141@01 == Null | live]
; [else-branch: 284 | upper@141@01 != Null | live]
(push) ; 12
; [then-branch: 284 | upper@141@01 == Null]
(assert (= upper@141@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 284 | upper@141@01 != Null]
(assert (not (= upper@141@01 $Ref.null)))
; [eval] issubtype(typeof(upper_0), int())
; [eval] typeof(upper_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 11
; [then-branch: 285 | lower@142@01 == Null | live]
; [else-branch: 285 | lower@142@01 != Null | live]
(push) ; 12
; [then-branch: 285 | lower@142@01 == Null]
(assert (= lower@142@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 285 | lower@142@01 != Null]
(assert (not (= lower@142@01 $Ref.null)))
; [eval] issubtype(typeof(lower_0), int())
; [eval] typeof(lower_0)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(pop) ; 10
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.$RefTo$Snap val_1@139@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                              ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(push) ; 10
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.$RefTo$Snap val_1@139@01)
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                            ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)))))))))))))))) currentNode@140@01 upper@141@01 lower@142@01)))
; [eval] getParent(currentNode) == old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$RefTo$Snap val_1@139@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                    ($Snap.combine
                      $Snap.unit
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) currentNode@140@01))
; [eval] old(getParent(currentNode))
; [eval] getParent(currentNode)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(pop) ; 10
; Joined path conditions
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))
(push) ; 10
(assert (not (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.$RefTo$Snap val_1@139@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                          ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)))))))))))))) currentNode@140@01)
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))) currentNode@140@01)))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 276 | int___gt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 252 | int___lt__(_, int___unbox__(_, key_2@138@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@145@01)))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_2@138@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree___setitem__ ----------
(declare-const _cthread_166@249@01 $Ref)
(declare-const _caller_measures_166@250@01 Seq<Measure$>)
(declare-const _residue_166@251@01 $Perm)
(declare-const self_9@252@01 $Ref)
(declare-const k@253@01 $Ref)
(declare-const v@254@01 $Ref)
(declare-const _current_wait_level_166@255@01 $Perm)
(declare-const _cthread_166@256@01 $Ref)
(declare-const _caller_measures_166@257@01 Seq<Measure$>)
(declare-const _residue_166@258@01 $Perm)
(declare-const self_9@259@01 $Ref)
(declare-const k@260@01 $Ref)
(declare-const v@261@01 $Ref)
(declare-const _current_wait_level_166@262@01 $Perm)
(push) ; 1
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 ($Snap.combine ($Snap.first $t@263@01) ($Snap.second $t@263@01))))
(assert (= ($Snap.first $t@263@01) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@256@01 $Ref.null)))
(assert (=
  ($Snap.second $t@263@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@263@01))
    ($Snap.second ($Snap.second $t@263@01)))))
(assert (= ($Snap.first ($Snap.second $t@263@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@256@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@263@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@263@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@263@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@263@01))) $Snap.unit))
; [eval] issubtype(typeof(self_9), BinarySearchTree())
; [eval] typeof(self_9)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_9@259@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@263@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@263@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@263@01))))
  $Snap.unit))
; [eval] issubtype(typeof(k), int())
; [eval] typeof(k)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> k@260@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(v), str())
; [eval] typeof(v)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> v@261@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01))))))
  $Snap.unit))
; [eval] self_9 != null
(assert (not (= self_9@259@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@263@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 ($Snap.combine ($Snap.first $t@264@01) ($Snap.second $t@264@01))))
(assert (= ($Snap.first $t@264@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@264@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@264@01))
    ($Snap.second ($Snap.second $t@264@01)))))
(assert (= ($Snap.first ($Snap.second $t@264@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@264@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@264@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@264@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_166@258@01 _current_wait_level_166@262@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@264@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@265@01 $Ref)
; [exec]
; var self_17: Ref
(declare-const self_17@266@01 $Ref)
; [exec]
; var k_0: Ref
(declare-const k_0@267@01 $Ref)
; [exec]
; var v_0: Ref
(declare-const v_0@268@01 $Ref)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@269@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@270@01 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_9) == BinarySearchTree()
(declare-const $t@271@01 $Snap)
(assert (= $t@271@01 $Snap.unit))
; [eval] typeof(self_9) == BinarySearchTree()
; [eval] typeof(self_9)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_9@259@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_17 := self_9
; [exec]
; k_0 := k
; [exec]
; v_0 := v
; [exec]
; _cwl_166 := BinarySearchTree_put(_cthread_166, _method_measures_166, _residue_166,
;   self_17, k_0, v_0)
; [eval] _cthread_164 != null
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_7), BinarySearchTree())
; [eval] typeof(self_7)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_1), int())
; [eval] typeof(key_1)
; [eval] int()
; [eval] issubtype(typeof(val_0), str())
; [eval] typeof(val_0)
; [eval] str()
; [eval] self_7 != null
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_164@272@01 $Perm)
(declare-const $t@273@01 $Snap)
(assert (= $t@273@01 ($Snap.combine ($Snap.first $t@273@01) ($Snap.second $t@273@01))))
(assert (= ($Snap.first $t@273@01) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@273@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@273@01))
    ($Snap.second ($Snap.second $t@273@01)))))
(assert (= ($Snap.first ($Snap.second $t@273@01)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@273@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@273@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@273@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_166@258@01 _current_wait_level_164@272@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@273@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree_get ----------
(declare-const _cthread_167@274@01 $Ref)
(declare-const _caller_measures_167@275@01 Seq<Measure$>)
(declare-const _residue_167@276@01 $Perm)
(declare-const self_10@277@01 $Ref)
(declare-const key_3@278@01 $Ref)
(declare-const _current_wait_level_167@279@01 $Perm)
(declare-const _res@280@01 $Ref)
(declare-const _cthread_167@281@01 $Ref)
(declare-const _caller_measures_167@282@01 Seq<Measure$>)
(declare-const _residue_167@283@01 $Perm)
(declare-const self_10@284@01 $Ref)
(declare-const key_3@285@01 $Ref)
(declare-const _current_wait_level_167@286@01 $Perm)
(declare-const _res@287@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 ($Snap.combine ($Snap.first $t@288@01) ($Snap.second $t@288@01))))
(assert (= ($Snap.first $t@288@01) $Snap.unit))
; [eval] _cthread_167 != null
(assert (not (= _cthread_167@281@01 $Ref.null)))
(assert (=
  ($Snap.second $t@288@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@288@01))
    ($Snap.second ($Snap.second $t@288@01)))))
(assert (= ($Snap.first ($Snap.second $t@288@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_167), Thread_0())
; [eval] typeof(_cthread_167)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_167@281@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@288@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@288@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@288@01))) $Snap.unit))
; [eval] issubtype(typeof(self_10), BinarySearchTree())
; [eval] typeof(self_10)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_10@284@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@288@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@288@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@288@01))))
  $Snap.unit))
; [eval] issubtype(typeof(key_3), int())
; [eval] typeof(key_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> key_3@285@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))
  $Snap.unit))
; [eval] self_10 != null
(assert (not (= self_10@284@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(assert (= ($Snap.first $t@289@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_167)
(assert (=
  ($Snap.second $t@289@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@289@01))
    ($Snap.second ($Snap.second $t@289@01)))))
(assert (= ($Snap.first ($Snap.second $t@289@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_167)
(assert (=
  ($Snap.second ($Snap.second $t@289@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@289@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@289@01))) $Snap.unit))
; [eval] _residue_167 <= _current_wait_level_167
(assert (<= _residue_167@283@01 _current_wait_level_167@286@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@289@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 3
; [then-branch: 286 | _res@287@01 == Null | live]
; [else-branch: 286 | _res@287@01 != Null | live]
(push) ; 4
; [then-branch: 286 | _res@287@01 == Null]
(assert (= _res@287@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 286 | _res@287@01 != Null]
(assert (not (= _res@287@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@287@01 $Ref.null)) (= _res@287@01 $Ref.null)))
(assert (or
  (= _res@287@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@287@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@290@01 $Ref)
; [exec]
; var res_0: Ref
(declare-const res_0@291@01 $Ref)
; [exec]
; var self_18: Ref
(declare-const self_18@292@01 $Ref)
; [exec]
; var key_9: Ref
(declare-const key_9@293@01 $Ref)
; [exec]
; var _get_res: Ref
(declare-const _get_res@294@01 $Ref)
; [exec]
; var _cwl_167: Perm
(declare-const _cwl_167@295@01 $Perm)
; [exec]
; var _method_measures_167: Seq[Measure$]
(declare-const _method_measures_167@296@01 Seq<Measure$>)
; [exec]
; _method_measures_167 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_10) == BinarySearchTree()
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 $Snap.unit))
; [eval] typeof(self_10) == BinarySearchTree()
; [eval] typeof(self_10)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_10@284@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; self_18 := self_10
; [exec]
; key_9 := key_3
; [exec]
; unfold acc(bst(self_18), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Snap.unit))
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(set-option :timeout 0)
(push) ; 3
; [then-branch: 287 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
; [else-branch: 287 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
(push) ; 4
; [then-branch: 287 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 287 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))) (as int<PyType>  PyType)))
; [eval] t_0.BinarySearchTree_root != null
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
; [else-branch: 288 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 288 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
  $Snap.unit))
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 4
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))) (as TreeNode<PyType>  PyType)))
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))) (as TreeNode<PyType>  PyType))
  (sorted%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)))
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null))))
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bst%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))) self_10@284@01))
; [eval] object___bool__(self_18.BinarySearchTree_root)
(set-option :timeout 0)
(push) ; 4
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
(pop) ; 4
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 289 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))) | live]
; [else-branch: 289 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 289 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))))]
(assert (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
; [exec]
; _cwl_167, _get_res := BinarySearchTree__get(_cthread_167, _method_measures_167,
;   _residue_167, self_18, key_9, self_18.BinarySearchTree_root, __prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 5
; [then-branch: 290 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
; [else-branch: 290 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
(push) ; 6
; [then-branch: 290 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 290 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit 2)))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit 2)))
(push) ; 5
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)) 0))
(pop) ; 5
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)) 0))
(push) ; 5
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)) 0))
; [eval] currentNode_0 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
; [else-branch: 291 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 291 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (not (= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))
      ($Perm.min
        $Perm.Write
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
    $Perm.No)
  (<
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))
      ($Perm.min
        $Perm.Write
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@298@01 $Perm)
(declare-const _res@299@01 $Ref)
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 ($Snap.combine ($Snap.first $t@300@01) ($Snap.second $t@300@01))))
(assert (= ($Snap.first $t@300@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@300@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@300@01))
    ($Snap.second ($Snap.second $t@300@01)))))
(assert (= ($Snap.first ($Snap.second $t@300@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@300@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@300@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@300@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@300@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_167@283@01 _current_wait_level_168@298@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@300@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@300@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@300@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@300@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 6
; [then-branch: 292 | _res@299@01 == Null | live]
; [else-branch: 292 | _res@299@01 != Null | live]
(push) ; 7
; [then-branch: 292 | _res@299@01 == Null]
(assert (= _res@299@01 $Ref.null))
(pop) ; 7
(push) ; 7
; [else-branch: 292 | _res@299@01 != Null]
(assert (not (= _res@299@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@299@01 $Ref.null)) (= _res@299@01 $Ref.null)))
(assert (or
  (= _res@299@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@299@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@300@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@300@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@300@01))))))))
; [eval] currentNode_0 != null
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
; [else-branch: 293 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 293 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (not (= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $t@301@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        $Perm.Write
        ($Perm.min
          $Perm.Write
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))))
    (=
      $t@301@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))))
  (=>
    (<
      $Perm.No
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))
    (=
      $t@301@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@300@01)))))))))
(assert (<=
  $Perm.No
  (+
    (-
      $Perm.Write
      ($Perm.min
        $Perm.Write
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@300@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_0 := _get_res
; [exec]
; inhale _isDefined(207759828338)
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] _isDefined(207759828338)
(set-option :timeout 0)
(push) ; 7
(assert (_isDefined%precondition $Snap.unit 207759828338))
(pop) ; 7
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 207759828338))
(assert (_isDefined $Snap.unit 207759828338))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(bst(self_18), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(set-option :timeout 0)
(push) ; 7
; [then-branch: 294 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
; [else-branch: 294 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
(push) ; 8
; [then-branch: 294 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 294 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
; [eval] t_0.BinarySearchTree_root != null
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
; [else-branch: 295 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 295 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        $Perm.Write
        ($Perm.min
          $Perm.Write
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))
    ($Perm.min
      (+
        (-
          $Perm.Write
          ($Perm.min
            $Perm.Write
            (/
              (to_real 1)
              (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min
              $Perm.Write
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+
          (-
            $Perm.Write
            ($Perm.min
              $Perm.Write
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2)))))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 8
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (-
      $Perm.Write
      ($Perm.min
        $Perm.Write
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 2))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null))
(pop) ; 8
; Joined path conditions
(assert (sorted%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (sorted ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null))))
(push) ; 8
(assert (not (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit (sorted ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $t@301@01))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))) $Ref.null $Ref.null)))
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))
          ($Snap.combine $Snap.unit ($Snap.combine $t@301@01 $Snap.unit))))))) self_10@284@01))
; [exec]
; _res := _checkDefined(res_0, 207759828338)
; [eval] _checkDefined(res_0, 207759828338)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@299@01 207759828338))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@299@01 207759828338))
(declare-const _res@303@01 $Ref)
(assert (= _res@303@01 (_checkDefined $Snap.unit _res@299@01 207759828338)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 8
; [then-branch: 296 | _res@303@01 == Null | live]
; [else-branch: 296 | _res@303@01 != Null | live]
(push) ; 9
; [then-branch: 296 | _res@303@01 == Null]
(assert (= _res@303@01 $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 296 | _res@303@01 != Null]
(assert (not (= _res@303@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@303@01 $Ref.null)) (= _res@303@01 $Ref.null)))
(push) ; 8
(assert (not (or
  (= _res@303@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@303@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@303@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@303@01) (as str<PyType>  PyType))))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 289 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
(pop) ; 4
; [eval] !object___bool__(self_18.BinarySearchTree_root)
; [eval] object___bool__(self_18.BinarySearchTree_root)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))))) | live]
; [else-branch: 297 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 297 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
; [exec]
; fold acc(bst(self_18), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(push) ; 5
; [then-branch: 298 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
; [else-branch: 298 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
(push) ; 6
; [then-branch: 298 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 298 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
; [eval] t_0.BinarySearchTree_root != null
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 299 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
; [else-branch: 299 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 299 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
; [eval] bool___unbox__(sorted(t_0.BinarySearchTree_root, null, null))
; [eval] sorted(t_0.BinarySearchTree_root, null, null)
(push) ; 6
; [eval] issubtype(typeof(n_0), TreeNode())
; [eval] typeof(n_0)
; [eval] TreeNode()
; [eval] upper_0 == null || issubtype(typeof(upper_0), int())
; [eval] upper_0 == null
; [eval] lower_0 == null || issubtype(typeof(lower_0), int())
; [eval] lower_0 == null
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
              $Snap.unit))))))) self_10@284@01))
; [exec]
; _res := null
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 297 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))))]
(assert (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 288 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (bst%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))) self_10@284@01))
; [eval] object___bool__(self_18.BinarySearchTree_root)
(set-option :timeout 0)
(push) ; 4
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
(pop) ; 4
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))) | dead]
; [else-branch: 300 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 300 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
(pop) ; 4
; [eval] !object___bool__(self_18.BinarySearchTree_root)
; [eval] object___bool__(self_18.BinarySearchTree_root)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))))) | live]
; [else-branch: 301 | object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 301 | !(object___bool__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))))))]
(assert (not
  (object___bool__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))))
; [exec]
; fold acc(bst(self_18), write)
; [eval] issubtype(typeof(t_0), BinarySearchTree())
; [eval] typeof(t_0)
; [eval] BinarySearchTree()
; [eval] t_0.BinarySearchTree_root == null || issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] t_0.BinarySearchTree_root == null
(push) ; 5
; [then-branch: 302 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
; [else-branch: 302 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | live]
(push) ; 6
; [then-branch: 302 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(pop) ; 6
(push) ; 6
; [else-branch: 302 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(t_0.BinarySearchTree_root), TreeNode())
; [eval] typeof(t_0.BinarySearchTree_root)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(t_0.BinarySearchTree_size), int())
; [eval] typeof(t_0.BinarySearchTree_size)
; [eval] int()
; [eval] t_0.BinarySearchTree_root != null
; [then-branch: 303 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) != Null | dead]
; [else-branch: 303 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null | live]
(push) ; 5
; [else-branch: 303 | First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))))) == Null]
(assert (bst%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))))
          ($Snap.combine $Snap.unit $Snap.unit)))))) self_10@284@01))
; [exec]
; _res := null
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree__get ----------
(declare-const _cthread_168@304@01 $Ref)
(declare-const _caller_measures_168@305@01 Seq<Measure$>)
(declare-const _residue_168@306@01 $Perm)
(declare-const self_11@307@01 $Ref)
(declare-const key_4@308@01 $Ref)
(declare-const currentNode_0@309@01 $Ref)
(declare-const perm_0@310@01 $Ref)
(declare-const _current_wait_level_168@311@01 $Perm)
(declare-const _res@312@01 $Ref)
(declare-const _cthread_168@313@01 $Ref)
(declare-const _caller_measures_168@314@01 Seq<Measure$>)
(declare-const _residue_168@315@01 $Perm)
(declare-const self_11@316@01 $Ref)
(declare-const key_4@317@01 $Ref)
(declare-const currentNode_0@318@01 $Ref)
(declare-const perm_0@319@01 $Ref)
(declare-const _current_wait_level_168@320@01 $Perm)
(declare-const _res@321@01 $Ref)
(push) ; 1
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 ($Snap.combine ($Snap.first $t@322@01) ($Snap.second $t@322@01))))
(assert (= ($Snap.first $t@322@01) $Snap.unit))
; [eval] _cthread_168 != null
(assert (not (= _cthread_168@313@01 $Ref.null)))
(assert (=
  ($Snap.second $t@322@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@322@01))
    ($Snap.second ($Snap.second $t@322@01)))))
(assert (= ($Snap.first ($Snap.second $t@322@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_168@313@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@322@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@322@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@322@01))) $Snap.unit))
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_11@316@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@322@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
  $Snap.unit))
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> key_4@317@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  $Snap.unit))
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 2
; [then-branch: 304 | currentNode_0@318@01 == Null | live]
; [else-branch: 304 | currentNode_0@318@01 != Null | live]
(push) ; 3
; [then-branch: 304 | currentNode_0@318@01 == Null]
(assert (= currentNode_0@318@01 $Ref.null))
(pop) ; 3
(push) ; 3
; [else-branch: 304 | currentNode_0@318@01 != Null]
(assert (not (= currentNode_0@318@01 $Ref.null)))
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= currentNode_0@318@01 $Ref.null)) (= currentNode_0@318@01 $Ref.null)))
(assert (or
  (= currentNode_0@318@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> currentNode_0@318@01) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> perm_0@319@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
  $Snap.unit))
; [eval] self_11 != null
(assert (not (= self_11@316@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 2
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit perm_0@319@01))
(pop) ; 2
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit perm_0@319@01))
(push) ; 2
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 0))
(pop) ; 2
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 0))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
; [eval] currentNode_0 != null
(push) ; 2
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (not (= currentNode_0@318@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | currentNode_0@318@01 != Null | live]
; [else-branch: 305 | currentNode_0@318@01 == Null | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 305 | currentNode_0@318@01 != Null]
(assert (not (= currentNode_0@318@01 $Ref.null)))
; [eval] int___unbox__(perm_0)
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 ($Snap.combine ($Snap.first $t@323@01) ($Snap.second $t@323@01))))
(assert (= ($Snap.first $t@323@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@323@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@323@01))
    ($Snap.second ($Snap.second $t@323@01)))))
(assert (= ($Snap.first ($Snap.second $t@323@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@323@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@323@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@323@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@320@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@323@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 4
; [then-branch: 306 | _res@321@01 == Null | live]
; [else-branch: 306 | _res@321@01 != Null | live]
(push) ; 5
; [then-branch: 306 | _res@321@01 == Null]
(assert (= _res@321@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 306 | _res@321@01 != Null]
(assert (not (= _res@321@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@321@01 $Ref.null)) (= _res@321@01 $Ref.null)))
(assert (or
  (= _res@321@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@321@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
; [eval] currentNode_0 != null
(push) ; 4
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | currentNode_0@318@01 != Null | live]
; [else-branch: 307 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 307 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; var _err: Ref
(declare-const _err@324@01 $Ref)
; [exec]
; var res_1: Ref
(declare-const res_1@325@01 $Ref)
; [exec]
; var self_19: Ref
(declare-const self_19@326@01 $Ref)
; [exec]
; var key_10: Ref
(declare-const key_10@327@01 $Ref)
; [exec]
; var currentNode_2: Ref
(declare-const currentNode_2@328@01 $Ref)
; [exec]
; var perm_1: Ref
(declare-const perm_1@329@01 $Ref)
; [exec]
; var _get_res_0: Ref
(declare-const _get_res_0@330@01 $Ref)
; [exec]
; var _get_res_1: Ref
(declare-const _get_res_1@331@01 $Ref)
; [exec]
; var _cwl_168: Perm
(declare-const _cwl_168@332@01 $Perm)
; [exec]
; var _method_measures_168: Seq[Measure$]
(declare-const _method_measures_168@333@01 Seq<Measure$>)
; [exec]
; _method_measures_168 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_11) == BinarySearchTree()
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 $Snap.unit))
; [eval] typeof(self_11) == BinarySearchTree()
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_11@316@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; self_19 := self_11
; [exec]
; key_10 := key_4
; [exec]
; currentNode_2 := currentNode_0
; [exec]
; perm_1 := perm_0
; [eval] !object___bool__(currentNode_2)
; [eval] object___bool__(currentNode_2)
(set-option :timeout 0)
(push) ; 4
(assert (object___bool__%precondition $Snap.unit currentNode_0@318@01))
(pop) ; 4
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit currentNode_0@318@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit currentNode_0@318@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 308 | !(object___bool__(_, currentNode_0@318@01)) | dead]
; [else-branch: 308 | object___bool__(_, currentNode_0@318@01) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 308 | object___bool__(_, currentNode_0@318@01)]
(assert (object___bool__ $Snap.unit currentNode_0@318@01))
(pop) ; 4
; [eval] !!object___bool__(currentNode_2)
; [eval] !object___bool__(currentNode_2)
; [eval] object___bool__(currentNode_2)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (object___bool__ $Snap.unit currentNode_0@318@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit currentNode_0@318@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | object___bool__(_, currentNode_0@318@01) | live]
; [else-branch: 309 | !(object___bool__(_, currentNode_0@318@01)) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 309 | object___bool__(_, currentNode_0@318@01)]
(assert (object___bool__ $Snap.unit currentNode_0@318@01))
; [exec]
; unfold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(assert (issubtype<Bool> (typeof<PyType> currentNode_0@318@01) (as TreeNode<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(assert (<=
  (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
  $Perm.Write))
(assert (=>
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))
  (not (= currentNode_0@318@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 310 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 310 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 6
; [then-branch: 310 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 310 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 311 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 311 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 6
; [then-branch: 311 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 311 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 312 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 312 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 6
; [then-branch: 312 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 312 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
      $Ref.null))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
(assert (or
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))))
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 313 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 313 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 313 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))) (as TreeNode<PyType>  PyType)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))) (as TreeNode<PyType>  PyType))
  (getParent%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
  currentNode_0@318@01))
; [eval] n_1.TreeNode_rightChild != null
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 314 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 314 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType))
  (getParent%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  currentNode_0@318@01))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))) currentNode_0@318@01))
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
; [else-branch: 315 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 315 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
; [exec]
; res_1 := currentNode_2.TreeNode_payload
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const res_1@335@01 $Ref)
(assert (=
  res_1@335@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 316 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 316 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 316 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 316 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 317 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 317 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 317 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 317 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 318 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 318 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 318 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 318 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 319 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 319 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 320 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 320 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@335@01 212054795634))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@335@01 212054795634))
(declare-const _res@337@01 $Ref)
(assert (= _res@337@01 (_checkDefined $Snap.unit res_1@335@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 321 | _res@337@01 == Null | live]
; [else-branch: 321 | _res@337@01 != Null | live]
(push) ; 11
; [then-branch: 321 | _res@337@01 == Null]
(assert (= _res@337@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 321 | _res@337@01 != Null]
(assert (not (= _res@337@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@337@01 $Ref.null)) (= _res@337@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= _res@337@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@337@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@337@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@337@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | currentNode_0@318@01 != Null | live]
; [else-branch: 322 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 322 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 315 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(pop) ; 7
; [eval] !int___eq__(currentNode_2.TreeNode_key, key_10)
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
; [else-branch: 323 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 323 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
; [else-branch: 324 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 324 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
; [exec]
; _cwl_168, _get_res_0 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_leftChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 325 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 325 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 325 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 325 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 326 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 326 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No)
  (<
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@338@01 $Perm)
(declare-const _res@339@01 $Ref)
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 ($Snap.combine ($Snap.first $t@340@01) ($Snap.second $t@340@01))))
(assert (= ($Snap.first $t@340@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@340@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@340@01))
    ($Snap.second ($Snap.second $t@340@01)))))
(assert (= ($Snap.first ($Snap.second $t@340@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@340@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@340@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@340@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@338@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@340@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 327 | _res@339@01 == Null | live]
; [else-branch: 327 | _res@339@01 != Null | live]
(push) ; 11
; [then-branch: 327 | _res@339@01 == Null]
(assert (= _res@339@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 327 | _res@339@01 != Null]
(assert (not (= _res@339@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@339@01 $Ref.null)) (= _res@339@01 $Ref.null)))
(assert (or
  (= _res@339@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@339@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 328 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 328 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@341@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
    (=
      $t@341@01
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))))
  (=>
    (<
      $Perm.No
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    (=
      $t@341@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_0
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 329 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 329 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 329 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 329 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 330 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 330 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 330 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 330 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 331 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 331 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 331 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 331 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 332 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 332 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    ($Perm.min
      (+
        (-
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          ($Perm.min
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            (/
              (to_real 1)
              (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 13
(assert (not (=>
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))
  (<
    $Perm.No
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@341@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
(pop) ; 12
; Joined path conditions
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@341@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  (getParent ($Snap.combine $Snap.unit $t@341@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
  currentNode_0@318@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine $Snap.unit $t@341@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
  currentNode_0@318@01))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 333 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 333 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine $t@341@01 $Snap.unit)
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@339@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@339@01 212054795634))
(declare-const _res@343@01 $Ref)
(assert (= _res@343@01 (_checkDefined $Snap.unit _res@339@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 334 | _res@343@01 == Null | live]
; [else-branch: 334 | _res@343@01 != Null | live]
(push) ; 14
; [then-branch: 334 | _res@343@01 == Null]
(assert (= _res@343@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 334 | _res@343@01 != Null]
(assert (not (= _res@343@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@343@01 $Ref.null)) (= _res@343@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@343@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@343@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@343@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@343@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | currentNode_0@318@01 != Null | live]
; [else-branch: 335 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 335 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 324 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(pop) ; 8
; [eval] !int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
; [else-branch: 336 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 336 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; _cwl_168, _get_res_1 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_rightChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 337 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 337 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 337 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 337 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 338 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 338 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 338 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No)
  (<
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@344@01 $Perm)
(declare-const _res@345@01 $Ref)
(declare-const $t@346@01 $Snap)
(assert (= $t@346@01 ($Snap.combine ($Snap.first $t@346@01) ($Snap.second $t@346@01))))
(assert (= ($Snap.first $t@346@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@346@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@346@01))
    ($Snap.second ($Snap.second $t@346@01)))))
(assert (= ($Snap.first ($Snap.second $t@346@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@346@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@346@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@346@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@346@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@344@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@346@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@346@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@346@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@346@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 339 | _res@345@01 == Null | live]
; [else-branch: 339 | _res@345@01 != Null | live]
(push) ; 11
; [then-branch: 339 | _res@345@01 == Null]
(assert (= _res@345@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 339 | _res@345@01 != Null]
(assert (not (= _res@345@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@345@01 $Ref.null)) (= _res@345@01 $Ref.null)))
(assert (or
  (= _res@345@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@345@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@346@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@346@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@346@01))))))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 340 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 340 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@347@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
    (=
      $t@347@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))))
  (=>
    (<
      $Perm.No
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    (=
      $t@347@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@346@01)))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@346@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_1
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 341 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 341 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 341 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 341 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 342 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 342 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 342 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 342 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 343 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 343 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 343 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 343 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 344 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 344 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 345 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    ($Perm.min
      (+
        (-
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          ($Perm.min
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            (/
              (to_real 1)
              (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 14
(assert (not (=>
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))
  (<
    $Perm.No
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@347@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@347@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  (getParent ($Snap.combine $Snap.unit $t@347@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  currentNode_0@318@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine $Snap.unit $t@347@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  currentNode_0@318@01))
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)
                          ($Snap.combine $t@347@01 $Snap.unit)))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@345@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@345@01 212054795634))
(declare-const _res@349@01 $Ref)
(assert (= _res@349@01 (_checkDefined $Snap.unit _res@345@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 346 | _res@349@01 == Null | live]
; [else-branch: 346 | _res@349@01 != Null | live]
(push) ; 14
; [then-branch: 346 | _res@349@01 == Null]
(assert (= _res@349@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 346 | _res@349@01 != Null]
(assert (not (= _res@349@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@349@01 $Ref.null)) (= _res@349@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@349@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@349@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@349@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@349@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | currentNode_0@318@01 != Null | live]
; [else-branch: 347 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 347 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 336 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 323 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 314 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))) currentNode_0@318@01))
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
; [else-branch: 348 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 348 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
; [exec]
; res_1 := currentNode_2.TreeNode_payload
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const res_1@350@01 $Ref)
(assert (=
  res_1@350@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@351@01 $Snap)
(assert (= $t@351@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 349 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 349 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 349 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 349 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 350 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 350 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 350 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 350 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 351 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 351 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 351 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 351 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 352 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 352 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 353 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 353 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 353 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)
                          $Snap.unit))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@350@01 212054795634))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@350@01 212054795634))
(declare-const _res@352@01 $Ref)
(assert (= _res@352@01 (_checkDefined $Snap.unit res_1@350@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 354 | _res@352@01 == Null | live]
; [else-branch: 354 | _res@352@01 != Null | live]
(push) ; 11
; [then-branch: 354 | _res@352@01 == Null]
(assert (= _res@352@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 354 | _res@352@01 != Null]
(assert (not (= _res@352@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@352@01 $Ref.null)) (= _res@352@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= _res@352@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@352@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@352@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@352@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | currentNode_0@318@01 != Null | live]
; [else-branch: 355 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 355 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 348 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(pop) ; 7
; [eval] !int___eq__(currentNode_2.TreeNode_key, key_10)
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 356 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
; [else-branch: 356 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 356 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
; [else-branch: 357 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 357 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
; [exec]
; _cwl_168, _get_res_0 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_leftChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 358 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 358 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 358 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 358 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 359 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 359 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No)
  (<
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@353@01 $Perm)
(declare-const _res@354@01 $Ref)
(declare-const $t@355@01 $Snap)
(assert (= $t@355@01 ($Snap.combine ($Snap.first $t@355@01) ($Snap.second $t@355@01))))
(assert (= ($Snap.first $t@355@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@355@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@355@01))
    ($Snap.second ($Snap.second $t@355@01)))))
(assert (= ($Snap.first ($Snap.second $t@355@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@355@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@355@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@355@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@355@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@353@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@355@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@355@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@355@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 360 | _res@354@01 == Null | live]
; [else-branch: 360 | _res@354@01 != Null | live]
(push) ; 11
; [then-branch: 360 | _res@354@01 == Null]
(assert (= _res@354@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 360 | _res@354@01 != Null]
(assert (not (= _res@354@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@354@01 $Ref.null)) (= _res@354@01 $Ref.null)))
(assert (or
  (= _res@354@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@354@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01))))))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 361 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 361 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@356@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
    (=
      $t@356@01
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))))
  (=>
    (<
      $Perm.No
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    (=
      $t@356@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@355@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_0
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 362 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 362 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 362 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 362 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 363 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 363 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 363 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 363 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 364 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 364 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 364 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 364 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 365 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 365 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    ($Perm.min
      (+
        (-
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          ($Perm.min
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            (/
              (to_real 1)
              (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 13
(assert (not (=>
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))
  (<
    $Perm.No
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@356@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
(pop) ; 12
; Joined path conditions
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@356@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (=
  (getParent ($Snap.combine $Snap.unit $t@356@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
  currentNode_0@318@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine $Snap.unit $t@356@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
  currentNode_0@318@01))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 366 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 366 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine $t@356@01 $Snap.unit)
                          $Snap.unit))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@354@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@354@01 212054795634))
(declare-const _res@358@01 $Ref)
(assert (= _res@358@01 (_checkDefined $Snap.unit _res@354@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 367 | _res@358@01 == Null | live]
; [else-branch: 367 | _res@358@01 != Null | live]
(push) ; 14
; [then-branch: 367 | _res@358@01 == Null]
(assert (= _res@358@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 367 | _res@358@01 != Null]
(assert (not (= _res@358@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@358@01 $Ref.null)) (= _res@358@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@358@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@358@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@358@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@358@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | currentNode_0@318@01 != Null | live]
; [else-branch: 368 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 368 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 357 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(pop) ; 8
; [eval] !int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
; [else-branch: 369 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 369 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; _cwl_168, _get_res_1 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_rightChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 370 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 370 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 370 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 370 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
; [then-branch: 371 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 371 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 371 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@359@01 $Perm)
(declare-const _res@360@01 $Ref)
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 ($Snap.combine ($Snap.first $t@361@01) ($Snap.second $t@361@01))))
(assert (= ($Snap.first $t@361@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@361@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@361@01))
    ($Snap.second ($Snap.second $t@361@01)))))
(assert (= ($Snap.first ($Snap.second $t@361@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@361@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@361@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@361@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@361@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@359@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@361@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@361@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@361@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 372 | _res@360@01 == Null | live]
; [else-branch: 372 | _res@360@01 != Null | live]
(push) ; 11
; [then-branch: 372 | _res@360@01 == Null]
(assert (= _res@360@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 372 | _res@360@01 != Null]
(assert (not (= _res@360@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@360@01 $Ref.null)) (= _res@360@01 $Ref.null)))
(assert (or
  (= _res@360@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@360@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01))))))))
; [eval] currentNode_0 != null
; [then-branch: 373 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 373 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(push) ; 10
; [else-branch: 373 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_1
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 374 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 374 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 374 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 374 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 375 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 375 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 375 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 375 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 376 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 376 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 376 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 376 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
; [else-branch: 377 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 377 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_leftChild) == n_1
; [eval] getParent(n_1.TreeNode_leftChild)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
; [eval] n_1.TreeNode_rightChild != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 378 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 378 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          ($Snap.combine
                            ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)
                          $Snap.unit))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@360@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@360@01 212054795634))
(declare-const _res@363@01 $Ref)
(assert (= _res@363@01 (_checkDefined $Snap.unit _res@360@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 379 | _res@363@01 == Null | live]
; [else-branch: 379 | _res@363@01 != Null | live]
(push) ; 14
; [then-branch: 379 | _res@363@01 == Null]
(assert (= _res@363@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 379 | _res@363@01 != Null]
(assert (not (= _res@363@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@363@01 $Ref.null)) (= _res@363@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@363@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@363@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@363@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@363@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 380 | currentNode_0@318@01 != Null | live]
; [else-branch: 380 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 380 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 369 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 356 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 313 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
  $Snap.unit))
; [eval] n_1.TreeNode_rightChild != null
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 381 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 381 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 381 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))) (as TreeNode<PyType>  PyType))
  (getParent%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
(assert (=
  (getParent ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  currentNode_0@318@01))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))) currentNode_0@318@01))
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
; [else-branch: 382 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 382 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
; [exec]
; res_1 := currentNode_2.TreeNode_payload
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const res_1@364@01 $Ref)
(assert (=
  res_1@364@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@365@01 $Snap)
(assert (= $t@365@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 383 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 383 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 383 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 383 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 384 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 384 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 384 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 384 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 385 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 385 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 385 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 385 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 386 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 386 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 386 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 387 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 387 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@364@01 212054795634))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@364@01 212054795634))
(declare-const _res@366@01 $Ref)
(assert (= _res@366@01 (_checkDefined $Snap.unit res_1@364@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 388 | _res@366@01 == Null | live]
; [else-branch: 388 | _res@366@01 != Null | live]
(push) ; 11
; [then-branch: 388 | _res@366@01 == Null]
(assert (= _res@366@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 388 | _res@366@01 != Null]
(assert (not (= _res@366@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@366@01 $Ref.null)) (= _res@366@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= _res@366@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@366@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@366@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@366@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | currentNode_0@318@01 != Null | live]
; [else-branch: 389 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 389 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 382 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(pop) ; 7
; [eval] !int___eq__(currentNode_2.TreeNode_key, key_10)
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
; [else-branch: 390 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 390 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
; [else-branch: 391 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 391 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
; [exec]
; _cwl_168, _get_res_0 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_leftChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 392 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 392 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 392 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 392 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
; [then-branch: 393 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 393 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 393 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@367@01 $Perm)
(declare-const _res@368@01 $Ref)
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@369@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@369@01))
    ($Snap.second ($Snap.second $t@369@01)))))
(assert (= ($Snap.first ($Snap.second $t@369@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@369@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@369@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@369@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@367@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@369@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 394 | _res@368@01 == Null | live]
; [else-branch: 394 | _res@368@01 != Null | live]
(push) ; 11
; [then-branch: 394 | _res@368@01 == Null]
(assert (= _res@368@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 394 | _res@368@01 != Null]
(assert (not (= _res@368@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@368@01 $Ref.null)) (= _res@368@01 $Ref.null)))
(assert (or
  (= _res@368@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@368@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
; [eval] currentNode_0 != null
; [then-branch: 395 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 395 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(push) ; 10
; [else-branch: 395 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_0
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 396 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 396 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 396 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 396 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 397 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 397 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 397 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 397 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 398 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 398 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 398 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 398 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 399 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 399 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 400 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 400 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))
                            $Snap.unit)))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@368@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@368@01 212054795634))
(declare-const _res@371@01 $Ref)
(assert (= _res@371@01 (_checkDefined $Snap.unit _res@368@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 401 | _res@371@01 == Null | live]
; [else-branch: 401 | _res@371@01 != Null | live]
(push) ; 14
; [then-branch: 401 | _res@371@01 == Null]
(assert (= _res@371@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 401 | _res@371@01 != Null]
(assert (not (= _res@371@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@371@01 $Ref.null)) (= _res@371@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@371@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@371@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@371@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@371@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | currentNode_0@318@01 != Null | live]
; [else-branch: 402 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 402 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 391 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(pop) ; 8
; [eval] !int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
; [else-branch: 403 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 403 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; _cwl_168, _get_res_1 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_rightChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 404 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 404 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 404 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 404 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 405 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 405 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 405 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
    ($Perm.min
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No)
  (<
    (-
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@372@01 $Perm)
(declare-const _res@373@01 $Ref)
(declare-const $t@374@01 $Snap)
(assert (= $t@374@01 ($Snap.combine ($Snap.first $t@374@01) ($Snap.second $t@374@01))))
(assert (= ($Snap.first $t@374@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@374@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@374@01))
    ($Snap.second ($Snap.second $t@374@01)))))
(assert (= ($Snap.first ($Snap.second $t@374@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@374@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@374@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@374@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@372@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@374@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 406 | _res@373@01 == Null | live]
; [else-branch: 406 | _res@373@01 != Null | live]
(push) ; 11
; [then-branch: 406 | _res@373@01 == Null]
(assert (= _res@373@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 406 | _res@373@01 != Null]
(assert (not (= _res@373@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@373@01 $Ref.null)) (= _res@373@01 $Ref.null)))
(assert (or
  (= _res@373@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@373@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01))))))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 407 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 407 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not
  (=
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (=
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))
    $Perm.No)
  (<
    $Perm.No
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@375@01 $Snap)
(assert (and
  (=>
    (<
      $Perm.No
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
    (=
      $t@375@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))))))
  (=>
    (<
      $Perm.No
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    (=
      $t@375@01
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
    (/
      (to_real 1)
      (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@374@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_1
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 408 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 408 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 408 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 408 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 409 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 409 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 409 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 409 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 410 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 410 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 410 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 410 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 411 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 411 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 412 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
; [else-branch: 412 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 412 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  (-
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
    ($Perm.min
      (+
        (-
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          ($Perm.min
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            (/
              (to_real 1)
              (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
        (/
          (to_real 1)
          (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
      ($Perm.min
        (+
          (-
            (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
            ($Perm.min
              (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
              (/
                (to_real 1)
                (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] getParent(n_1.TreeNode_rightChild) == n_1
; [eval] getParent(n_1.TreeNode_rightChild)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(node), TreeNode())
; [eval] typeof(node)
; [eval] TreeNode()
(push) ; 14
(assert (not (=>
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))
  (<
    $Perm.No
    (+
      (-
        (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
        ($Perm.min
          (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))
          (/
            (to_real 1)
            (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))))))
      (/
        (to_real 1)
        (to_real (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@375@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(pop) ; 13
; Joined path conditions
(assert (getParent%precondition ($Snap.combine $Snap.unit $t@375@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  (getParent ($Snap.combine $Snap.unit $t@375@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  currentNode_0@318@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (=
  (getParent ($Snap.combine $Snap.unit $t@375@01) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
  currentNode_0@318@01))
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $t@375@01 $Snap.unit)))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@373@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@373@01 212054795634))
(declare-const _res@377@01 $Ref)
(assert (= _res@377@01 (_checkDefined $Snap.unit _res@373@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 413 | _res@377@01 == Null | live]
; [else-branch: 413 | _res@377@01 != Null | live]
(push) ; 14
; [then-branch: 413 | _res@377@01 == Null]
(assert (= _res@377@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 413 | _res@377@01 != Null]
(assert (not (= _res@377@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@377@01 $Ref.null)) (= _res@377@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@377@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@377@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@377@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@377@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 414 | currentNode_0@318@01 != Null | live]
; [else-branch: 414 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 414 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 403 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 390 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 381 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
  $Ref.null))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))) currentNode_0@318@01))
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 415 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
; [else-branch: 415 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 415 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
; [exec]
; res_1 := currentNode_2.TreeNode_payload
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const res_1@378@01 $Ref)
(assert (=
  res_1@378@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 416 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 416 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 416 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 416 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 417 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 417 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 417 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 9
(push) ; 9
; [else-branch: 417 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 418 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 418 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 9
; [then-branch: 418 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 418 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 420 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 420 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@378@01 212054795634))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res_1@378@01 212054795634))
(declare-const _res@380@01 $Ref)
(assert (= _res@380@01 (_checkDefined $Snap.unit res_1@378@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 421 | _res@380@01 == Null | live]
; [else-branch: 421 | _res@380@01 != Null | live]
(push) ; 11
; [then-branch: 421 | _res@380@01 == Null]
(assert (= _res@380@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 421 | _res@380@01 != Null]
(assert (not (= _res@380@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@380@01 $Ref.null)) (= _res@380@01 $Ref.null)))
(push) ; 10
(assert (not (or
  (= _res@380@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@380@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@380@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@380@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 10
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 422 | currentNode_0@318@01 != Null | live]
; [else-branch: 422 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 422 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 415 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(pop) ; 7
; [eval] !int___eq__(currentNode_2.TreeNode_key, key_10)
; [eval] int___eq__(currentNode_2.TreeNode_key, key_10)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)) | live]
; [else-branch: 423 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 423 | !(int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01)))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit key_4@317@01))
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
; [else-branch: 424 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 424 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
; [exec]
; _cwl_168, _get_res_0 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_leftChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 425 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 425 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 425 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 425 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
; [then-branch: 426 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 426 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 426 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@381@01 $Perm)
(declare-const _res@382@01 $Ref)
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@383@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@383@01))
    ($Snap.second ($Snap.second $t@383@01)))))
(assert (= ($Snap.first ($Snap.second $t@383@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@383@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@383@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@383@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@383@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 427 | _res@382@01 == Null | live]
; [else-branch: 427 | _res@382@01 != Null | live]
(push) ; 11
; [then-branch: 427 | _res@382@01 == Null]
(assert (= _res@382@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 427 | _res@382@01 != Null]
(assert (not (= _res@382@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@382@01 $Ref.null)) (= _res@382@01 $Ref.null)))
(assert (or
  (= _res@382@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@382@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))))
; [eval] currentNode_0 != null
; [then-branch: 428 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 428 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(push) ; 10
; [else-branch: 428 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_0
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 429 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 429 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 429 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 429 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 430 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 430 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 430 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 430 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 431 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 431 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 431 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 431 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 432 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 432 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 433 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 433 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@382@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@382@01 212054795634))
(declare-const _res@385@01 $Ref)
(assert (= _res@385@01 (_checkDefined $Snap.unit _res@382@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 434 | _res@385@01 == Null | live]
; [else-branch: 434 | _res@385@01 != Null | live]
(push) ; 14
; [then-branch: 434 | _res@385@01 == Null]
(assert (= _res@385@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 434 | _res@385@01 != Null]
(assert (not (= _res@385@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@385@01 $Ref.null)) (= _res@385@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@385@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@385@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@385@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@385@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | currentNode_0@318@01 != Null | live]
; [else-branch: 435 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 435 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 424 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(pop) ; 8
; [eval] !int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___lt__(int___unbox__(key_10), int___unbox__(currentNode_2.TreeNode_key))
; [eval] int___unbox__(key_10)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(currentNode_2.TreeNode_key)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 436 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))) | live]
; [else-branch: 436 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 436 | !(int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
; [exec]
; _cwl_168, _get_res_1 := BinarySearchTree__get(_cthread_168, _method_measures_168,
;   _residue_168, self_19, key_10, currentNode_2.TreeNode_rightChild, __prim__int___box__(int___mul__(int___unbox__(perm_1),
;   2)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(int___mul__(int___unbox__(perm_1), 2))
; [eval] int___mul__(int___unbox__(perm_1), 2)
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(pop) ; 9
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2)))
; [eval] _cthread_168 != null
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_11), BinarySearchTree())
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_4), int())
; [eval] typeof(key_4)
; [eval] int()
; [eval] currentNode_0 == null || issubtype(typeof(currentNode_0), TreeNode())
; [eval] currentNode_0 == null
(push) ; 9
; [then-branch: 437 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 437 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 10
; [then-branch: 437 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 10
(push) ; 10
; [else-branch: 437 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(currentNode_0), TreeNode())
; [eval] typeof(currentNode_0)
; [eval] TreeNode()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
; [eval] issubtype(typeof(perm_0), int())
; [eval] typeof(perm_0)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) (as int<PyType>  PyType)))
; [eval] self_11 != null
; [eval] int___gt__(int___unbox__(perm_0), 0)
; [eval] int___unbox__(perm_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))))
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
(push) ; 9
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit perm_0@319@01) 2))) 0))
; [eval] currentNode_0 != null
; [then-branch: 438 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 438 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(push) ; 9
; [else-branch: 438 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
; [eval] perm(MustTerminate(_cthread_168)) == none
; [eval] perm(MustTerminate(_cthread_168))
; [eval] (forperm _r_22: Ref [MustInvokeBounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [MustInvokeUnbounded(_r_22)] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: false)
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_168@386@01 $Perm)
(declare-const _res@387@01 $Ref)
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 ($Snap.combine ($Snap.first $t@388@01) ($Snap.second $t@388@01))))
(assert (= ($Snap.first $t@388@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@388@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@388@01))
    ($Snap.second ($Snap.second $t@388@01)))))
(assert (= ($Snap.first ($Snap.second $t@388@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@388@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@388@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@388@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@388@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@386@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@388@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 10
; [then-branch: 439 | _res@387@01 == Null | live]
; [else-branch: 439 | _res@387@01 != Null | live]
(push) ; 11
; [then-branch: 439 | _res@387@01 == Null]
(assert (= _res@387@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 439 | _res@387@01 != Null]
(assert (not (= _res@387@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@387@01 $Ref.null)) (= _res@387@01 $Ref.null)))
(assert (or
  (= _res@387@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@387@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@01))))))))
; [eval] currentNode_0 != null
; [then-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(push) ; 10
; [else-branch: 440 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := _get_res_1
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@389@01 $Snap)
(assert (= $t@389@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 11
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 11
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fold acc(tree(currentNode_2), 1 / int___unbox__(perm_1))
; [eval] int___unbox__(perm_1)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1), TreeNode())
; [eval] typeof(n_1)
; [eval] TreeNode()
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_key), int())
; [eval] typeof(n_1.TreeNode_key)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] int()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(n_1.TreeNode_payload), str())
; [eval] typeof(n_1.TreeNode_payload)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] str()
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_leftChild == null || issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] n_1.TreeNode_leftChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 441 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
; [else-branch: 441 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 441 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 441 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_leftChild), TreeNode())
; [eval] typeof(n_1.TreeNode_leftChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_rightChild == null || issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] n_1.TreeNode_rightChild == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 442 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
; [else-branch: 442 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 442 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(pop) ; 12
(push) ; 12
; [else-branch: 442 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_rightChild), TreeNode())
; [eval] typeof(n_1.TreeNode_rightChild)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] n_1.TreeNode_parent == null || issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] n_1.TreeNode_parent == null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 443 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null | live]
; [else-branch: 443 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null | live]
(push) ; 12
; [then-branch: 443 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) == Null]
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
  $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 443 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))))) != Null]
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(n_1.TreeNode_parent), TreeNode())
; [eval] typeof(n_1.TreeNode_parent)
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] TreeNode()
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] n_1.TreeNode_leftChild != null
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) != Null | dead]
; [else-branch: 444 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 444 | First:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))) == Null]
; [eval] n_1.TreeNode_rightChild != null
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) != Null | dead]
; [else-branch: 445 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 445 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))))))))) == Null]
(assert (tree%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
                      ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit))))))))))))) currentNode_0@318@01))
; [exec]
; _res := _checkDefined(res_1, 212054795634)
; [eval] _checkDefined(res_1, 212054795634)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@387@01 212054795634))
(pop) ; 13
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@387@01 212054795634))
(declare-const _res@390@01 $Ref)
(assert (= _res@390@01 (_checkDefined $Snap.unit _res@387@01 212054795634)))
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 13
; [then-branch: 446 | _res@390@01 == Null | live]
; [else-branch: 446 | _res@390@01 != Null | live]
(push) ; 14
; [then-branch: 446 | _res@390@01 == Null]
(assert (= _res@390@01 $Ref.null))
(pop) ; 14
(push) ; 14
; [else-branch: 446 | _res@390@01 != Null]
(assert (not (= _res@390@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@390@01 $Ref.null)) (= _res@390@01 $Ref.null)))
(push) ; 13
(assert (not (or
  (= _res@390@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@390@01) (as str<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (= _res@390@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@390@01) (as str<PyType>  PyType))))
; [eval] currentNode_0 != null
(push) ; 13
(set-option :timeout 10)
(assert (not (= currentNode_0@318@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | currentNode_0@318@01 != Null | live]
; [else-branch: 447 | currentNode_0@318@01 == Null | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 447 | currentNode_0@318@01 != Null]
; [eval] int___unbox__(perm_0)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (not (not (= (int___unbox__ $Snap.unit perm_0@319@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (or
  (= (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01))) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real (int___unbox__ $Snap.unit perm_0@319@01)))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 436 | int___lt__(_, int___unbox__(_, key_4@317@01), int___unbox__(_, First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01))))))))))))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit key_4@317@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 423 | int___eq__((_, _), First:(Second:(Second:(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@322@01)))))))))))), key_4@317@01)]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))) key_4@317@01))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 305 | currentNode_0@318@01 == Null]
(assert (= currentNode_0@318@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(declare-const $t@391@01 $Snap)
(assert (= $t@391@01 ($Snap.combine ($Snap.first $t@391@01) ($Snap.second $t@391@01))))
(assert (= ($Snap.first $t@391@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@391@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@391@01))
    ($Snap.second ($Snap.second $t@391@01)))))
(assert (= ($Snap.first ($Snap.second $t@391@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@391@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@391@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@391@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@391@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@315@01 _current_wait_level_168@320@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@391@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@391@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@391@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@391@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 4
; [then-branch: 448 | _res@321@01 == Null | live]
; [else-branch: 448 | _res@321@01 != Null | live]
(push) ; 5
; [then-branch: 448 | _res@321@01 == Null]
(assert (= _res@321@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 448 | _res@321@01 != Null]
(assert (not (= _res@321@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@321@01 $Ref.null)) (= _res@321@01 $Ref.null)))
(assert (or
  (= _res@321@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@321@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@391@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@391@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@391@01))))))))
; [eval] currentNode_0 != null
; [then-branch: 449 | currentNode_0@318@01 != Null | dead]
; [else-branch: 449 | currentNode_0@318@01 == Null | live]
(push) ; 4
; [else-branch: 449 | currentNode_0@318@01 == Null]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@391@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@391@01)))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; var _err: Ref
(declare-const _err@392@01 $Ref)
; [exec]
; var res_1: Ref
(declare-const res_1@393@01 $Ref)
; [exec]
; var self_19: Ref
(declare-const self_19@394@01 $Ref)
; [exec]
; var key_10: Ref
(declare-const key_10@395@01 $Ref)
; [exec]
; var currentNode_2: Ref
(declare-const currentNode_2@396@01 $Ref)
; [exec]
; var perm_1: Ref
(declare-const perm_1@397@01 $Ref)
; [exec]
; var _get_res_0: Ref
(declare-const _get_res_0@398@01 $Ref)
; [exec]
; var _get_res_1: Ref
(declare-const _get_res_1@399@01 $Ref)
; [exec]
; var _cwl_168: Perm
(declare-const _cwl_168@400@01 $Perm)
; [exec]
; var _method_measures_168: Seq[Measure$]
(declare-const _method_measures_168@401@01 Seq<Measure$>)
; [exec]
; _method_measures_168 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_11) == BinarySearchTree()
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 $Snap.unit))
; [eval] typeof(self_11) == BinarySearchTree()
; [eval] typeof(self_11)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_11@316@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; self_19 := self_11
; [exec]
; key_10 := key_4
; [exec]
; currentNode_2 := currentNode_0
; [exec]
; perm_1 := perm_0
; [eval] !object___bool__(currentNode_2)
; [eval] object___bool__(currentNode_2)
(set-option :timeout 0)
(push) ; 4
(assert (object___bool__%precondition $Snap.unit currentNode_0@318@01))
(pop) ; 4
; Joined path conditions
(assert (object___bool__%precondition $Snap.unit currentNode_0@318@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (object___bool__ $Snap.unit currentNode_0@318@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (object___bool__ $Snap.unit currentNode_0@318@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 450 | !(object___bool__(_, currentNode_0@318@01)) | live]
; [else-branch: 450 | object___bool__(_, currentNode_0@318@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 450 | !(object___bool__(_, currentNode_0@318@01))]
(assert (not (object___bool__ $Snap.unit currentNode_0@318@01)))
; [exec]
; _res := null
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
; [eval] currentNode_0 != null
; [then-branch: 451 | currentNode_0@318@01 != Null | dead]
; [else-branch: 451 | currentNode_0@318@01 == Null | live]
(push) ; 5
; [else-branch: 451 | currentNode_0@318@01 == Null]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
; [eval] !!object___bool__(currentNode_2)
; [eval] !object___bool__(currentNode_2)
; [eval] object___bool__(currentNode_2)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (object___bool__ $Snap.unit currentNode_0@318@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 452 | object___bool__(_, currentNode_0@318@01) | dead]
; [else-branch: 452 | !(object___bool__(_, currentNode_0@318@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 452 | !(object___bool__(_, currentNode_0@318@01))]
(assert (not (object___bool__ $Snap.unit currentNode_0@318@01)))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- BinarySearchTree___getitem__ ----------
(declare-const _cthread_169@403@01 $Ref)
(declare-const _caller_measures_169@404@01 Seq<Measure$>)
(declare-const _residue_169@405@01 $Perm)
(declare-const self_12@406@01 $Ref)
(declare-const key_5@407@01 $Ref)
(declare-const _current_wait_level_169@408@01 $Perm)
(declare-const _res@409@01 $Ref)
(declare-const _cthread_169@410@01 $Ref)
(declare-const _caller_measures_169@411@01 Seq<Measure$>)
(declare-const _residue_169@412@01 $Perm)
(declare-const self_12@413@01 $Ref)
(declare-const key_5@414@01 $Ref)
(declare-const _current_wait_level_169@415@01 $Perm)
(declare-const _res@416@01 $Ref)
(push) ; 1
(declare-const $t@417@01 $Snap)
(assert (= $t@417@01 ($Snap.combine ($Snap.first $t@417@01) ($Snap.second $t@417@01))))
(assert (= ($Snap.first $t@417@01) $Snap.unit))
; [eval] _cthread_169 != null
(assert (not (= _cthread_169@410@01 $Ref.null)))
(assert (=
  ($Snap.second $t@417@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@417@01))
    ($Snap.second ($Snap.second $t@417@01)))))
(assert (= ($Snap.first ($Snap.second $t@417@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_169@410@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@417@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@417@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@417@01))) $Snap.unit))
; [eval] issubtype(typeof(self_12), BinarySearchTree())
; [eval] typeof(self_12)
; [eval] BinarySearchTree()
(assert (issubtype<Bool> (typeof<PyType> self_12@413@01) (as BinarySearchTree<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@417@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@417@01))))
  $Snap.unit))
; [eval] issubtype(typeof(key_5), int())
; [eval] typeof(key_5)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> key_5@414@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
  $Snap.unit))
; [eval] self_12 != null
(assert (not (= self_12@413@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@417@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@418@01 $Snap)
(assert (= $t@418@01 ($Snap.combine ($Snap.first $t@418@01) ($Snap.second $t@418@01))))
(assert (= ($Snap.first $t@418@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@418@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@418@01))
    ($Snap.second ($Snap.second $t@418@01)))))
(assert (= ($Snap.first ($Snap.second $t@418@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@418@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@418@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@418@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@418@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_169@412@01 _current_wait_level_169@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@418@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@418@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@418@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@418@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 3
; [then-branch: 453 | _res@416@01 == Null | live]
; [else-branch: 453 | _res@416@01 != Null | live]
(push) ; 4
; [then-branch: 453 | _res@416@01 == Null]
(assert (= _res@416@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 453 | _res@416@01 != Null]
(assert (not (= _res@416@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@416@01 $Ref.null)) (= _res@416@01 $Ref.null)))
(assert (or
  (= _res@416@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@416@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@418@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@418@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@418@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@418@01)))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@419@01 $Ref)
; [exec]
; var self_20: Ref
(declare-const self_20@420@01 $Ref)
; [exec]
; var key_11: Ref
(declare-const key_11@421@01 $Ref)
; [exec]
; var get_res: Ref
(declare-const get_res@422@01 $Ref)
; [exec]
; var _cwl_169: Perm
(declare-const _cwl_169@423@01 $Perm)
; [exec]
; var _method_measures_169: Seq[Measure$]
(declare-const _method_measures_169@424@01 Seq<Measure$>)
; [exec]
; _method_measures_169 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_12) == BinarySearchTree()
(declare-const $t@425@01 $Snap)
(assert (= $t@425@01 $Snap.unit))
; [eval] typeof(self_12) == BinarySearchTree()
; [eval] typeof(self_12)
; [eval] BinarySearchTree()
(assert (= (typeof<PyType> self_12@413@01) (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; self_20 := self_12
; [exec]
; key_11 := key_5
; [exec]
; _cwl_169, get_res := BinarySearchTree_get(_cthread_169, _method_measures_169,
;   _residue_169, self_20, key_11)
; [eval] _cthread_167 != null
; [eval] issubtype(typeof(_cthread_167), Thread_0())
; [eval] typeof(_cthread_167)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_10), BinarySearchTree())
; [eval] typeof(self_10)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_3), int())
; [eval] typeof(key_3)
; [eval] int()
; [eval] self_10 != null
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
; [eval] (forperm _r_19: Ref [MustInvokeBounded(_r_19)] :: false)
; [eval] (forperm _r_19: Ref [MustInvokeUnbounded(_r_19)] :: false)
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: false)
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_167@426@01 $Perm)
(declare-const _res@427@01 $Ref)
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 ($Snap.combine ($Snap.first $t@428@01) ($Snap.second $t@428@01))))
(assert (= ($Snap.first $t@428@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_167)
(assert (=
  ($Snap.second $t@428@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@428@01))
    ($Snap.second ($Snap.second $t@428@01)))))
(assert (= ($Snap.first ($Snap.second $t@428@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_167)
(assert (=
  ($Snap.second ($Snap.second $t@428@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@428@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@428@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@428@01))) $Snap.unit))
; [eval] _residue_167 <= _current_wait_level_167
(assert (<= _residue_169@412@01 _current_wait_level_167@426@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@428@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@428@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@428@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@428@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(set-option :timeout 0)
(push) ; 3
; [then-branch: 454 | _res@427@01 == Null | live]
; [else-branch: 454 | _res@427@01 != Null | live]
(push) ; 4
; [then-branch: 454 | _res@427@01 == Null]
(assert (= _res@427@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 454 | _res@427@01 != Null]
(assert (not (= _res@427@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@427@01 $Ref.null)) (= _res@427@01 $Ref.null)))
(assert (or
  (= _res@427@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@427@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@428@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@428@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@428@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@428@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := get_res
; [exec]
; label __end
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(set-option :timeout 0)
(push) ; 3
; [then-branch: 455 | _res@427@01 == Null | live]
; [else-branch: 455 | _res@427@01 != Null | live]
(push) ; 4
; [then-branch: 455 | _res@427@01 == Null]
(assert (= _res@427@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 455 | _res@427@01 != Null]
(assert (not (= _res@427@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
; [eval] (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_175@429@01 $Ref)
(declare-const _caller_measures_175@430@01 Seq<Measure$>)
(declare-const _residue_175@431@01 $Perm)
(declare-const _current_wait_level_175@432@01 $Perm)
(declare-const _cthread_175@433@01 $Ref)
(declare-const _caller_measures_175@434@01 Seq<Measure$>)
(declare-const _residue_175@435@01 $Perm)
(declare-const _current_wait_level_175@436@01 $Perm)
(push) ; 1
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 ($Snap.combine ($Snap.first $t@437@01) ($Snap.second $t@437@01))))
(assert (= ($Snap.first $t@437@01) $Snap.unit))
; [eval] _cthread_175 != null
(assert (not (= _cthread_175@433@01 $Ref.null)))
(assert (=
  ($Snap.second $t@437@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@437@01))
    ($Snap.second ($Snap.second $t@437@01)))))
(assert (= ($Snap.first ($Snap.second $t@437@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_175), Thread_0())
; [eval] typeof(_cthread_175)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_175@433@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@437@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 ($Snap.combine ($Snap.first $t@438@01) ($Snap.second $t@438@01))))
(assert (= ($Snap.first $t@438@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_175)
(assert (=
  ($Snap.second $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@438@01))
    ($Snap.second ($Snap.second $t@438@01)))))
(assert (= ($Snap.first ($Snap.second $t@438@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_175)
(assert (=
  ($Snap.second ($Snap.second $t@438@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@438@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] _residue_175 <= _current_wait_level_175
(assert (<= _residue_175@435@01 _current_wait_level_175@436@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var BinarySearchTree_res: Ref
(declare-const BinarySearchTree_res@439@01 $Ref)
; [exec]
; var target: Ref
(declare-const target@440@01 $Ref)
; [exec]
; var target_0: Ref
(declare-const target_0@441@01 $Ref)
; [exec]
; var target_1: Ref
(declare-const target_1@442@01 $Ref)
; [exec]
; var target_2: Ref
(declare-const target_2@443@01 $Ref)
; [exec]
; var target_3: Ref
(declare-const target_3@444@01 $Ref)
; [exec]
; var target_4: Ref
(declare-const target_4@445@01 $Ref)
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@446@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@447@01 Set<_Name>)
; [exec]
; var _cwl_175: Perm
(declare-const _cwl_175@448@01 $Perm)
; [exec]
; var _method_measures_175: Seq[Measure$]
(declare-const _method_measures_175@449@01 Seq<Measure$>)
; [exec]
; _method_measures_175 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@450@01 Set<_Name>)
(assert (=
  module_names_0@450@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 ($Snap.combine ($Snap.first $t@451@01) ($Snap.second $t@451@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@451@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@451@01))
    ($Snap.second ($Snap.second $t@451@01)))))
(assert (= ($Snap.first ($Snap.second $t@451@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@451@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@451@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@452@01 Set<_Name>)
(assert (=
  module_names_0@452@01
  (Set_union module_names_0@450@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@453@01 $Snap)
(assert (= $t@453@01 ($Snap.combine ($Snap.first $t@453@01) ($Snap.second $t@453@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@453@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@453@01))
    ($Snap.second ($Snap.second $t@453@01)))))
(assert (= ($Snap.first ($Snap.second $t@453@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@453@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@453@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@453@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@453@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@453@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@453@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@453@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@453@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@453@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7809644653626814543)))
; [eval] (module_names_0 union Set(_single(7809644653626814543)))
; [eval] Set(_single(7809644653626814543))
; [eval] _single(7809644653626814543)
(declare-const module_names_0@454@01 Set<_Name>)
(assert (=
  module_names_0@454@01
  (Set_union module_names_0@452@01 (Set_singleton (_single<_Name> 7809644653626814543)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@455@01 Set<_Name>)
(assert (=
  module_names_0@455@01
  (Set_union module_names_0@454@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(31079562742455594284987146600)))
; [eval] (module_names_0 union Set(_single(31079562742455594284987146600)))
; [eval] Set(_single(31079562742455594284987146600))
; [eval] _single(31079562742455594284987146600)
(declare-const module_names_0@456@01 Set<_Name>)
(assert (=
  module_names_0@456@01
  (Set_union module_names_0@455@01 (Set_singleton (_single<_Name> 31079562742455594284987146600)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(7956368062068632702229687787880)))
; [eval] (module_names_0 union Set(_single(7956368062068632702229687787880)))
; [eval] Set(_single(7956368062068632702229687787880))
; [eval] _single(7956368062068632702229687787880)
(declare-const module_names_0@457@01 Set<_Name>)
(assert (=
  module_names_0@457@01
  (Set_union module_names_0@456@01 (Set_singleton (_single<_Name> 7956368062068632702229687787880)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(128021957866345)))
; [eval] (module_names_0 union Set(_single(128021957866345)))
; [eval] Set(_single(128021957866345))
; [eval] _single(128021957866345)
(declare-const module_names_0@458@01 Set<_Name>)
(assert (=
  module_names_0@458@01
  (Set_union module_names_0@457@01 (Set_singleton (_single<_Name> 128021957866345)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(112568497369961)))
; [eval] (module_names_0 union Set(_single(112568497369961)))
; [eval] Set(_single(112568497369961))
; [eval] _single(112568497369961)
(declare-const module_names_0@459@01 Set<_Name>)
(assert (=
  module_names_0@459@01
  (Set_union module_names_0@458@01 (Set_singleton (_single<_Name> 112568497369961)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2239102503511286040791676697665896)))
; [eval] (module_names_0 union Set(_single(2239102503511286040791676697665896)))
; [eval] Set(_single(2239102503511286040791676697665896))
; [eval] _single(2239102503511286040791676697665896)
(declare-const module_names_0@460@01 Set<_Name>)
(assert (=
  module_names_0@460@01
  (Set_union module_names_0@459@01 (Set_singleton (_single<_Name> 2239102503511286040791676697665896)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(573210240898889226437890953815744872)))
; [eval] (module_names_0 union Set(_single(573210240898889226437890953815744872)))
; [eval] Set(_single(573210240898889226437890953815744872))
; [eval] _single(573210240898889226437890953815744872)
(declare-const module_names_0@461@01 Set<_Name>)
(assert (=
  module_names_0@461@01
  (Set_union module_names_0@460@01 (Set_singleton (_single<_Name> 573210240898889226437890953815744872)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7306086878001066580)))
; [eval] (module_names_0 union Set(_single(7306086878001066580)))
; [eval] Set(_single(7306086878001066580))
; [eval] _single(7306086878001066580)
(declare-const module_names_0@462@01 Set<_Name>)
(assert (=
  module_names_0@462@01
  (Set_union module_names_0@461@01 (Set_singleton (_single<_Name> 7306086878001066580)))))
; [exec]
; assert true && (_single(7306086878001066580) in module_names_0)
; [eval] (_single(7306086878001066580) in module_names_0)
; [eval] _single(7306086878001066580)
(set-option :timeout 0)
(push) ; 3
(assert (not (Set_in (_single<_Name> 7306086878001066580) module_names_0@462@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 7306086878001066580) module_names_0@462@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1701147252)))
; [eval] (module_names_0 union Set(_single(1701147252)))
; [eval] Set(_single(1701147252))
; [eval] _single(1701147252)
(declare-const module_names_0@463@01 Set<_Name>)
(assert (=
  module_names_0@463@01
  (Set_union module_names_0@462@01 (Set_singleton (_single<_Name> 1701147252)))))
; [exec]
; assert true && (_single(7306086878001066580) in module_names_0)
; [eval] (_single(7306086878001066580) in module_names_0)
; [eval] _single(7306086878001066580)
(push) ; 3
(assert (not (Set_in (_single<_Name> 7306086878001066580) module_names_0@463@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 7306086878001066580) module_names_0@463@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(110386908131187)))
; [eval] (module_names_0 union Set(_single(110386908131187)))
; [eval] Set(_single(110386908131187))
; [eval] _single(110386908131187)
(declare-const module_names_0@464@01 Set<_Name>)
(assert (=
  module_names_0@464@01
  (Set_union module_names_0@463@01 (Set_singleton (_single<_Name> 110386908131187)))))
; [exec]
; assert true && (_single(7306086878001066580) in module_names_0)
; [eval] (_single(7306086878001066580) in module_names_0)
; [eval] _single(7306086878001066580)
(push) ; 3
(assert (not (Set_in (_single<_Name> 7306086878001066580) module_names_0@464@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 7306086878001066580) module_names_0@464@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2147777202629415036263)))
; [eval] (module_names_0 union Set(_single(2147777202629415036263)))
; [eval] Set(_single(2147777202629415036263))
; [eval] _single(2147777202629415036263)
(declare-const module_names_0@465@01 Set<_Name>)
(assert (=
  module_names_0@465@01
  (Set_union module_names_0@464@01 (Set_singleton (_single<_Name> 2147777202629415036263)))))
; [exec]
; assert true &&
;   ((_single(7306086878001066580) in module_names_0) &&
;   (_single(7306086878001066580) in module_names_0))
; [eval] (_single(7306086878001066580) in module_names_0)
; [eval] _single(7306086878001066580)
(push) ; 3
(assert (not (Set_in (_single<_Name> 7306086878001066580) module_names_0@465@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 7306086878001066580) module_names_0@465@01))
; [eval] (_single(7306086878001066580) in module_names_0)
; [eval] _single(7306086878001066580)
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@466@01 Set<_Name>)
(assert (=
  module_names_0@466@01
  (Set_union module_names_0@465@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7632240)))
; [eval] (module_names_0 union Set(_single(7632240)))
; [eval] Set(_single(7632240))
; [eval] _single(7632240)
(declare-const module_names_0@467@01 Set<_Name>)
(assert (=
  module_names_0@467@01
  (Set_union module_names_0@466@01 (Set_singleton (_single<_Name> 7632240)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953853535)))
; [eval] (module_names_0 union Set(_single(1953853535)))
; [eval] Set(_single(1953853535))
; [eval] _single(1953853535)
(declare-const module_names_0@468@01 Set<_Name>)
(assert (=
  module_names_0@468@01
  (Set_union module_names_0@467@01 (Set_singleton (_single<_Name> 1953853535)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(115298595684950466001854303)))
; [eval] (module_names_0 union Set(_single(115298595684950466001854303)))
; [eval] Set(_single(115298595684950466001854303))
; [eval] _single(115298595684950466001854303)
(declare-const module_names_0@469@01 Set<_Name>)
(assert (=
  module_names_0@469@01
  (Set_union module_names_0@468@01 (Set_singleton (_single<_Name> 115298595684950466001854303)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7628135)))
; [eval] (module_names_0 union Set(_single(7628135)))
; [eval] Set(_single(7628135))
; [eval] _single(7628135)
(declare-const module_names_0@470@01 Set<_Name>)
(assert (=
  module_names_0@470@01
  (Set_union module_names_0@469@01 (Set_singleton (_single<_Name> 7628135)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1952802655)))
; [eval] (module_names_0 union Set(_single(1952802655)))
; [eval] Set(_single(1952802655))
; [eval] _single(1952802655)
(declare-const module_names_0@471@01 Set<_Name>)
(assert (=
  module_names_0@471@01
  (Set_union module_names_0@470@01 (Set_singleton (_single<_Name> 1952802655)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(115298595684950466001067871)))
; [eval] (module_names_0 union Set(_single(115298595684950466001067871)))
; [eval] Set(_single(115298595684950466001067871))
; [eval] _single(115298595684950466001067871)
(declare-const module_names_0@472@01 Set<_Name>)
(assert (=
  module_names_0@472@01
  (Set_union module_names_0@471@01 (Set_singleton (_single<_Name> 115298595684950466001067871)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(134778768439155653066375051740024039746)))
; [eval] (module_names_0 union Set(_single(134778768439155653066375051740024039746)))
; [eval] Set(_single(134778768439155653066375051740024039746))
; [eval] _single(134778768439155653066375051740024039746)
(declare-const module_names_0@473@01 Set<_Name>)
(assert (=
  module_names_0@473@01
  (Set_union module_names_0@472@01 (Set_singleton (_single<_Name> 134778768439155653066375051740024039746)))))
; [exec]
; assert true &&
;   (_single(134778768439155653066375051740024039746) in module_names_0)
; [eval] (_single(134778768439155653066375051740024039746) in module_names_0)
; [eval] _single(134778768439155653066375051740024039746)
(push) ; 3
(assert (not (Set_in (_single<_Name> 134778768439155653066375051740024039746) module_names_0@473@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 134778768439155653066375051740024039746) module_names_0@473@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7631714)))
; [eval] (module_names_0 union Set(_single(7631714)))
; [eval] Set(_single(7631714))
; [eval] _single(7631714)
(declare-const module_names_0@474@01 Set<_Name>)
(assert (=
  module_names_0@474@01
  (Set_union module_names_0@473@01 (Set_singleton (_single<_Name> 7631714)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(500068610672)))
; [eval] (module_names_0 union Set(_single(500068610672)))
; [eval] Set(_single(500068610672))
; [eval] _single(500068610672)
(declare-const module_names_0@475@01 Set<_Name>)
(assert (=
  module_names_0@475@01
  (Set_union module_names_0@474@01 (Set_singleton (_single<_Name> 500068610672)))))
; [exec]
; assert true &&
;   (_single(134778768439155653066375051740024039746) in module_names_0)
; [eval] (_single(134778768439155653066375051740024039746) in module_names_0)
; [eval] _single(134778768439155653066375051740024039746)
(push) ; 3
(assert (not (Set_in (_single<_Name> 134778768439155653066375051740024039746) module_names_0@475@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 134778768439155653066375051740024039746) module_names_0@475@01))
; [exec]
; BinarySearchTree_res := new()
(declare-const BinarySearchTree_res@476@01 $Ref)
(assert (not (= BinarySearchTree_res@476@01 $Ref.null)))
(assert (not (= BinarySearchTree_res@476@01 target_1@442@01)))
(assert (not (= BinarySearchTree_res@476@01 target_3@444@01)))
(assert (not
  (=
    BinarySearchTree_res@476@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first $t@451@01)))))
(assert (not (= BinarySearchTree_res@476@01 (__file__ $Snap.unit))))
(assert (not (= BinarySearchTree_res@476@01 target_0@441@01)))
(assert (not (= BinarySearchTree_res@476@01 target@440@01)))
(assert (not
  (=
    BinarySearchTree_res@476@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first $t@453@01)))))
(assert (not (= BinarySearchTree_res@476@01 BinarySearchTree_res@439@01)))
(assert (not (= BinarySearchTree_res@476@01 target_4@445@01)))
(assert (not (= BinarySearchTree_res@476@01 (__name__ $Snap.unit))))
(assert (not (= BinarySearchTree_res@476@01 target_2@443@01)))
(assert (not (= BinarySearchTree_res@476@01 _cthread_175@433@01)))
; [exec]
; inhale typeof(BinarySearchTree_res) == BinarySearchTree()
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] typeof(BinarySearchTree_res) == BinarySearchTree()
; [eval] typeof(BinarySearchTree_res)
; [eval] BinarySearchTree()
(assert (=
  (typeof<PyType> BinarySearchTree_res@476@01)
  (as BinarySearchTree<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(BinarySearchTree_res, 170170373251925421444582457427464176135250765572418), write)
(declare-const $t@478@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(BinarySearchTree_res, 148310513873082034654315146951689972238776244529474), write)
(declare-const $t@479@01 $Snap)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_175 := BinarySearchTree___init__(_cthread_175, _method_measures_175, _residue_175,
;   BinarySearchTree_res)
; [eval] _cthread_163 != null
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
; [eval] self_6 != null
; [eval] issubtype(typeof(self_6), BinarySearchTree())
; [eval] typeof(self_6)
; [eval] BinarySearchTree()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> BinarySearchTree_res@476@01) (as BinarySearchTree<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> BinarySearchTree_res@476@01) (as BinarySearchTree<PyType>  PyType)))
; [eval] self_6 != null
; [eval] perm(MustTerminate(_cthread_163)) == none
; [eval] perm(MustTerminate(_cthread_163))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_163@480@01 $Perm)
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 ($Snap.combine ($Snap.first $t@481@01) ($Snap.second $t@481@01))))
(assert (= ($Snap.first $t@481@01) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@481@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@481@01))
    ($Snap.second ($Snap.second $t@481@01)))))
(assert (= ($Snap.first ($Snap.second $t@481@01)) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@481@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@481@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@481@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@481@01))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_175@435@01 _current_wait_level_163@480@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@481@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@481@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@481@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@481@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale mytree() == BinarySearchTree_res
(declare-const $t@482@01 $Snap)
(assert (= $t@482@01 $Snap.unit))
; [eval] mytree() == BinarySearchTree_res
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(assert (mytree%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (mytree%precondition $Snap.unit))
(assert (= (mytree $Snap.unit) BinarySearchTree_res@476@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(111486386338157)))
; [eval] (module_names_0 union Set(_single(111486386338157)))
; [eval] Set(_single(111486386338157))
; [eval] _single(111486386338157)
(declare-const module_names_0@483@01 Set<_Name>)
(assert (=
  module_names_0@483@01
  (Set_union module_names_0@475@01 (Set_singleton (_single<_Name> 111486386338157)))))
; [exec]
; _cwl_175 := BinarySearchTree___setitem__(_cthread_175, _method_measures_175,
;   _residue_175, _asserting(_asserting(mytree(), true), true &&
;   (_single(111486386338157) in module_names_0)), __prim__int___box__(3), str___create__(3,
;   6579570))
; [eval] _asserting(_asserting(mytree(), true), true && (_single(111486386338157) in module_names_0))
; [eval] _asserting(mytree(), true)
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (_asserting%precondition $Snap.unit (mytree $Snap.unit) true))
(pop) ; 3
; Joined path conditions
(assert (_asserting%precondition $Snap.unit (mytree $Snap.unit) true))
; [eval] true && (_single(111486386338157) in module_names_0)
(push) ; 3
; [then-branch: 456 | False | live]
; [else-branch: 456 | True | live]
(push) ; 4
; [then-branch: 456 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 456 | True]
; [eval] (_single(111486386338157) in module_names_0)
; [eval] _single(111486386338157)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(assert (not (Set_in (_single<_Name> 111486386338157) module_names_0@483@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 111486386338157) module_names_0@483@01))
(assert (_asserting%precondition $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01)))
(pop) ; 3
; Joined path conditions
(assert (and
  (Set_in (_single<_Name> 111486386338157) module_names_0@483@01)
  (_asserting%precondition $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01))))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] str___create__(3, 6579570)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 3 6579570))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 3 6579570))
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_9), BinarySearchTree())
; [eval] typeof(self_9)
; [eval] BinarySearchTree()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_asserting $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01))) (as BinarySearchTree<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_asserting $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01))) (as BinarySearchTree<PyType>  PyType)))
; [eval] issubtype(typeof(k), int())
; [eval] typeof(k)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(v), str())
; [eval] typeof(v)
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 3 6579570)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 3 6579570)) (as str<PyType>  PyType)))
; [eval] self_9 != null
(push) ; 3
(assert (not (not
  (=
    (_asserting $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (_asserting $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01))
    $Ref.null)))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  BinarySearchTree_res@476@01
  (_asserting $Snap.unit (_asserting $Snap.unit (mytree $Snap.unit) true) (Set_in (_single<_Name> 111486386338157) module_names_0@483@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@484@01 $Perm)
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 ($Snap.combine ($Snap.first $t@485@01) ($Snap.second $t@485@01))))
(assert (= ($Snap.first $t@485@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@485@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@485@01))
    ($Snap.second ($Snap.second $t@485@01)))))
(assert (= ($Snap.first ($Snap.second $t@485@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@485@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@485@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@485@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@485@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_175@435@01 _current_wait_level_166@484@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@485@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@485@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@485@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@485@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_175 := BinarySearchTree___setitem__(_cthread_175, _method_measures_175,
;   _residue_175, _asserting(_asserting(mytree(), true), true &&
;   (_single(111486386338157) in module_names_0)), __prim__int___box__(4), str___create__(4,
;   1702194274))
; [eval] _asserting(_asserting(mytree(), true), true && (_single(111486386338157) in module_names_0))
; [eval] _asserting(mytree(), true)
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] true && (_single(111486386338157) in module_names_0)
(push) ; 3
; [then-branch: 457 | False | live]
; [else-branch: 457 | True | live]
(push) ; 4
; [then-branch: 457 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 457 | True]
; [eval] (_single(111486386338157) in module_names_0)
; [eval] _single(111486386338157)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] str___create__(4, 1702194274)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 4 1702194274))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 4 1702194274))
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_9), BinarySearchTree())
; [eval] typeof(self_9)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(k), int())
; [eval] typeof(k)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(v), str())
; [eval] typeof(v)
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 4 1702194274)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 4 1702194274)) (as str<PyType>  PyType)))
; [eval] self_9 != null
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@486@01 $Perm)
(declare-const $t@487@01 $Snap)
(assert (= $t@487@01 ($Snap.combine ($Snap.first $t@487@01) ($Snap.second $t@487@01))))
(assert (= ($Snap.first $t@487@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@487@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@487@01))
    ($Snap.second ($Snap.second $t@487@01)))))
(assert (= ($Snap.first ($Snap.second $t@487@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@487@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@487@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@487@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@487@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_175@435@01 _current_wait_level_166@486@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@487@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@487@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_175 := BinarySearchTree___setitem__(_cthread_175, _method_measures_175,
;   _residue_175, _asserting(_asserting(mytree(), true), true &&
;   (_single(111486386338157) in module_names_0)), __prim__int___box__(6), str___create__(6,
;   131320444118393))
; [eval] _asserting(_asserting(mytree(), true), true && (_single(111486386338157) in module_names_0))
; [eval] _asserting(mytree(), true)
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] true && (_single(111486386338157) in module_names_0)
(push) ; 3
; [then-branch: 458 | False | live]
; [else-branch: 458 | True | live]
(push) ; 4
; [then-branch: 458 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 458 | True]
; [eval] (_single(111486386338157) in module_names_0)
; [eval] _single(111486386338157)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(6)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 6))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 6))
; [eval] str___create__(6, 131320444118393)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 6 131320444118393))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 6 131320444118393))
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_9), BinarySearchTree())
; [eval] typeof(self_9)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(k), int())
; [eval] typeof(k)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 6)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(v), str())
; [eval] typeof(v)
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 6 131320444118393)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 6 131320444118393)) (as str<PyType>  PyType)))
; [eval] self_9 != null
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@488@01 $Perm)
(declare-const $t@489@01 $Snap)
(assert (= $t@489@01 ($Snap.combine ($Snap.first $t@489@01) ($Snap.second $t@489@01))))
(assert (= ($Snap.first $t@489@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@489@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@489@01))
    ($Snap.second ($Snap.second $t@489@01)))))
(assert (= ($Snap.first ($Snap.second $t@489@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@489@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@489@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@489@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@489@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_175@435@01 _current_wait_level_166@488@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@489@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@489@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@489@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@489@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_175 := BinarySearchTree___setitem__(_cthread_175, _method_measures_175,
;   _residue_175, _asserting(_asserting(mytree(), true), true &&
;   (_single(111486386338157) in module_names_0)), __prim__int___box__(2), str___create__(2,
;   29793))
; [eval] _asserting(_asserting(mytree(), true), true && (_single(111486386338157) in module_names_0))
; [eval] _asserting(mytree(), true)
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] true && (_single(111486386338157) in module_names_0)
(push) ; 3
; [then-branch: 459 | False | live]
; [else-branch: 459 | True | live]
(push) ; 4
; [then-branch: 459 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 459 | True]
; [eval] (_single(111486386338157) in module_names_0)
; [eval] _single(111486386338157)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] str___create__(2, 29793)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 2 29793))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 2 29793))
; [eval] _cthread_166 != null
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_9), BinarySearchTree())
; [eval] typeof(self_9)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(k), int())
; [eval] typeof(k)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(v), str())
; [eval] typeof(v)
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 2 29793)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 2 29793)) (as str<PyType>  PyType)))
; [eval] self_9 != null
; [eval] perm(MustTerminate(_cthread_166)) == none
; [eval] perm(MustTerminate(_cthread_166))
; [eval] (forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false)
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_166@490@01 $Perm)
(declare-const $t@491@01 $Snap)
(assert (= $t@491@01 ($Snap.combine ($Snap.first $t@491@01) ($Snap.second $t@491@01))))
(assert (= ($Snap.first $t@491@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@491@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@491@01))
    ($Snap.second ($Snap.second $t@491@01)))))
(assert (= ($Snap.first ($Snap.second $t@491@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@491@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@491@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@491@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@491@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_175@435@01 _current_wait_level_166@490@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@491@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@491@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@491@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_175, target_3 := BinarySearchTree___getitem__(_cthread_175, _method_measures_175,
;   _residue_175, _asserting(_asserting(mytree(), true), true &&
;   (_single(111486386338157) in module_names_0)), __prim__int___box__(6))
; [eval] _asserting(_asserting(mytree(), true), true && (_single(111486386338157) in module_names_0))
; [eval] _asserting(mytree(), true)
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] true && (_single(111486386338157) in module_names_0)
(push) ; 3
; [then-branch: 460 | False | live]
; [else-branch: 460 | True | live]
(push) ; 4
; [then-branch: 460 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 460 | True]
; [eval] (_single(111486386338157) in module_names_0)
; [eval] _single(111486386338157)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(6)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_12), BinarySearchTree())
; [eval] typeof(self_12)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_5), int())
; [eval] typeof(key_5)
; [eval] int()
; [eval] self_12 != null
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false)
; [eval] (forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false)
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false)
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@492@01 $Perm)
(declare-const _res@493@01 $Ref)
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@494@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@494@01))
    ($Snap.second ($Snap.second $t@494@01)))))
(assert (= ($Snap.first ($Snap.second $t@494@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@494@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@494@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@494@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_175@435@01 _current_wait_level_169@492@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@494@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 3
; [then-branch: 461 | _res@493@01 == Null | live]
; [else-branch: 461 | _res@493@01 != Null | live]
(push) ; 4
; [then-branch: 461 | _res@493@01 == Null]
(assert (= _res@493@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 461 | _res@493@01 != Null]
(assert (not (= _res@493@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@493@01 $Ref.null)) (= _res@493@01 $Ref.null)))
(assert (or
  (= _res@493@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@493@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert true && (_single(500068610672) in module_names_0)
; [eval] (_single(500068610672) in module_names_0)
; [eval] _single(500068610672)
(set-option :timeout 0)
(push) ; 3
(assert (not (Set_in (_single<_Name> 500068610672) module_names_0@483@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 500068610672) module_names_0@483@01))
; [exec]
; _cwl_175 := print_0(_cthread_175, _method_measures_175, _residue_175, target_3)
; [eval] _cthread_172 != null
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
; [eval] issubtype(typeof(o), object())
; [eval] typeof(o)
; [eval] object()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> _res@493@01) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@493@01) (as object<PyType>  PyType)))
; [eval] perm(MustTerminate(_cthread_172)) == none
; [eval] perm(MustTerminate(_cthread_172))
; [eval] (forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false)
; [eval] (forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_172@495@01 $Perm)
(declare-const $t@496@01 $Snap)
(assert (= $t@496@01 ($Snap.combine ($Snap.first $t@496@01) ($Snap.second $t@496@01))))
(assert (= ($Snap.first $t@496@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@496@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@496@01))
    ($Snap.second ($Snap.second $t@496@01)))))
(assert (= ($Snap.first ($Snap.second $t@496@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@496@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@496@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@496@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@496@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_175@435@01 _current_wait_level_172@495@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@496@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_175, target_4 := BinarySearchTree___getitem__(_cthread_175, _method_measures_175,
;   _residue_175, _asserting(_asserting(mytree(), true), true &&
;   (_single(111486386338157) in module_names_0)), __prim__int___box__(2))
; [eval] _asserting(_asserting(mytree(), true), true && (_single(111486386338157) in module_names_0))
; [eval] _asserting(mytree(), true)
; [eval] mytree()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] true && (_single(111486386338157) in module_names_0)
(push) ; 3
; [then-branch: 462 | False | live]
; [else-branch: 462 | True | live]
(push) ; 4
; [then-branch: 462 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 462 | True]
; [eval] (_single(111486386338157) in module_names_0)
; [eval] _single(111486386338157)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_12), BinarySearchTree())
; [eval] typeof(self_12)
; [eval] BinarySearchTree()
; [eval] issubtype(typeof(key_5), int())
; [eval] typeof(key_5)
; [eval] int()
; [eval] self_12 != null
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false)
; [eval] (forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false)
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false)
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@497@01 $Perm)
(declare-const _res@498@01 $Ref)
(declare-const $t@499@01 $Snap)
(assert (= $t@499@01 ($Snap.combine ($Snap.first $t@499@01) ($Snap.second $t@499@01))))
(assert (= ($Snap.first $t@499@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@499@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@499@01))
    ($Snap.second ($Snap.second $t@499@01)))))
(assert (= ($Snap.first ($Snap.second $t@499@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@499@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@499@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@499@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@499@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_175@435@01 _current_wait_level_169@497@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@499@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@499@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@499@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@499@01))))
  $Snap.unit))
; [eval] _res == null || issubtype(typeof(_res), str())
; [eval] _res == null
(push) ; 3
; [then-branch: 463 | _res@498@01 == Null | live]
; [else-branch: 463 | _res@498@01 != Null | live]
(push) ; 4
; [then-branch: 463 | _res@498@01 == Null]
(assert (= _res@498@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 463 | _res@498@01 != Null]
(assert (not (= _res@498@01 $Ref.null)))
; [eval] issubtype(typeof(_res), str())
; [eval] typeof(_res)
; [eval] str()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _res@498@01 $Ref.null)) (= _res@498@01 $Ref.null)))
(assert (or
  (= _res@498@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@498@01) (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@499@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@499@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@499@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@499@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert true && (_single(500068610672) in module_names_0)
; [eval] (_single(500068610672) in module_names_0)
; [eval] _single(500068610672)
; [exec]
; _cwl_175 := print_0(_cthread_175, _method_measures_175, _residue_175, target_4)
; [eval] _cthread_172 != null
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
; [eval] issubtype(typeof(o), object())
; [eval] typeof(o)
; [eval] object()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> _res@498@01) (as object<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@498@01) (as object<PyType>  PyType)))
; [eval] perm(MustTerminate(_cthread_172)) == none
; [eval] perm(MustTerminate(_cthread_172))
; [eval] (forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false)
; [eval] (forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_172@500@01 $Perm)
(declare-const $t@501@01 $Snap)
(assert (= $t@501@01 ($Snap.combine ($Snap.first $t@501@01) ($Snap.second $t@501@01))))
(assert (= ($Snap.first $t@501@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@501@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@501@01))
    ($Snap.second ($Snap.second $t@501@01)))))
(assert (= ($Snap.first ($Snap.second $t@501@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@501@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@501@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@501@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_175@435@01 _current_wait_level_172@500@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@501@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
