(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-08 21:12:12
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___bool__ ($Snap $Ref) Bool)
(declare-fun int___bool__%limited ($Snap $Ref) Bool)
(declare-fun int___bool__%stateless ($Ref) Bool)
(declare-fun int___bool__%precondition ($Snap $Ref) Bool)
(declare-fun int___ge__ ($Snap Int Int) Bool)
(declare-fun int___ge__%limited ($Snap Int Int) Bool)
(declare-fun int___ge__%stateless (Int Int) Bool)
(declare-fun int___ge__%precondition ($Snap Int Int) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___sub__%precondition ($Snap Int Int) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-2018|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-2019|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-2020|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2021|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2058|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2059|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@4@00) (bool___unbox__ s@$ box@4@00))
  :pattern ((bool___unbox__ s@$ box@4@00))
  :qid |quant-u-2022|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (bool___unbox__%stateless box@4@00)
  :pattern ((bool___unbox__%limited s@$ box@4@00))
  :qid |quant-u-2023|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (let ((result@5@00 (bool___unbox__%limited s@$ box@4@00))) (=>
    (bool___unbox__%precondition s@$ box@4@00)
    (= (__prim__bool___box__%limited $Snap.unit result@5@00) box@4@00)))
  :pattern ((bool___unbox__%limited s@$ box@4@00))
  :qid |quant-u-2060|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (let ((result@5@00 (bool___unbox__%limited s@$ box@4@00))) (=>
    (bool___unbox__%precondition s@$ box@4@00)
    (__prim__bool___box__%precondition $Snap.unit result@5@00)))
  :pattern ((bool___unbox__%limited s@$ box@4@00))
  :qid |quant-u-2061|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@6@00)
    (__prim__bool___box__ s@$ prim@6@00))
  :pattern ((__prim__bool___box__ s@$ prim@6@00))
  :qid |quant-u-2024|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (__prim__bool___box__%stateless prim@6@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2025|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (and
      (= (typeof<PyType> result@7@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@7@00) prim@6@00)
      (= (int___unbox__%limited $Snap.unit result@7@00) (ite prim@6@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2062|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2063|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (bool___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2064|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (int___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-2065|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@8@00) (int___unbox__ s@$ box@8@00))
  :pattern ((int___unbox__ s@$ box@8@00))
  :qid |quant-u-2026|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (int___unbox__%stateless box@8@00)
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2027|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (int___unbox__%precondition s@$ box@8@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@9@00) box@8@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@9@00 0)))
          box@8@00)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2066|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (not (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@9@00)))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2067|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@9@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2068|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@10@00)
    (__prim__int___box__ s@$ prim@10@00))
  :pattern ((__prim__int___box__ s@$ prim@10@00))
  :qid |quant-u-2028|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (__prim__int___box__%stateless prim@10@00)
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2029|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) (=>
    (__prim__int___box__%precondition s@$ prim@10@00)
    (and
      (= (typeof<PyType> result@11@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@11@00) prim@10@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2069|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2070|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) (=>
    (__prim__int___box__%precondition s@$ prim@10@00)
    (int___unbox__%precondition $Snap.unit result@11@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2071|)))
(assert (forall ((s@$ $Snap) (id@12@00 Int)) (!
  (= (_isDefined%limited s@$ id@12@00) (_isDefined s@$ id@12@00))
  :pattern ((_isDefined s@$ id@12@00))
  :qid |quant-u-2030|)))
(assert (forall ((s@$ $Snap) (id@12@00 Int)) (!
  (_isDefined%stateless id@12@00)
  :pattern ((_isDefined%limited s@$ id@12@00))
  :qid |quant-u-2031|)))
(assert (forall ((s@$ $Snap) (r@14@00 $Ref)) (!
  (= (Level%limited s@$ r@14@00) (Level s@$ r@14@00))
  :pattern ((Level s@$ r@14@00))
  :qid |quant-u-2032|)))
(assert (forall ((s@$ $Snap) (r@14@00 $Ref)) (!
  (Level%stateless r@14@00)
  :pattern ((Level%limited s@$ r@14@00))
  :qid |quant-u-2033|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (=
    (str___create__%limited s@$ len@16@00 value@17@00)
    (str___create__ s@$ len@16@00 value@17@00))
  :pattern ((str___create__ s@$ len@16@00 value@17@00))
  :qid |quant-u-2034|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (str___create__%stateless len@16@00 value@17@00)
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-2035|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (and
      (= (str___len__ $Snap.unit result@18@00) len@16@00)
      (= (str___val__ $Snap.unit result@18@00) value@17@00)
      (= (typeof<PyType> result@18@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-2072|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (str___len__%precondition $Snap.unit result@18@00)))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-2073|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) (=>
    (str___create__%precondition s@$ len@16@00 value@17@00)
    (str___val__%precondition $Snap.unit result@18@00)))
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-2074|)))
(assert (forall ((s@$ $Snap) (len@16@00 Int) (value@17@00 Int)) (!
  (let ((result@18@00 (str___create__%limited s@$ len@16@00 value@17@00))) true)
  :pattern ((str___create__%limited s@$ len@16@00 value@17@00))
  :qid |quant-u-2075|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@19@00 key@20@00 value@21@00)
    (Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :pattern ((Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-2036|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  (Measure$check%stateless map@19@00 key@20@00 value@21@00)
  :pattern ((Measure$check%limited s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-2037|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@19@00 key@20@00 value@21@00)
    (=
      (Measure$check s@$ map@19@00 key@20@00 value@21@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@19@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@20@00)))
          (> (Measure$value<Int> m) value@21@00))
        :pattern ((Seq_contains map@19@00 m))
        :pattern ((Seq_contains_trigger map@19@00 m))
        :pattern ((Seq_contains_trigger map@19@00 m))
        ))))
  :pattern ((Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-2076|)))
(assert (forall ((s@$ $Snap) (map@19@00 Seq<Measure$>) (key@20@00 $Ref) (value@21@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@19@00 key@20@00 value@21@00))
  :qid |quant-u-2077|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (other@24@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@23@00 other@24@00)
    (str___eq__ s@$ self@23@00 other@24@00))
  :pattern ((str___eq__ s@$ self@23@00 other@24@00))
  :qid |quant-u-2038|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (other@24@00 $Ref)) (!
  (str___eq__%stateless self@23@00 other@24@00)
  :pattern ((str___eq__%limited s@$ self@23@00 other@24@00))
  :qid |quant-u-2039|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (other@24@00 $Ref)) (!
  (let ((result@25@00 (str___eq__%limited s@$ self@23@00 other@24@00))) (=>
    (str___eq__%precondition s@$ self@23@00 other@24@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@23@00)
          (str___val__ $Snap.unit other@24@00))
        result@25@00)
      (=>
        result@25@00
        (=
          (str___len__ $Snap.unit self@23@00)
          (str___len__ $Snap.unit other@24@00))))))
  :pattern ((str___eq__%limited s@$ self@23@00 other@24@00))
  :qid |quant-u-2078|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (other@24@00 $Ref)) (!
  (let ((result@25@00 (str___eq__%limited s@$ self@23@00 other@24@00))) (=>
    (str___eq__%precondition s@$ self@23@00 other@24@00)
    (and
      (str___val__%precondition $Snap.unit self@23@00)
      (str___val__%precondition $Snap.unit other@24@00))))
  :pattern ((str___eq__%limited s@$ self@23@00 other@24@00))
  :qid |quant-u-2079|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (other@24@00 $Ref)) (!
  (let ((result@25@00 (str___eq__%limited s@$ self@23@00 other@24@00))) (=>
    (and (str___eq__%precondition s@$ self@23@00 other@24@00) result@25@00)
    (and
      (str___len__%precondition $Snap.unit self@23@00)
      (str___len__%precondition $Snap.unit other@24@00))))
  :pattern ((str___eq__%limited s@$ self@23@00 other@24@00))
  :qid |quant-u-2080|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref)) (!
  (= (int___bool__%limited s@$ self@26@00) (int___bool__ s@$ self@26@00))
  :pattern ((int___bool__ s@$ self@26@00))
  :qid |quant-u-2040|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref)) (!
  (int___bool__%stateless self@26@00)
  :pattern ((int___bool__%limited s@$ self@26@00))
  :qid |quant-u-2041|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref)) (!
  (let ((result@27@00 (int___bool__%limited s@$ self@26@00))) (=>
    (int___bool__%precondition s@$ self@26@00)
    (and
      (=> (= self@26@00 $Ref.null) (not result@27@00))
      (=>
        (not (= self@26@00 $Ref.null))
        (= result@27@00 (not (= (int___unbox__ $Snap.unit self@26@00) 0)))))))
  :pattern ((int___bool__%limited s@$ self@26@00))
  :qid |quant-u-2081|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref)) (!
  (let ((result@27@00 (int___bool__%limited s@$ self@26@00))) true)
  :pattern ((int___bool__%limited s@$ self@26@00))
  :qid |quant-u-2082|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref)) (!
  (let ((result@27@00 (int___bool__%limited s@$ self@26@00))) (=>
    (and
      (int___bool__%precondition s@$ self@26@00)
      (not (= self@26@00 $Ref.null)))
    (int___unbox__%precondition $Snap.unit self@26@00)))
  :pattern ((int___bool__%limited s@$ self@26@00))
  :qid |quant-u-2083|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  (=
    (int___ge__%limited s@$ self@28@00 other@29@00)
    (int___ge__ s@$ self@28@00 other@29@00))
  :pattern ((int___ge__ s@$ self@28@00 other@29@00))
  :qid |quant-u-2042|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  (int___ge__%stateless self@28@00 other@29@00)
  :pattern ((int___ge__%limited s@$ self@28@00 other@29@00))
  :qid |quant-u-2043|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  (=>
    (int___ge__%precondition s@$ self@28@00 other@29@00)
    (= (int___ge__ s@$ self@28@00 other@29@00) (>= self@28@00 other@29@00)))
  :pattern ((int___ge__ s@$ self@28@00 other@29@00))
  :qid |quant-u-2084|)))
(assert (forall ((s@$ $Snap) (self@28@00 Int) (other@29@00 Int)) (!
  true
  :pattern ((int___ge__ s@$ self@28@00 other@29@00))
  :qid |quant-u-2085|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@31@00 other@32@00)
    (int___lt__ s@$ self@31@00 other@32@00))
  :pattern ((int___lt__ s@$ self@31@00 other@32@00))
  :qid |quant-u-2044|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  (int___lt__%stateless self@31@00 other@32@00)
  :pattern ((int___lt__%limited s@$ self@31@00 other@32@00))
  :qid |quant-u-2045|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@31@00 other@32@00)
    (= (int___lt__ s@$ self@31@00 other@32@00) (< self@31@00 other@32@00)))
  :pattern ((int___lt__ s@$ self@31@00 other@32@00))
  :qid |quant-u-2086|)))
(assert (forall ((s@$ $Snap) (self@31@00 Int) (other@32@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@31@00 other@32@00))
  :qid |quant-u-2087|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@34@00 other@35@00)
    (int___gt__ s@$ self@34@00 other@35@00))
  :pattern ((int___gt__ s@$ self@34@00 other@35@00))
  :qid |quant-u-2046|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  (int___gt__%stateless self@34@00 other@35@00)
  :pattern ((int___gt__%limited s@$ self@34@00 other@35@00))
  :qid |quant-u-2047|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@34@00 other@35@00)
    (= (int___gt__ s@$ self@34@00 other@35@00) (> self@34@00 other@35@00)))
  :pattern ((int___gt__ s@$ self@34@00 other@35@00))
  :qid |quant-u-2088|)))
(assert (forall ((s@$ $Snap) (self@34@00 Int) (other@35@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@34@00 other@35@00))
  :qid |quant-u-2089|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  (=
    (int___add__%limited s@$ self@37@00 other@38@00)
    (int___add__ s@$ self@37@00 other@38@00))
  :pattern ((int___add__ s@$ self@37@00 other@38@00))
  :qid |quant-u-2048|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  (int___add__%stateless self@37@00 other@38@00)
  :pattern ((int___add__%limited s@$ self@37@00 other@38@00))
  :qid |quant-u-2049|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@37@00 other@38@00)
    (= (int___add__ s@$ self@37@00 other@38@00) (+ self@37@00 other@38@00)))
  :pattern ((int___add__ s@$ self@37@00 other@38@00))
  :qid |quant-u-2090|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@37@00 other@38@00))
  :qid |quant-u-2091|)))
(assert (forall ((s@$ $Snap) (self@40@00 Int) (other@41@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@40@00 other@41@00)
    (int___sub__ s@$ self@40@00 other@41@00))
  :pattern ((int___sub__ s@$ self@40@00 other@41@00))
  :qid |quant-u-2050|)))
(assert (forall ((s@$ $Snap) (self@40@00 Int) (other@41@00 Int)) (!
  (int___sub__%stateless self@40@00 other@41@00)
  :pattern ((int___sub__%limited s@$ self@40@00 other@41@00))
  :qid |quant-u-2051|)))
(assert (forall ((s@$ $Snap) (self@40@00 Int) (other@41@00 Int)) (!
  (=>
    (int___sub__%precondition s@$ self@40@00 other@41@00)
    (= (int___sub__ s@$ self@40@00 other@41@00) (- self@40@00 other@41@00)))
  :pattern ((int___sub__ s@$ self@40@00 other@41@00))
  :qid |quant-u-2092|)))
(assert (forall ((s@$ $Snap) (self@40@00 Int) (other@41@00 Int)) (!
  true
  :pattern ((int___sub__ s@$ self@40@00 other@41@00))
  :qid |quant-u-2093|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-2052|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-2053|)))
(assert (forall ((s@$ $Snap) (val@44@00 $Ref) (id@45@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@44@00 id@45@00)
    (_checkDefined s@$ val@44@00 id@45@00))
  :pattern ((_checkDefined s@$ val@44@00 id@45@00))
  :qid |quant-u-2054|)))
(assert (forall ((s@$ $Snap) (val@44@00 $Ref) (id@45@00 Int)) (!
  (_checkDefined%stateless val@44@00 id@45@00)
  :pattern ((_checkDefined%limited s@$ val@44@00 id@45@00))
  :qid |quant-u-2055|)))
(assert (forall ((s@$ $Snap) (val@44@00 $Ref) (id@45@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@44@00 id@45@00)
    (= (_checkDefined s@$ val@44@00 id@45@00) val@44@00))
  :pattern ((_checkDefined s@$ val@44@00 id@45@00))
  :qid |quant-u-2094|)))
(assert (forall ((s@$ $Snap) (val@44@00 $Ref) (id@45@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@44@00 id@45@00))
  :qid |quant-u-2095|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-2056|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-2057|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- non_terminating ----------
(declare-const _cthread_156@0@01 $Ref)
(declare-const _caller_measures_156@1@01 Seq<Measure$>)
(declare-const _residue_156@2@01 $Perm)
(declare-const _current_wait_level_156@3@01 $Perm)
(declare-const _cthread_156@4@01 $Ref)
(declare-const _caller_measures_156@5@01 Seq<Measure$>)
(declare-const _residue_156@6@01 $Perm)
(declare-const _current_wait_level_156@7@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@4@01 $Ref.null)))
(assert (=
  ($Snap.second $t@8@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.second ($Snap.second $t@8@01)))))
(assert (= ($Snap.first ($Snap.second $t@8@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@4@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@8@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@9@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@9@01))
    ($Snap.second ($Snap.second $t@9@01)))))
(assert (= ($Snap.first ($Snap.second $t@9@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@9@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@9@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@9@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@9@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@6@01 _current_wait_level_156@7@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@9@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@10@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@11@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@12@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; label __end
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- non_terminating2 ----------
(declare-const _cthread_157@13@01 $Ref)
(declare-const _caller_measures_157@14@01 Seq<Measure$>)
(declare-const _residue_157@15@01 $Perm)
(declare-const _current_wait_level_157@16@01 $Perm)
(declare-const _cthread_157@17@01 $Ref)
(declare-const _caller_measures_157@18@01 Seq<Measure$>)
(declare-const _residue_157@19@01 $Perm)
(declare-const _current_wait_level_157@20@01 $Perm)
(push) ; 1
(declare-const $t@21@01 $Snap)
(assert (= $t@21@01 ($Snap.combine ($Snap.first $t@21@01) ($Snap.second $t@21@01))))
(assert (= ($Snap.first $t@21@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@17@01 $Ref.null)))
(assert (=
  ($Snap.second $t@21@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@21@01))
    ($Snap.second ($Snap.second $t@21@01)))))
(assert (= ($Snap.first ($Snap.second $t@21@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@17@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@21@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@21@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@21@01))))))
; [then-branch: 0 | False | dead]
; [else-branch: 0 | True | live]
(push) ; 2
; [else-branch: 0 | True]
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@21@01))) $Snap.unit))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@21@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
(assert (= ($Snap.first $t@22@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@22@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@22@01))
    ($Snap.second ($Snap.second $t@22@01)))))
(assert (= ($Snap.first ($Snap.second $t@22@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@22@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@22@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@19@01 _current_wait_level_157@20@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@22@01))) $Snap.unit))
(pop) ; 3
(push) ; 3
; [exec]
; var _err: Ref
(declare-const _err@23@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@24@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@25@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq(Measure$create(false, _cthread_157, 0))
; [eval] Seq(Measure$create(false, _cthread_157, 0))
; [eval] Measure$create(false, _cthread_157, 0)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> false _cthread_157@17@01 0)))
  1))
(declare-const _method_measures_157@26@01 Seq<Measure$>)
(assert (=
  _method_measures_157@26@01
  (Seq_singleton (Measure$create<Measure$> false _cthread_157@17@01 0))))
; [exec]
; _err := null
; [exec]
; label __end
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_call_non_terminating_1 ----------
(declare-const _cthread_158@27@01 $Ref)
(declare-const _caller_measures_158@28@01 Seq<Measure$>)
(declare-const _residue_158@29@01 $Perm)
(declare-const _current_wait_level_158@30@01 $Perm)
(declare-const _cthread_158@31@01 $Ref)
(declare-const _caller_measures_158@32@01 Seq<Measure$>)
(declare-const _residue_158@33@01 $Perm)
(declare-const _current_wait_level_158@34@01 $Perm)
(push) ; 1
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
(assert (= ($Snap.first $t@35@01) $Snap.unit))
; [eval] _cthread_158 != null
(assert (not (= _cthread_158@31@01 $Ref.null)))
(assert (=
  ($Snap.second $t@35@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@01))
    ($Snap.second ($Snap.second $t@35@01)))))
(assert (= ($Snap.first ($Snap.second $t@35@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_158@31@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@35@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@35@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@35@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@35@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@36@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@36@01))
    ($Snap.second ($Snap.second $t@36@01)))))
(assert (= ($Snap.first ($Snap.second $t@36@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@36@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@36@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@36@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_158@33@01 _current_wait_level_158@34@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@36@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@37@01 $Ref)
; [exec]
; var i: Ref
(declare-const i@38@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@39@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@40@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@41@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@42@01 $Perm)
; [exec]
; var _residue_181: Perm
(declare-const _residue_181@43@01 $Perm)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@44@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@45@01 Seq<Measure$>)
; [exec]
; _method_measures_158 := Seq(Measure$create(true, _cthread_158, 2))
; [eval] Seq(Measure$create(true, _cthread_158, 2))
; [eval] Measure$create(true, _cthread_158, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_158@31@01 2)))
  1))
(declare-const _method_measures_158@46@01 Seq<Measure$>)
(assert (=
  _method_measures_158@46@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_158@31@01 2))))
; [exec]
; _err := null
; [exec]
; i := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i@47@01 $Ref)
(assert (= i@47@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(105)
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 105))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 105))
(assert (_isDefined $Snap.unit 105))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_158))
; [eval] perm(MustTerminate(_cthread_158))
(declare-const _loop_original_must_terminate@49@01 $Perm)
(assert (= _loop_original_must_terminate@49@01 $Perm.Write))
; [exec]
; _loop_termination_flag := true
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@50@01 Seq<Measure$>)
(declare-const i@51@01 $Ref)
(declare-const _loop_check_before@52@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 ($Snap.combine ($Snap.first $t@53@01) ($Snap.second $t@53@01))))
(assert (= ($Snap.first $t@53@01) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _residue_181)
(assert (=
  ($Snap.second $t@53@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@53@01))
    ($Snap.second ($Snap.second $t@53@01)))))
(assert (= ($Snap.first ($Snap.second $t@53@01)) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _residue_181)
(assert (=
  ($Snap.second ($Snap.second $t@53@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@53@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@53@01))) $Snap.unit))
; [eval] _residue_158 <= _residue_181
(assert (<= _residue_158@33@01 _residue_181@43@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@53@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i@51@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i, 105))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@51@01 105))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@51@01 105))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@51@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@51@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@51@01 105)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@51@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5) | live]
; [else-branch: 1 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i@47@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@47@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i, 105))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@47@01 105))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@47@01 105))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@47@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@47@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@47@01 105)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@47@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@47@01 105))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@47@01, 105)), 5) | live]
; [else-branch: 2 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@47@01, 105)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@47@01, 105)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@47@01 105)))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | True | live]
; [else-branch: 3 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3 | True]
; [eval] _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 4
; [then-branch: 4 | False | dead]
; [else-branch: 4 | True | live]
(push) ; 5
; [else-branch: 4 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@53@01 ($Snap.combine ($Snap.first $t@53@01) ($Snap.second $t@53@01))))
(assert (= ($Snap.first $t@53@01) $Snap.unit))
(assert (=
  ($Snap.second $t@53@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@53@01))
    ($Snap.second ($Snap.second $t@53@01)))))
(assert (= ($Snap.first ($Snap.second $t@53@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@53@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@53@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@53@01))) $Snap.unit))
(assert (<= _residue_158@33@01 _residue_181@43@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@53@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i@51@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i@51@01 105))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@51@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@51@01 105)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5) | live]
; [else-branch: 5 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 5 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))
; [exec]
; _loop_measures := Seq(Measure$create(true, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i,
;   105)))))
; [eval] Seq(Measure$create(true, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i, 105)))))
; [eval] Measure$create(true, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i, 105))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105))))))
  1))
(declare-const _loop_measures@54@01 Seq<Measure$>)
(assert (=
  _loop_measures@54@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)))))))
; [exec]
; i := __prim__int___box__(int___add__(int___unbox__(i), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i), 1))
; [eval] int___add__(int___unbox__(i), 1)
; [eval] int___unbox__(i)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i@51@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i@51@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i@51@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i@51@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i@51@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i@51@01) 1)))
(declare-const i@55@01 $Ref)
(assert (=
  i@55@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i@51@01) 1))))
; [exec]
; inhale _isDefined(105)
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !int___lt__(int___unbox__(_checkDefined(i, 105)), 5) ||
;   Measure$check(_loop_measures, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i,
;   105))))
; [eval] _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), 5) || Measure$check(_loop_measures, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i, 105))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | True | live]
; [else-branch: 6 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 6 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), 5) || Measure$check(_loop_measures, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i, 105))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@55@01 105))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@55@01 105))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@55@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@55@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@55@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
(push) ; 8
; [then-branch: 7 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5)) | live]
; [else-branch: 7 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5) | live]
(push) ; 9
; [then-branch: 7 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 7 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
; [eval] Measure$check(_loop_measures, _cthread_158, int___sub__(5, int___unbox__(_checkDefined(i, 105))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures@54@01 _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@54@01 _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))
    (Measure$check%precondition $Snap.unit _loop_measures@54@01 _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i@55@01 105)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@55@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@55@01 105))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))
      (Measure$check%precondition $Snap.unit _loop_measures@54@01 _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
  (Measure$check $Snap.unit _loop_measures@54@01 _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
  (Measure$check $Snap.unit _loop_measures@54@01 _cthread_158@31@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i@55@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@55@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i, 105))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5) | live]
; [else-branch: 8 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 8 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i, 105)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))
(pop) ; 7
(push) ; 7
; [else-branch: 8 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@55@01, 105)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)))
(push) ; 6
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@55@01 105)))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), 5) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 9 | False | dead]
; [else-branch: 9 | True | live]
(push) ; 7
; [else-branch: 9 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | True | live]
; [else-branch: 10 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 10 | True]
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false) && ((forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false) && ((forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false) && (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
(push) ; 8
; [then-branch: 11 | False | live]
; [else-branch: 11 | True | live]
(push) ; 9
; [then-branch: 11 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 11 | True]
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
(push) ; 10
; [then-branch: 12 | False | live]
; [else-branch: 12 | True | live]
(push) ; 11
; [then-branch: 12 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 12 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 13 | False | live]
; [else-branch: 13 | True | live]
(push) ; 13
; [then-branch: 13 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 13 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(pop) ; 5
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
  ($Snap.first ($Snap.second ($Snap.second $t@35@01)))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), 5)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5)) | live]
; [else-branch: 14 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 14 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@51@01, 105)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@51@01 105)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_158)) > none ==>
;   acc(MustTerminate(_cthread_158), perm(MustTerminate(_cthread_158)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_158)) > none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | True | live]
; [else-branch: 15 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 15 | True]
; [eval] perm(MustTerminate(_cthread_158)) - _loop_original_must_terminate
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 7
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))))
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop
; [exec]
; _cwl_158 := non_terminating(_cthread_158, _method_measures_158, _residue_158)
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@49@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_call_non_terminating_2 ----------
(declare-const _cthread_159@57@01 $Ref)
(declare-const _caller_measures_159@58@01 Seq<Measure$>)
(declare-const _residue_159@59@01 $Perm)
(declare-const _current_wait_level_159@60@01 $Perm)
(declare-const _cthread_159@61@01 $Ref)
(declare-const _caller_measures_159@62@01 Seq<Measure$>)
(declare-const _residue_159@63@01 $Perm)
(declare-const _current_wait_level_159@64@01 $Perm)
(push) ; 1
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 ($Snap.combine ($Snap.first $t@65@01) ($Snap.second $t@65@01))))
(assert (= ($Snap.first $t@65@01) $Snap.unit))
; [eval] _cthread_159 != null
(assert (not (= _cthread_159@61@01 $Ref.null)))
(assert (=
  ($Snap.second $t@65@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@65@01))
    ($Snap.second ($Snap.second $t@65@01)))))
(assert (= ($Snap.first ($Snap.second $t@65@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_159@61@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@65@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@65@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@65@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@65@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 ($Snap.combine ($Snap.first $t@66@01) ($Snap.second $t@66@01))))
(assert (= ($Snap.first $t@66@01) $Snap.unit))
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: Level(_r_12) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@66@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@66@01))
    ($Snap.second ($Snap.second $t@66@01)))))
(assert (= ($Snap.first ($Snap.second $t@66@01)) $Snap.unit))
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: Level(_r_12) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@66@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@66@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@66@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@66@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_159@63@01 _current_wait_level_159@64@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@66@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@67@01 $Ref)
; [exec]
; var i_0: Ref
(declare-const i_0@68@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@69@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@70@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@71@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@72@01 $Perm)
; [exec]
; var _residue_182: Perm
(declare-const _residue_182@73@01 $Perm)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@74@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@75@01 Seq<Measure$>)
; [exec]
; _method_measures_159 := Seq(Measure$create(true, _cthread_159, 2))
; [eval] Seq(Measure$create(true, _cthread_159, 2))
; [eval] Measure$create(true, _cthread_159, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_159@61@01 2)))
  1))
(declare-const _method_measures_159@76@01 Seq<Measure$>)
(assert (=
  _method_measures_159@76@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_159@61@01 2))))
; [exec]
; _err := null
; [exec]
; i_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_0@77@01 $Ref)
(assert (= i_0@77@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3170153)
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] _isDefined(3170153)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170153))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170153))
(assert (_isDefined $Snap.unit 3170153))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_159))
; [eval] perm(MustTerminate(_cthread_159))
(declare-const _loop_original_must_terminate_0@79@01 $Perm)
(assert (= _loop_original_must_terminate_0@79@01 $Perm.Write))
; [exec]
; _loop_termination_flag_0 := true
; [exec]
; _loop_check_before_0 := true
(declare-const _loop_measures_0@80@01 Seq<Measure$>)
(declare-const i_0@81@01 $Ref)
(declare-const _cwl_159@82@01 $Perm)
(declare-const _loop_check_before_0@83@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 ($Snap.combine ($Snap.first $t@84@01) ($Snap.second $t@84@01))))
(assert (= ($Snap.first $t@84@01) $Snap.unit))
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _residue_182)
(assert (=
  ($Snap.second $t@84@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@01))
    ($Snap.second ($Snap.second $t@84@01)))))
(assert (= ($Snap.first ($Snap.second $t@84@01)) $Snap.unit))
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _residue_182)
(assert (=
  ($Snap.second ($Snap.second $t@84@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@84@01))) $Snap.unit))
; [eval] _residue_159 <= _residue_182
(assert (<= _residue_159@63@01 _residue_182@73@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_0@81@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@81@01 3170153))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@81@01 3170153))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@81@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@81@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@81@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5) | live]
; [else-branch: 16 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 16 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153)))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_0@77@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@77@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@77@01 3170153))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@77@01 3170153))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@77@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@77@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@77@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@77@01, 3170153)), 5) | live]
; [else-branch: 17 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@77@01, 3170153)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 17 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@77@01, 3170153)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153)))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@77@01 3170153)))
    0)))
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | True | live]
; [else-branch: 18 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 18 | True]
; [eval] _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_0 ==> (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false) && ((forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false) && ((forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false) && (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 4
; [then-branch: 19 | False | dead]
; [else-branch: 19 | True | live]
(push) ; 5
; [else-branch: 19 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@84@01 ($Snap.combine ($Snap.first $t@84@01) ($Snap.second $t@84@01))))
(assert (= ($Snap.first $t@84@01) $Snap.unit))
(assert (=
  ($Snap.second $t@84@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@01))
    ($Snap.second ($Snap.second $t@84@01)))))
(assert (= ($Snap.first ($Snap.second $t@84@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@84@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@84@01))) $Snap.unit))
(assert (<= _residue_159@63@01 _residue_182@73@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_0@81@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_0@81@01 3170153))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@81@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), 5)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5) | live]
; [else-branch: 20 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 20 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@81@01, 3170153)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)) 5))
; [exec]
; _loop_measures_0 := Seq(Measure$create(true, _cthread_159, int___sub__(5, int___unbox__(_checkDefined(i_0,
;   3170153)))))
; [eval] Seq(Measure$create(true, _cthread_159, int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153)))))
; [eval] Measure$create(true, _cthread_159, int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_0, 3170153)))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_159@61@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153))))))
  1))
(declare-const _loop_measures_0@85@01 Seq<Measure$>)
(assert (=
  _loop_measures_0@85@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_159@61@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@81@01 3170153)))))))
; [exec]
; i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_0), 1))
; [eval] int___add__(int___unbox__(i_0), 1)
; [eval] int___unbox__(i_0)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_0@81@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_0@81@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0@81@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0@81@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@81@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@81@01) 1)))
(declare-const i_0@86@01 $Ref)
(assert (=
  i_0@86@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@81@01) 1))))
; [exec]
; inhale _isDefined(3170153)
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 $Snap.unit))
; [eval] _isDefined(3170153)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_159 := non_terminating(_cthread_159, _method_measures_159, _residue_182)
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_call_non_terminating_3 ----------
(declare-const _cthread_160@88@01 $Ref)
(declare-const _caller_measures_160@89@01 Seq<Measure$>)
(declare-const _residue_160@90@01 $Perm)
(declare-const _current_wait_level_160@91@01 $Perm)
(declare-const _cthread_160@92@01 $Ref)
(declare-const _caller_measures_160@93@01 Seq<Measure$>)
(declare-const _residue_160@94@01 $Perm)
(declare-const _current_wait_level_160@95@01 $Perm)
(push) ; 1
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 ($Snap.combine ($Snap.first $t@96@01) ($Snap.second $t@96@01))))
(assert (= ($Snap.first $t@96@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@92@01 $Ref.null)))
(assert (=
  ($Snap.second $t@96@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@96@01))
    ($Snap.second ($Snap.second $t@96@01)))))
(assert (= ($Snap.first ($Snap.second $t@96@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@92@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@96@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@97@01 $Snap)
(assert (= $t@97@01 ($Snap.combine ($Snap.first $t@97@01) ($Snap.second $t@97@01))))
(assert (= ($Snap.first $t@97@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@97@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@97@01))
    ($Snap.second ($Snap.second $t@97@01)))))
(assert (= ($Snap.first ($Snap.second $t@97@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@97@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@97@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@97@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@97@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@94@01 _current_wait_level_160@95@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@97@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@98@01 $Ref)
; [exec]
; var i_1: Ref
(declare-const i_1@99@01 $Ref)
; [exec]
; var _loop_measures_1: Seq[Measure$]
(declare-const _loop_measures_1@100@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_1: Bool
(declare-const _loop_check_before_1@101@01 Bool)
; [exec]
; var _loop_termination_flag_1: Bool
(declare-const _loop_termination_flag_1@102@01 Bool)
; [exec]
; var _loop_original_must_terminate_1: Perm
(declare-const _loop_original_must_terminate_1@103@01 $Perm)
; [exec]
; var _residue_183: Perm
(declare-const _residue_183@104@01 $Perm)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@105@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@106@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_1 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_1@107@01 $Ref)
(assert (= i_1@107@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3235689))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235689))
(assert (_isDefined $Snap.unit 3235689))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_1 := perm(MustTerminate(_cthread_160))
; [eval] perm(MustTerminate(_cthread_160))
(declare-const _loop_original_must_terminate_1@109@01 $Perm)
(assert (= _loop_original_must_terminate_1@109@01 $Perm.No))
; [exec]
; _loop_termination_flag_1 := true
; [exec]
; _loop_check_before_1 := true
(declare-const _loop_measures_1@110@01 Seq<Measure$>)
(declare-const i_1@111@01 $Ref)
(declare-const _cwl_160@112@01 $Perm)
(declare-const _loop_check_before_1@113@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _residue_183)
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _residue_183)
(assert (=
  ($Snap.second ($Snap.second $t@114@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@114@01))) $Snap.unit))
; [eval] _residue_160 <= _residue_183
(assert (<= _residue_160@94@01 _residue_183@104@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_1@111@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@111@01 3235689))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@111@01 3235689))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@111@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@111@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@111@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5) | live]
; [else-branch: 21 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 21 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689)))
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_1@107@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@107@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@107@01 3235689))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_1@107@01 3235689))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@107@01 3235689)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@107@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@107@01 3235689)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@107@01, 3235689)), 5) | live]
; [else-branch: 22 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@107@01, 3235689)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 22 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@107@01, 3235689)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689)))
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@107@01 3235689)))
    0)))
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | True | live]
; [else-branch: 23 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 23 | True]
; [eval] _loop_termination_flag_1 || (!int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_1 ==> (forperm _r_16: Ref [MustInvokeBounded(_r_16)] :: false) && ((forperm _r_16: Ref [MustInvokeUnbounded(_r_16)] :: false) && ((forperm _r_16: Ref [_r_16.MustReleaseBounded] :: false) && (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 4
; [then-branch: 24 | False | dead]
; [else-branch: 24 | True | live]
(push) ; 5
; [else-branch: 24 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@114@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@114@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@114@01))) $Snap.unit))
(assert (<= _residue_160@94@01 _residue_183@104@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@114@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_1@111@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_1@111@01 3235689))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_1@111@01 3235689)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@114@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_1, 3235689)), 5)
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5) | live]
; [else-branch: 25 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 25 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_1@111@01, 3235689)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)) 5))
; [exec]
; _loop_measures_1 := Seq(Measure$create(true, _cthread_160, int___sub__(5, int___unbox__(_checkDefined(i_1,
;   3235689)))))
; [eval] Seq(Measure$create(true, _cthread_160, int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689)))))
; [eval] Measure$create(true, _cthread_160, int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_1, 3235689)))
; [eval] int___unbox__(_checkDefined(i_1, 3235689))
; [eval] _checkDefined(i_1, 3235689)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_160@92@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689))))))
  1))
(declare-const _loop_measures_1@115@01 Seq<Measure$>)
(assert (=
  _loop_measures_1@115@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_160@92@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_1@111@01 3235689)))))))
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_1@111@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_1@111@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@111@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@111@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@111@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@111@01) 1)))
(declare-const i_1@116@01 $Ref)
(assert (=
  i_1@116@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@111@01) 1))))
; [exec]
; inhale _isDefined(3235689)
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; [eval] _isDefined(3235689)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_160 := non_terminating(_cthread_160, _method_measures_160, _residue_183)
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_call_non_terminating_4 ----------
(declare-const _cthread_161@118@01 $Ref)
(declare-const _caller_measures_161@119@01 Seq<Measure$>)
(declare-const _residue_161@120@01 $Perm)
(declare-const _current_wait_level_161@121@01 $Perm)
(declare-const _cthread_161@122@01 $Ref)
(declare-const _caller_measures_161@123@01 Seq<Measure$>)
(declare-const _residue_161@124@01 $Perm)
(declare-const _current_wait_level_161@125@01 $Perm)
(push) ; 1
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 ($Snap.combine ($Snap.first $t@126@01) ($Snap.second $t@126@01))))
(assert (= ($Snap.first $t@126@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@122@01 $Ref.null)))
(assert (=
  ($Snap.second $t@126@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@126@01))
    ($Snap.second ($Snap.second $t@126@01)))))
(assert (= ($Snap.first ($Snap.second $t@126@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@122@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@126@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@126@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@126@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@126@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 ($Snap.combine ($Snap.first $t@127@01) ($Snap.second $t@127@01))))
(assert (= ($Snap.first $t@127@01) $Snap.unit))
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@127@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@127@01))
    ($Snap.second ($Snap.second $t@127@01)))))
(assert (= ($Snap.first ($Snap.second $t@127@01)) $Snap.unit))
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@127@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@127@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@127@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@127@01))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_161@124@01 _current_wait_level_161@125@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@127@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@128@01 $Ref)
; [exec]
; var i_2: Ref
(declare-const i_2@129@01 $Ref)
; [exec]
; var j: Ref
(declare-const j@130@01 $Ref)
; [exec]
; var _loop_measures_2: Seq[Measure$]
(declare-const _loop_measures_2@131@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_2: Bool
(declare-const _loop_check_before_2@132@01 Bool)
; [exec]
; var _loop_termination_flag_2: Bool
(declare-const _loop_termination_flag_2@133@01 Bool)
; [exec]
; var _loop_original_must_terminate_2: Perm
(declare-const _loop_original_must_terminate_2@134@01 $Perm)
; [exec]
; var _residue_184: Perm
(declare-const _residue_184@135@01 $Perm)
; [exec]
; var _loop_measures_3: Seq[Measure$]
(declare-const _loop_measures_3@136@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_3: Bool
(declare-const _loop_check_before_3@137@01 Bool)
; [exec]
; var _loop_termination_flag_3: Bool
(declare-const _loop_termination_flag_3@138@01 Bool)
; [exec]
; var _loop_original_must_terminate_3: Perm
(declare-const _loop_original_must_terminate_3@139@01 $Perm)
; [exec]
; var _residue_185: Perm
(declare-const _residue_185@140@01 $Perm)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@141@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@142@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq(Measure$create(true, _cthread_161, 2))
; [eval] Seq(Measure$create(true, _cthread_161, 2))
; [eval] Measure$create(true, _cthread_161, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_161@122@01 2)))
  1))
(declare-const _method_measures_161@143@01 Seq<Measure$>)
(assert (=
  _method_measures_161@143@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_161@122@01 2))))
; [exec]
; _err := null
; [exec]
; i_2 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_2@144@01 $Ref)
(assert (= i_2@144@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3301225)
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 $Snap.unit))
; [eval] _isDefined(3301225)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3301225))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301225))
(assert (_isDefined $Snap.unit 3301225))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_2 := perm(MustTerminate(_cthread_161))
; [eval] perm(MustTerminate(_cthread_161))
(declare-const _loop_original_must_terminate_2@146@01 $Perm)
(assert (= _loop_original_must_terminate_2@146@01 $Perm.Write))
; [exec]
; _loop_termination_flag_2 := true
; [exec]
; _loop_check_before_2 := true
(declare-const _loop_measures_2@147@01 Seq<Measure$>)
(declare-const i_2@148@01 $Ref)
(declare-const j@149@01 $Ref)
(declare-const _loop_original_must_terminate_3@150@01 $Perm)
(declare-const _loop_termination_flag_3@151@01 Bool)
(declare-const _loop_check_before_3@152@01 Bool)
(declare-const _loop_measures_3@153@01 Seq<Measure$>)
(declare-const _cwl_161@154@01 $Perm)
(declare-const _loop_check_before_2@155@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@156@01 $Snap)
(assert (= $t@156@01 ($Snap.combine ($Snap.first $t@156@01) ($Snap.second $t@156@01))))
(assert (= ($Snap.first $t@156@01) $Snap.unit))
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _residue_184)
(assert (=
  ($Snap.second $t@156@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@156@01))
    ($Snap.second ($Snap.second $t@156@01)))))
(assert (= ($Snap.first ($Snap.second $t@156@01)) $Snap.unit))
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _residue_184)
(assert (=
  ($Snap.second ($Snap.second $t@156@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@156@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@156@01))) $Snap.unit))
; [eval] _residue_161 <= _residue_184
(assert (<= _residue_161@124@01 _residue_184@135@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@156@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@156@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@156@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_2), int())
; [eval] typeof(i_2)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_2@148@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5)
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_2@148@01 3301225))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_2@148@01 3301225))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@148@01 3301225)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@148@01 3301225)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@148@01 3301225)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5) | live]
; [else-branch: 26 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 26 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225)))
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))
(pop) ; 5
(push) ; 5
; [else-branch: 26 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_2), int())
; [eval] typeof(i_2)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_2@144@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_2@144@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5)
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_2@144@01 3301225))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_2@144@01 3301225))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@144@01 3301225)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@144@01 3301225)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@144@01 3301225)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@144@01, 3301225)), 5) | live]
; [else-branch: 27 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@144@01, 3301225)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 27 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@144@01, 3301225)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225)))
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@144@01 3301225)))
    0)))
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | True | live]
; [else-branch: 28 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 28 | True]
; [eval] _loop_termination_flag_2 || (!int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_2 ==> (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false) && ((forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false) && ((forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false) && (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 4
; [then-branch: 29 | False | dead]
; [else-branch: 29 | True | live]
(push) ; 5
; [else-branch: 29 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@156@01 ($Snap.combine ($Snap.first $t@156@01) ($Snap.second $t@156@01))))
(assert (= ($Snap.first $t@156@01) $Snap.unit))
(assert (=
  ($Snap.second $t@156@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@156@01))
    ($Snap.second ($Snap.second $t@156@01)))))
(assert (= ($Snap.first ($Snap.second $t@156@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@156@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@156@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@156@01))) $Snap.unit))
(assert (<= _residue_161@124@01 _residue_184@135@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@156@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@156@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@156@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_2@148@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_2@148@01 3301225))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_2@148@01 3301225)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5)
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5)
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_2, 3301225)), 5)
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5) | live]
; [else-branch: 30 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 30 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_2@148@01, 3301225)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)) 5))
; [exec]
; _loop_measures_2 := Seq(Measure$create(true, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(i_2,
;   3301225)))))
; [eval] Seq(Measure$create(true, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225)))))
; [eval] Measure$create(true, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_2, 3301225)))
; [eval] int___unbox__(_checkDefined(i_2, 3301225))
; [eval] _checkDefined(i_2, 3301225)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225))))))
  1))
(declare-const _loop_measures_2@157@01 Seq<Measure$>)
(assert (=
  _loop_measures_2@157@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_2@148@01 3301225)))))))
; [exec]
; i_2 := __prim__int___box__(int___add__(int___unbox__(i_2), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_2), 1))
; [eval] int___add__(int___unbox__(i_2), 1)
; [eval] int___unbox__(i_2)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_2@148@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_2@148@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_2@148@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_2@148@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_2@148@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_2@148@01) 1)))
(declare-const i_2@158@01 $Ref)
(assert (=
  i_2@158@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_2@148@01) 1))))
; [exec]
; inhale _isDefined(3301225)
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 $Snap.unit))
; [eval] _isDefined(3301225)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; j := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(declare-const j@160@01 $Ref)
(assert (= j@160@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(106)
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 $Snap.unit))
; [eval] _isDefined(106)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 106))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 106))
(assert (_isDefined $Snap.unit 106))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_3 := perm(MustTerminate(_cthread_161))
; [eval] perm(MustTerminate(_cthread_161))
(declare-const _loop_original_must_terminate_3@162@01 $Perm)
(assert (= _loop_original_must_terminate_3@162@01 $Perm.Write))
; [exec]
; _loop_termination_flag_3 := true
; [exec]
; _loop_check_before_3 := true
(declare-const _loop_measures_3@163@01 Seq<Measure$>)
(declare-const j@164@01 $Ref)
(declare-const _loop_check_before_3@165@01 Bool)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _residue_185)
(assert (=
  ($Snap.second $t@166@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@166@01))
    ($Snap.second ($Snap.second $t@166@01)))))
(assert (= ($Snap.first ($Snap.second $t@166@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _residue_185)
(assert (=
  ($Snap.second ($Snap.second $t@166@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@166@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@166@01))) $Snap.unit))
; [eval] _residue_184 <= _residue_185
(assert (<= _residue_184@135@01 _residue_185@140@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@166@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(j), int())
; [eval] typeof(j)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> j@164@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j, 106))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j@164@01 106))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j@164@01 106))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@164@01 106)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@164@01 106)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@164@01 106)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@164@01 106)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))
(push) ; 7
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
(pop) ; 7
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5) | live]
; [else-branch: 31 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 31 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106)))
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))
(pop) ; 8
(push) ; 8
; [else-branch: 31 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
  $Snap.unit))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] issubtype(typeof(j), int())
; [eval] typeof(j)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> j@160@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> j@160@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j, 106))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j@160@01 106))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j@160@01 106))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@160@01 106)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@160@01 106)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@160@01 106)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@160@01 106)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@160@01 106))))
(push) ; 7
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5))
(pop) ; 7
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@160@01, 106)), 5) | live]
; [else-branch: 32 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@160@01, 106)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 32 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@160@01, 106)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106)))
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5))
(push) ; 7
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@160@01 106)))
    0)))
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(j, 106)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | True | live]
; [else-branch: 33 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 33 | True]
; [eval] _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(j, 106)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_3
(push) ; 7
; [then-branch: 34 | False | dead]
; [else-branch: 34 | True | live]
(push) ; 8
; [else-branch: 34 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
(assert (=
  ($Snap.second $t@166@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@166@01))
    ($Snap.second ($Snap.second $t@166@01)))))
(assert (= ($Snap.first ($Snap.second $t@166@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@166@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@166@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@166@01))) $Snap.unit))
(assert (<= _residue_184@135@01 _residue_185@140@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@166@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> j@164@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit j@164@01 106))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@164@01 106)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@164@01 106)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5) | live]
; [else-branch: 35 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 35 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))
; [exec]
; _loop_measures_3 := Seq(Measure$create(true, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j,
;   106)))))
; [eval] Seq(Measure$create(true, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j, 106)))))
; [eval] Measure$create(true, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j, 106))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106)))
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106))))))
  1))
(declare-const _loop_measures_3@167@01 Seq<Measure$>)
(assert (=
  _loop_measures_3@167@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)))))))
; [exec]
; j := __prim__int___box__(int___add__(int___unbox__(j), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(j), 1))
; [eval] int___add__(int___unbox__(j), 1)
; [eval] int___unbox__(j)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit j@164@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit j@164@01))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit j@164@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit j@164@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit j@164@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit j@164@01) 1)))
(declare-const j@168@01 $Ref)
(assert (=
  j@168@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit j@164@01) 1))))
; [exec]
; inhale _isDefined(106)
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 $Snap.unit))
; [eval] _isDefined(106)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_3
; [exec]
; _loop_check_before_3 := false
; [exec]
; assert _loop_termination_flag_3 ==>
;   !int___lt__(int___unbox__(_checkDefined(j, 106)), 5) ||
;   Measure$check(_loop_measures_3, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j,
;   106))))
; [eval] _loop_termination_flag_3 ==> !int___lt__(int___unbox__(_checkDefined(j, 106)), 5) || Measure$check(_loop_measures_3, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j, 106))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | True | live]
; [else-branch: 36 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 36 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(j, 106)), 5) || Measure$check(_loop_measures_3, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j, 106))))
; [eval] !int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j@168@01 106))
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j@168@01 106))
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@168@01 106)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@168@01 106)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@168@01 106)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
(push) ; 11
; [then-branch: 37 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5)) | live]
; [else-branch: 37 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5) | live]
(push) ; 12
; [then-branch: 37 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 37 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
; [eval] Measure$check(_loop_measures_3, _cthread_161, int___sub__(5, int___unbox__(_checkDefined(j, 106))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106)))
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _loop_measures_3@167@01 _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_3@167@01 _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))
    (Measure$check%precondition $Snap.unit _loop_measures_3@167@01 _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit j@168@01 106)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j@168@01 106)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j@168@01 106))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))
      (Measure$check%precondition $Snap.unit _loop_measures_3@167@01 _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)))))
(push) ; 9
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
  (Measure$check $Snap.unit _loop_measures_3@167@01 _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
  (Measure$check $Snap.unit _loop_measures_3@167@01 _cthread_161@122@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(j), int())
; [eval] typeof(j)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> j@168@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> j@168@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j, 106))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5) | live]
; [else-branch: 38 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 38 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j, 106)))
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))
(pop) ; 11
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))
(pop) ; 10
(push) ; 10
; [else-branch: 38 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@168@01, 106)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)))
(push) ; 9
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))
    0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@168@01 106)))
    0)))
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || (!int___lt__(int___unbox__(_checkDefined(j, 106)), 5) || perm(MustTerminate(_cthread_161)) == none && ((forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 39 | False | dead]
; [else-branch: 39 | True | live]
(push) ; 10
; [else-branch: 39 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] !_loop_check_before_3 ==> (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_3
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | True | live]
; [else-branch: 40 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 40 | True]
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false) && ((forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false) && ((forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false) && (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_21: Ref [MustInvokeBounded(_r_21)] :: false)
(push) ; 11
; [then-branch: 41 | False | live]
; [else-branch: 41 | True | live]
(push) ; 12
; [then-branch: 41 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 41 | True]
; [eval] (forperm _r_21: Ref [MustInvokeUnbounded(_r_21)] :: false)
(push) ; 13
; [then-branch: 42 | False | live]
; [else-branch: 42 | True | live]
(push) ; 14
; [then-branch: 42 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 42 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 43 | False | live]
; [else-branch: 43 | True | live]
(push) ; 16
; [then-branch: 43 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 43 | True]
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 35 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(pop) ; 8
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@156@01)))))))))
; [eval] !int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j, 106)), 5)
; [eval] int___unbox__(_checkDefined(j, 106))
; [eval] _checkDefined(j, 106)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5)) | live]
; [else-branch: 44 | int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 44 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j@164@01, 106)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j@164@01 106)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_161)) > none ==>
;   acc(MustTerminate(_cthread_161), perm(MustTerminate(_cthread_161)) -
;   _loop_original_must_terminate_3)
; [eval] perm(MustTerminate(_cthread_161)) > none
; [eval] perm(MustTerminate(_cthread_161))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | True | live]
; [else-branch: 45 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 45 | True]
; [eval] perm(MustTerminate(_cthread_161)) - _loop_original_must_terminate_3
; [eval] perm(MustTerminate(_cthread_161))
(push) ; 10
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))))
(set-option :timeout 0)
(push) ; 10
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_3
; [exec]
; _cwl_161 := non_terminating(_cthread_161, _method_measures_161, _residue_184)
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 10
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_3@162@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_call_non_terminating_5 ----------
(declare-const _cthread_162@170@01 $Ref)
(declare-const _caller_measures_162@171@01 Seq<Measure$>)
(declare-const _residue_162@172@01 $Perm)
(declare-const _current_wait_level_162@173@01 $Perm)
(declare-const _cthread_162@174@01 $Ref)
(declare-const _caller_measures_162@175@01 Seq<Measure$>)
(declare-const _residue_162@176@01 $Perm)
(declare-const _current_wait_level_162@177@01 $Perm)
(push) ; 1
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 ($Snap.combine ($Snap.first $t@178@01) ($Snap.second $t@178@01))))
(assert (= ($Snap.first $t@178@01) $Snap.unit))
; [eval] _cthread_162 != null
(assert (not (= _cthread_162@174@01 $Ref.null)))
(assert (=
  ($Snap.second $t@178@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@178@01))
    ($Snap.second ($Snap.second $t@178@01)))))
(assert (= ($Snap.first ($Snap.second $t@178@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_162@174@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@178@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@178@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@178@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@178@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 ($Snap.combine ($Snap.first $t@179@01) ($Snap.second $t@179@01))))
(assert (= ($Snap.first $t@179@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@179@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@179@01))
    ($Snap.second ($Snap.second $t@179@01)))))
(assert (= ($Snap.first ($Snap.second $t@179@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@179@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@179@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@179@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_162@176@01 _current_wait_level_162@177@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@179@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@180@01 $Ref)
; [exec]
; var i_3: Ref
(declare-const i_3@181@01 $Ref)
; [exec]
; var j_0: Ref
(declare-const j_0@182@01 $Ref)
; [exec]
; var _loop_measures_4: Seq[Measure$]
(declare-const _loop_measures_4@183@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_4: Bool
(declare-const _loop_check_before_4@184@01 Bool)
; [exec]
; var _loop_termination_flag_4: Bool
(declare-const _loop_termination_flag_4@185@01 Bool)
; [exec]
; var _loop_original_must_terminate_4: Perm
(declare-const _loop_original_must_terminate_4@186@01 $Perm)
; [exec]
; var _residue_186: Perm
(declare-const _residue_186@187@01 $Perm)
; [exec]
; var _loop_measures_5: Seq[Measure$]
(declare-const _loop_measures_5@188@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_5: Bool
(declare-const _loop_check_before_5@189@01 Bool)
; [exec]
; var _loop_termination_flag_5: Bool
(declare-const _loop_termination_flag_5@190@01 Bool)
; [exec]
; var _loop_original_must_terminate_5: Perm
(declare-const _loop_original_must_terminate_5@191@01 $Perm)
; [exec]
; var _residue_187: Perm
(declare-const _residue_187@192@01 $Perm)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@193@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@194@01 Seq<Measure$>)
; [exec]
; _method_measures_162 := Seq(Measure$create(true, _cthread_162, 2))
; [eval] Seq(Measure$create(true, _cthread_162, 2))
; [eval] Measure$create(true, _cthread_162, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_162@174@01 2)))
  1))
(declare-const _method_measures_162@195@01 Seq<Measure$>)
(assert (=
  _method_measures_162@195@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_162@174@01 2))))
; [exec]
; _err := null
; [exec]
; i_3 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_3@196@01 $Ref)
(assert (= i_3@196@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3366761)
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 $Snap.unit))
; [eval] _isDefined(3366761)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366761))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366761))
(assert (_isDefined $Snap.unit 3366761))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_4 := perm(MustTerminate(_cthread_162))
; [eval] perm(MustTerminate(_cthread_162))
(declare-const _loop_original_must_terminate_4@198@01 $Perm)
(assert (= _loop_original_must_terminate_4@198@01 $Perm.Write))
; [exec]
; _loop_termination_flag_4 := true
; [exec]
; _loop_check_before_4 := true
(declare-const _loop_measures_4@199@01 Seq<Measure$>)
(declare-const i_3@200@01 $Ref)
(declare-const j_0@201@01 $Ref)
(declare-const _loop_original_must_terminate_5@202@01 $Perm)
(declare-const _loop_termination_flag_5@203@01 Bool)
(declare-const _loop_check_before_5@204@01 Bool)
(declare-const _loop_measures_5@205@01 Seq<Measure$>)
(declare-const _cwl_162@206@01 $Perm)
(declare-const _loop_check_before_4@207@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _residue_186)
(assert (=
  ($Snap.second $t@208@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@208@01))
    ($Snap.second ($Snap.second $t@208@01)))))
(assert (= ($Snap.first ($Snap.second $t@208@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _residue_186)
(assert (=
  ($Snap.second ($Snap.second $t@208@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@208@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@208@01))) $Snap.unit))
; [eval] _residue_162 <= _residue_186
(assert (<= _residue_162@176@01 _residue_186@187@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@208@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_3), int())
; [eval] typeof(i_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_3@200@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5)
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_3@200@01 3366761))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_3@200@01 3366761))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@200@01 3366761)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@200@01 3366761)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@200@01 3366761)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5) | live]
; [else-branch: 46 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 46 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761)))
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))
(pop) ; 5
(push) ; 5
; [else-branch: 46 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_3), int())
; [eval] typeof(i_3)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_3@196@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_3@196@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5)
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_3@196@01 3366761))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_3@196@01 3366761))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@196@01 3366761)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@196@01 3366761)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@196@01 3366761)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@196@01, 3366761)), 5) | live]
; [else-branch: 47 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@196@01, 3366761)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 47 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@196@01, 3366761)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761)))
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@196@01 3366761)))
    0)))
; [eval] _loop_check_before_4 ==> _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | True | live]
; [else-branch: 48 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 48 | True]
; [eval] _loop_termination_flag_4 || (!int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_4 ==> (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false) && ((forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false) && ((forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false) && (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_4
(push) ; 4
; [then-branch: 49 | False | dead]
; [else-branch: 49 | True | live]
(push) ; 5
; [else-branch: 49 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
(assert (=
  ($Snap.second $t@208@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@208@01))
    ($Snap.second ($Snap.second $t@208@01)))))
(assert (= ($Snap.first ($Snap.second $t@208@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@208@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@208@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@208@01))) $Snap.unit))
(assert (<= _residue_162@176@01 _residue_186@187@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@208@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_3@200@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_3@200@01 3366761))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_3@200@01 3366761)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5)
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5)
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_3, 3366761)), 5)
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5) | live]
; [else-branch: 50 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 50 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_3@200@01, 3366761)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)) 5))
; [exec]
; _loop_measures_4 := Seq(Measure$create(true, _cthread_162, int___sub__(5, int___unbox__(_checkDefined(i_3,
;   3366761)))))
; [eval] Seq(Measure$create(true, _cthread_162, int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761)))))
; [eval] Measure$create(true, _cthread_162, int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_3, 3366761)))
; [eval] int___unbox__(_checkDefined(i_3, 3366761))
; [eval] _checkDefined(i_3, 3366761)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_162@174@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761))))))
  1))
(declare-const _loop_measures_4@209@01 Seq<Measure$>)
(assert (=
  _loop_measures_4@209@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_162@174@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_3@200@01 3366761)))))))
; [exec]
; i_3 := __prim__int___box__(int___add__(int___unbox__(i_3), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_3), 1))
; [eval] int___add__(int___unbox__(i_3), 1)
; [eval] int___unbox__(i_3)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_3@200@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_3@200@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_3@200@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_3@200@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_3@200@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_3@200@01) 1)))
(declare-const i_3@210@01 $Ref)
(assert (=
  i_3@210@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_3@200@01) 1))))
; [exec]
; inhale _isDefined(3366761)
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 $Snap.unit))
; [eval] _isDefined(3366761)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; j_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(declare-const j_0@212@01 $Ref)
(assert (= j_0@212@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3170154)
(declare-const $t@213@01 $Snap)
(assert (= $t@213@01 $Snap.unit))
; [eval] _isDefined(3170154)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 3170154))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170154))
(assert (_isDefined $Snap.unit 3170154))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_5 := perm(MustTerminate(_cthread_162))
; [eval] perm(MustTerminate(_cthread_162))
(declare-const _loop_original_must_terminate_5@214@01 $Perm)
(assert (= _loop_original_must_terminate_5@214@01 $Perm.Write))
; [exec]
; _loop_termination_flag_5 := true
; [exec]
; _loop_check_before_5 := true
(declare-const _loop_measures_5@215@01 Seq<Measure$>)
(declare-const j_0@216@01 $Ref)
(declare-const _cwl_162@217@01 $Perm)
(declare-const _loop_check_before_5@218@01 Bool)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _residue_187)
(assert (=
  ($Snap.second $t@219@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@219@01))
    ($Snap.second ($Snap.second $t@219@01)))))
(assert (= ($Snap.first ($Snap.second $t@219@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _residue_187)
(assert (=
  ($Snap.second ($Snap.second $t@219@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@219@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@219@01))) $Snap.unit))
; [eval] _residue_186 <= _residue_187
(assert (<= _residue_186@187@01 _residue_187@192@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@219@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(j_0), int())
; [eval] typeof(j_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> j_0@216@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5)
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_0@216@01 3170154))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_0@216@01 3170154))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@216@01 3170154)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@216@01 3170154)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@216@01 3170154)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))
(push) ; 7
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
(pop) ; 7
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5) | live]
; [else-branch: 51 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 51 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154)))
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))
(pop) ; 8
(push) ; 8
; [else-branch: 51 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  $Snap.unit))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] issubtype(typeof(j_0), int())
; [eval] typeof(j_0)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> j_0@212@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> j_0@212@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5)
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_0@212@01 3170154))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_0@212@01 3170154))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@212@01 3170154)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@212@01 3170154)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@212@01 3170154)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154))))
(push) ; 7
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5))
(pop) ; 7
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@212@01, 3170154)), 5) | live]
; [else-branch: 52 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@212@01, 3170154)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 52 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@212@01, 3170154)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154)))
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5))
(push) ; 7
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@212@01 3170154)))
    0)))
; [eval] _loop_check_before_5 ==> _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | True | live]
; [else-branch: 53 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 53 | True]
; [eval] _loop_termination_flag_5 || (!int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5) || perm(MustTerminate(_cthread_162)) == none && ((forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !_loop_check_before_5 ==> (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false) && ((forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false) && ((forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false) && (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_5
(push) ; 7
; [then-branch: 54 | False | dead]
; [else-branch: 54 | True | live]
(push) ; 8
; [else-branch: 54 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
(assert (=
  ($Snap.second $t@219@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@219@01))
    ($Snap.second ($Snap.second $t@219@01)))))
(assert (= ($Snap.first ($Snap.second $t@219@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@219@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@219@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@219@01))) $Snap.unit))
(assert (<= _residue_186@187@01 _residue_187@192@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@219@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> j_0@216@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit j_0@216@01 3170154))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_0@216@01 3170154)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5)
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5)
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(j_0, 3170154)), 5)
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5) | live]
; [else-branch: 55 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 55 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_0@216@01, 3170154)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)) 5))
; [exec]
; _loop_measures_5 := Seq(Measure$create(true, _cthread_162, int___sub__(5, int___unbox__(_checkDefined(j_0,
;   3170154)))))
; [eval] Seq(Measure$create(true, _cthread_162, int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154)))))
; [eval] Measure$create(true, _cthread_162, int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_0, 3170154)))
; [eval] int___unbox__(_checkDefined(j_0, 3170154))
; [eval] _checkDefined(j_0, 3170154)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_162@174@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154))))))
  1))
(declare-const _loop_measures_5@220@01 Seq<Measure$>)
(assert (=
  _loop_measures_5@220@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_162@174@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_0@216@01 3170154)))))))
; [exec]
; j_0 := __prim__int___box__(int___add__(int___unbox__(j_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(j_0), 1))
; [eval] int___add__(int___unbox__(j_0), 1)
; [eval] int___unbox__(j_0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit j_0@216@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit j_0@216@01))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit j_0@216@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit j_0@216@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit j_0@216@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit j_0@216@01) 1)))
(declare-const j_0@221@01 $Ref)
(assert (=
  j_0@221@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit j_0@216@01) 1))))
; [exec]
; inhale _isDefined(3170154)
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 $Snap.unit))
; [eval] _isDefined(3170154)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_162 := non_terminating(_cthread_162, _method_measures_162, _residue_187)
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(set-option :timeout 0)
(push) ; 9
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_measures_1 ----------
(declare-const _cthread_163@223@01 $Ref)
(declare-const _caller_measures_163@224@01 Seq<Measure$>)
(declare-const _residue_163@225@01 $Perm)
(declare-const _current_wait_level_163@226@01 $Perm)
(declare-const _cthread_163@227@01 $Ref)
(declare-const _caller_measures_163@228@01 Seq<Measure$>)
(declare-const _residue_163@229@01 $Perm)
(declare-const _current_wait_level_163@230@01 $Perm)
(push) ; 1
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 ($Snap.combine ($Snap.first $t@231@01) ($Snap.second $t@231@01))))
(assert (= ($Snap.first $t@231@01) $Snap.unit))
; [eval] _cthread_163 != null
(assert (not (= _cthread_163@227@01 $Ref.null)))
(assert (=
  ($Snap.second $t@231@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@231@01))
    ($Snap.second ($Snap.second $t@231@01)))))
(assert (= ($Snap.first ($Snap.second $t@231@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_163@227@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@231@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@232@01 $Snap)
(assert (= $t@232@01 ($Snap.combine ($Snap.first $t@232@01) ($Snap.second $t@232@01))))
(assert (= ($Snap.first $t@232@01) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@232@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@232@01))
    ($Snap.second ($Snap.second $t@232@01)))))
(assert (= ($Snap.first ($Snap.second $t@232@01)) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@232@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@232@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@232@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@232@01))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_163@229@01 _current_wait_level_163@230@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@232@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@233@01 $Ref)
; [exec]
; var _loop_measures_6: Seq[Measure$]
(declare-const _loop_measures_6@234@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_6: Bool
(declare-const _loop_check_before_6@235@01 Bool)
; [exec]
; var _loop_termination_flag_6: Bool
(declare-const _loop_termination_flag_6@236@01 Bool)
; [exec]
; var _loop_original_must_terminate_6: Perm
(declare-const _loop_original_must_terminate_6@237@01 $Perm)
; [exec]
; var _residue_188: Perm
(declare-const _residue_188@238@01 $Perm)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@239@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@240@01 Seq<Measure$>)
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _loop_original_must_terminate_6 := perm(MustTerminate(_cthread_163))
; [eval] perm(MustTerminate(_cthread_163))
(declare-const _loop_original_must_terminate_6@241@01 $Perm)
(assert (= _loop_original_must_terminate_6@241@01 $Perm.No))
; [exec]
; _loop_termination_flag_6 := true
; [exec]
; _loop_check_before_6 := true
(declare-const _loop_measures_6@242@01 Seq<Measure$>)
(declare-const _loop_check_before_6@243@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) <= _residue_188)
(assert (=
  ($Snap.second $t@244@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@244@01))
    ($Snap.second ($Snap.second $t@244@01)))))
(assert (= ($Snap.first ($Snap.second $t@244@01)) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) <= _residue_188)
(assert (=
  ($Snap.second ($Snap.second $t@244@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@244@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@244@01))) $Snap.unit))
; [eval] _residue_163 <= _residue_188
(assert (<= _residue_163@229@01 _residue_188@238@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@244@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  $Snap.unit))
; [eval] true ==> -1 > 0
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | True | live]
; [else-branch: 56 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 56 | True]
; [eval] -1 > 0
; [eval] -1
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] true ==> -1 > 0
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | True | live]
; [else-branch: 57 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 57 | True]
; [eval] -1 > 0
; [eval] -1
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] true ==> -1 > 0
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | True | live]
; [else-branch: 58 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 58 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] -1 > 0
; [eval] -1
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] true ==> -1 > 0
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | True | live]
; [else-branch: 59 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 59 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] -1 > 0
; [eval] -1
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] true ==> -1 > 0
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 60 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] -1 > 0
; [eval] -1
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_measures_2 ----------
(declare-const _cthread_164@245@01 $Ref)
(declare-const _caller_measures_164@246@01 Seq<Measure$>)
(declare-const _residue_164@247@01 $Perm)
(declare-const _current_wait_level_164@248@01 $Perm)
(declare-const _cthread_164@249@01 $Ref)
(declare-const _caller_measures_164@250@01 Seq<Measure$>)
(declare-const _residue_164@251@01 $Perm)
(declare-const _current_wait_level_164@252@01 $Perm)
(push) ; 1
(declare-const $t@253@01 $Snap)
(assert (= $t@253@01 ($Snap.combine ($Snap.first $t@253@01) ($Snap.second $t@253@01))))
(assert (= ($Snap.first $t@253@01) $Snap.unit))
; [eval] _cthread_164 != null
(assert (not (= _cthread_164@249@01 $Ref.null)))
(assert (=
  ($Snap.second $t@253@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@253@01))
    ($Snap.second ($Snap.second $t@253@01)))))
(assert (= ($Snap.first ($Snap.second $t@253@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_164@249@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@253@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 ($Snap.combine ($Snap.first $t@254@01) ($Snap.second $t@254@01))))
(assert (= ($Snap.first $t@254@01) $Snap.unit))
; [eval] (forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@254@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@254@01))
    ($Snap.second ($Snap.second $t@254@01)))))
(assert (= ($Snap.first ($Snap.second $t@254@01)) $Snap.unit))
; [eval] (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@254@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@254@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@254@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_164@251@01 _current_wait_level_164@252@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@254@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@255@01 $Ref)
; [exec]
; var _loop_measures_7: Seq[Measure$]
(declare-const _loop_measures_7@256@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_7: Bool
(declare-const _loop_check_before_7@257@01 Bool)
; [exec]
; var _loop_termination_flag_7: Bool
(declare-const _loop_termination_flag_7@258@01 Bool)
; [exec]
; var _loop_original_must_terminate_7: Perm
(declare-const _loop_original_must_terminate_7@259@01 $Perm)
; [exec]
; var _residue_189: Perm
(declare-const _residue_189@260@01 $Perm)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@261@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@262@01 Seq<Measure$>)
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _loop_original_must_terminate_7 := perm(MustTerminate(_cthread_164))
; [eval] perm(MustTerminate(_cthread_164))
(declare-const _loop_original_must_terminate_7@263@01 $Perm)
(assert (= _loop_original_must_terminate_7@263@01 $Perm.No))
; [exec]
; _loop_termination_flag_7 := true
; [exec]
; _loop_check_before_7 := true
(declare-const _loop_measures_7@264@01 Seq<Measure$>)
(declare-const _loop_check_before_7@265@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@266@01 $Snap)
(assert (= $t@266@01 ($Snap.combine ($Snap.first $t@266@01) ($Snap.second $t@266@01))))
(assert (= ($Snap.first $t@266@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _residue_189)
(assert (=
  ($Snap.second $t@266@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@266@01))
    ($Snap.second ($Snap.second $t@266@01)))))
(assert (= ($Snap.first ($Snap.second $t@266@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _residue_189)
(assert (=
  ($Snap.second ($Snap.second $t@266@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@266@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@266@01))) $Snap.unit))
; [eval] _residue_164 <= _residue_189
(assert (<= _residue_164@251@01 _residue_189@260@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@266@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@266@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@266@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))
  $Snap.unit))
; [eval] int___gt__(int___add__(2, 2), 7) ==> -1 > 0
; [eval] int___gt__(int___add__(2, 2), 7)
; [eval] int___add__(2, 2)
(push) ; 4
(assert (int___add__%precondition $Snap.unit 2 2))
(pop) ; 4
; Joined path conditions
(assert (int___add__%precondition $Snap.unit 2 2))
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___add__ $Snap.unit 2 2) 7))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___add__ $Snap.unit 2 2) 7))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | int___gt__(_, int___add__(_, 2, 2), 7) | dead]
; [else-branch: 61 | !(int___gt__(_, int___add__(_, 2, 2), 7)) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 61 | !(int___gt__(_, int___add__(_, 2, 2), 7))]
(assert (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] int___gt__(int___add__(2, 2), 7) ==> -1 > 0
; [eval] int___gt__(int___add__(2, 2), 7)
; [eval] int___add__(2, 2)
(push) ; 4
(assert (int___add__%precondition $Snap.unit 2 2))
(pop) ; 4
; Joined path conditions
(assert (int___add__%precondition $Snap.unit 2 2))
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___add__ $Snap.unit 2 2) 7))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___add__ $Snap.unit 2 2) 7))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 62 | int___gt__(_, int___add__(_, 2, 2), 7) | dead]
; [else-branch: 62 | !(int___gt__(_, int___add__(_, 2, 2), 7)) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 62 | !(int___gt__(_, int___add__(_, 2, 2), 7))]
(assert (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7)))
; [eval] _loop_check_before_7 ==> _loop_termination_flag_7 || (!int___gt__(int___add__(2, 2), 7) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | True | live]
; [else-branch: 63 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 63 | True]
; [eval] _loop_termination_flag_7 || (!int___gt__(int___add__(2, 2), 7) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_7 ==> (forperm _r_40: Ref [MustInvokeBounded(_r_40)] :: false) && ((forperm _r_40: Ref [MustInvokeUnbounded(_r_40)] :: false) && ((forperm _r_40: Ref [_r_40.MustReleaseBounded] :: false) && (forperm _r_40: Ref [_r_40.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_7
(push) ; 4
; [then-branch: 64 | False | dead]
; [else-branch: 64 | True | live]
(push) ; 5
; [else-branch: 64 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@266@01 ($Snap.combine ($Snap.first $t@266@01) ($Snap.second $t@266@01))))
(assert (= ($Snap.first $t@266@01) $Snap.unit))
(assert (=
  ($Snap.second $t@266@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@266@01))
    ($Snap.second ($Snap.second $t@266@01)))))
(assert (= ($Snap.first ($Snap.second $t@266@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@266@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@266@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@266@01))) $Snap.unit))
(assert (<= _residue_164@251@01 _residue_189@260@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@266@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@266@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@266@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@266@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___gt__(int___add__(2, 2), 7)
; [eval] int___add__(2, 2)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___gt__(int___add__(2, 2), 7)
; [eval] int___gt__(int___add__(2, 2), 7)
; [eval] int___add__(2, 2)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___gt__(int___add__(2, 2), 7)
; [eval] int___add__(2, 2)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 65 | int___gt__(_, int___add__(_, 2, 2), 7) | dead]
; [else-branch: 65 | !(int___gt__(_, int___add__(_, 2, 2), 7)) | live]
(push) ; 5
; [else-branch: 65 | !(int___gt__(_, int___add__(_, 2, 2), 7))]
(pop) ; 5
; [eval] !int___gt__(int___add__(2, 2), 7)
; [eval] int___gt__(int___add__(2, 2), 7)
; [eval] int___add__(2, 2)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___add__ $Snap.unit 2 2) 7)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | !(int___gt__(_, int___add__(_, 2, 2), 7)) | live]
; [else-branch: 66 | int___gt__(_, int___add__(_, 2, 2), 7) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 66 | !(int___gt__(_, int___add__(_, 2, 2), 7))]
; [exec]
; exhale perm(MustTerminate(_cthread_164)) > none ==>
;   acc(MustTerminate(_cthread_164), perm(MustTerminate(_cthread_164)) -
;   _loop_original_must_terminate_7)
; [eval] perm(MustTerminate(_cthread_164)) > none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | True | live]
; [else-branch: 67 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 67 | True]
; [eval] perm(MustTerminate(_cthread_164)) - _loop_original_must_terminate_7
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_7@263@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_7@263@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_7@263@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_7@263@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_7@263@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_7@263@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_7@263@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_7
; [exec]
; label __end
; [eval] (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_measures_3 ----------
(declare-const _cthread_165@267@01 $Ref)
(declare-const _caller_measures_165@268@01 Seq<Measure$>)
(declare-const _residue_165@269@01 $Perm)
(declare-const _current_wait_level_165@270@01 $Perm)
(declare-const _cthread_165@271@01 $Ref)
(declare-const _caller_measures_165@272@01 Seq<Measure$>)
(declare-const _residue_165@273@01 $Perm)
(declare-const _current_wait_level_165@274@01 $Perm)
(push) ; 1
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@271@01 $Ref.null)))
(assert (=
  ($Snap.second $t@275@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@275@01))
    ($Snap.second ($Snap.second $t@275@01)))))
(assert (= ($Snap.first ($Snap.second $t@275@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@271@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@275@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 ($Snap.combine ($Snap.first $t@276@01) ($Snap.second $t@276@01))))
(assert (= ($Snap.first $t@276@01) $Snap.unit))
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseBounded] :: Level(_r_46) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@276@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@276@01))
    ($Snap.second ($Snap.second $t@276@01)))))
(assert (= ($Snap.first ($Snap.second $t@276@01)) $Snap.unit))
; [eval] (forperm _r_46: Ref [_r_46.MustReleaseUnbounded] :: Level(_r_46) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@276@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@276@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@276@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@276@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@273@01 _current_wait_level_165@274@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@276@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@277@01 $Ref)
; [exec]
; var i_4: Ref
(declare-const i_4@278@01 $Ref)
; [exec]
; var _loop_measures_8: Seq[Measure$]
(declare-const _loop_measures_8@279@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_8: Bool
(declare-const _loop_check_before_8@280@01 Bool)
; [exec]
; var _loop_termination_flag_8: Bool
(declare-const _loop_termination_flag_8@281@01 Bool)
; [exec]
; var _loop_original_must_terminate_8: Perm
(declare-const _loop_original_must_terminate_8@282@01 $Perm)
; [exec]
; var _residue_190: Perm
(declare-const _residue_190@283@01 $Perm)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@284@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@285@01 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_4 := __prim__int___box__(5)
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(declare-const i_4@286@01 $Ref)
(assert (= i_4@286@01 (__prim__int___box__ $Snap.unit 5)))
; [exec]
; inhale _isDefined(3432297)
(declare-const $t@287@01 $Snap)
(assert (= $t@287@01 $Snap.unit))
; [eval] _isDefined(3432297)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3432297))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432297))
(assert (_isDefined $Snap.unit 3432297))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_8 := perm(MustTerminate(_cthread_165))
; [eval] perm(MustTerminate(_cthread_165))
(declare-const _loop_original_must_terminate_8@288@01 $Perm)
(assert (= _loop_original_must_terminate_8@288@01 $Perm.No))
; [exec]
; _loop_termination_flag_8 := true
; [exec]
; _loop_check_before_8 := true
(declare-const _loop_measures_8@289@01 Seq<Measure$>)
(declare-const i_4@290@01 $Ref)
(declare-const _loop_check_before_8@291@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 ($Snap.combine ($Snap.first $t@292@01) ($Snap.second $t@292@01))))
(assert (= ($Snap.first $t@292@01) $Snap.unit))
; [eval] (forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _residue_190)
(assert (=
  ($Snap.second $t@292@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@292@01))
    ($Snap.second ($Snap.second $t@292@01)))))
(assert (= ($Snap.first ($Snap.second $t@292@01)) $Snap.unit))
; [eval] (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _residue_190)
(assert (=
  ($Snap.second ($Snap.second $t@292@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@292@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@292@01))) $Snap.unit))
; [eval] _residue_165 <= _residue_190
(assert (<= _residue_165@273@01 _residue_190@283@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@292@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@292@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@292@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_4), int())
; [eval] typeof(i_4)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_4@290@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) ==> int___unbox__(_checkDefined(i_4, 3432297)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_4@290@01 3432297))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_4@290@01 3432297))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@290@01 3432297)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@290@01 3432297)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@290@01 3432297)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297))))
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0) | live]
; [else-branch: 68 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 68 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
; [eval] int___unbox__(_checkDefined(i_4, 3432297)) > 0
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 68 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_4), int())
; [eval] typeof(i_4)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_4@286@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_4@286@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) ==> int___unbox__(_checkDefined(i_4, 3432297)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_4@286@01 3432297))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_4@286@01 3432297))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@286@01 3432297)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@286@01 3432297)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@286@01 3432297)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297))))
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@286@01, 3432297)), 0) | live]
; [else-branch: 69 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@286@01, 3432297)), 0)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 69 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@286@01, 3432297)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0))
; [eval] int___unbox__(_checkDefined(i_4, 3432297)) > 0
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0))
(push) ; 4
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0)
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0)
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@286@01 3432297)) 0)))
; [eval] _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 70 | True]
; [eval] _loop_termination_flag_8 || (!int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_8 ==> (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_8
(push) ; 4
; [then-branch: 71 | False | dead]
; [else-branch: 71 | True | live]
(push) ; 5
; [else-branch: 71 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@292@01 ($Snap.combine ($Snap.first $t@292@01) ($Snap.second $t@292@01))))
(assert (= ($Snap.first $t@292@01) $Snap.unit))
(assert (=
  ($Snap.second $t@292@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@292@01))
    ($Snap.second ($Snap.second $t@292@01)))))
(assert (= ($Snap.first ($Snap.second $t@292@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@292@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@292@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@292@01))) $Snap.unit))
(assert (<= _residue_165@273@01 _residue_190@283@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@292@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@292@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@292@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_4@290@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_4@290@01 3432297))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@290@01 3432297)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)))
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@292@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0) | live]
; [else-branch: 72 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 72 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
; [exec]
; _loop_measures_8 := Seq(Measure$create(true, _cthread_165, int___unbox__(_checkDefined(i_4,
;   3432297))))
; [eval] Seq(Measure$create(true, _cthread_165, int___unbox__(_checkDefined(i_4, 3432297))))
; [eval] Measure$create(true, _cthread_165, int___unbox__(_checkDefined(i_4, 3432297)))
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)))))
  1))
(declare-const _loop_measures_8@293@01 Seq<Measure$>)
(assert (=
  _loop_measures_8@293@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297))))))
; [exec]
; i_4 := __prim__int___box__(int___sub__(int___unbox__(i_4), 1))
; [eval] __prim__int___box__(int___sub__(int___unbox__(i_4), 1))
; [eval] int___sub__(int___unbox__(i_4), 1)
; [eval] int___unbox__(i_4)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_4@290@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_4@290@01))
(push) ; 6
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_4@290@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_4@290@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_4@290@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_4@290@01) 1)))
(declare-const i_4@294@01 $Ref)
(assert (=
  i_4@294@01
  (__prim__int___box__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_4@290@01) 1))))
; [exec]
; inhale _isDefined(3432297)
(declare-const $t@295@01 $Snap)
(assert (= $t@295@01 $Snap.unit))
; [eval] _isDefined(3432297)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_8
; [exec]
; _loop_check_before_8 := false
; [exec]
; assert _loop_termination_flag_8 ==>
;   !int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) ||
;   Measure$check(_loop_measures_8, _cthread_165, int___unbox__(_checkDefined(i_4,
;   3432297)))
; [eval] _loop_termination_flag_8 ==> !int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) || Measure$check(_loop_measures_8, _cthread_165, int___unbox__(_checkDefined(i_4, 3432297)))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | True | live]
; [else-branch: 73 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 73 | True]
; [eval] !int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) || Measure$check(_loop_measures_8, _cthread_165, int___unbox__(_checkDefined(i_4, 3432297)))
; [eval] !int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_4@294@01 3432297))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_4@294@01 3432297))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@294@01 3432297)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@294@01 3432297)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@294@01 3432297)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297))))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
(push) ; 8
; [then-branch: 74 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0)) | live]
; [else-branch: 74 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0) | live]
(push) ; 9
; [then-branch: 74 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 74 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
; [eval] Measure$check(_loop_measures_8, _cthread_165, int___unbox__(_checkDefined(i_4, 3432297)))
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_8@293@01 _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_8@293@01 _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
    (Measure$check%precondition $Snap.unit _loop_measures_8@293@01 _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297))))))
(assert (or
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_4@294@01 3432297)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_4@294@01 3432297)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297))
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
  (=>
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
    (and
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
      (Measure$check%precondition $Snap.unit _loop_measures_8@293@01 _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)))))
  (or
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
    (not
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)))))
(push) ; 6
(assert (not (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
  (Measure$check $Snap.unit _loop_measures_8@293@01 _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
  (Measure$check $Snap.unit _loop_measures_8@293@01 _cthread_165@271@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_4), int())
; [eval] typeof(i_4)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_4@294@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_4@294@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) ==> int___unbox__(_checkDefined(i_4, 3432297)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0) | live]
; [else-branch: 75 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 75 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
; [eval] int___unbox__(_checkDefined(i_4, 3432297)) > 0
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 75 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@294@01, 3432297)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)))
(push) ; 6
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@294@01 3432297)) 0)))
; [eval] _loop_check_before_8 ==> _loop_termination_flag_8 || (!int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0) || perm(MustTerminate(_cthread_165)) == none && ((forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 76 | False | dead]
; [else-branch: 76 | True | live]
(push) ; 7
; [else-branch: 76 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_8 ==> (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_8
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | True | live]
; [else-branch: 77 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 77 | True]
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false) && ((forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false) && ((forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false) && (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_45: Ref [MustInvokeBounded(_r_45)] :: false)
(push) ; 8
; [then-branch: 78 | False | live]
; [else-branch: 78 | True | live]
(push) ; 9
; [then-branch: 78 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 78 | True]
; [eval] (forperm _r_45: Ref [MustInvokeUnbounded(_r_45)] :: false)
(push) ; 10
; [then-branch: 79 | False | live]
; [else-branch: 79 | True | live]
(push) ; 11
; [then-branch: 79 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 79 | True]
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 80 | False | live]
; [else-branch: 80 | True | live]
(push) ; 13
; [then-branch: 80 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 80 | True]
; [eval] (forperm _r_45: Ref [_r_45.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 72 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(pop) ; 5
; [eval] !int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___gt__(int___unbox__(_checkDefined(i_4, 3432297)), 0)
; [eval] int___unbox__(_checkDefined(i_4, 3432297))
; [eval] _checkDefined(i_4, 3432297)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0)) | live]
; [else-branch: 81 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 81 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0)))
; [exec]
; exhale perm(MustTerminate(_cthread_165)) > none ==>
;   acc(MustTerminate(_cthread_165), perm(MustTerminate(_cthread_165)) -
;   _loop_original_must_terminate_8)
; [eval] perm(MustTerminate(_cthread_165)) > none
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | True | live]
; [else-branch: 82 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 82 | True]
; [eval] perm(MustTerminate(_cthread_165)) - _loop_original_must_terminate_8
; [eval] perm(MustTerminate(_cthread_165))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_8@288@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_8@288@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_8@288@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_8@288@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_8@288@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_8@288@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_8@288@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_8
; [exec]
; label __end
; [eval] (forperm _r_47: Ref [MustInvokeBounded(_r_47)] :: false)
; [eval] (forperm _r_47: Ref [MustInvokeUnbounded(_r_47)] :: false)
; [eval] (forperm _r_47: Ref [_r_47.MustReleaseBounded] :: false)
; [eval] (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 81 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_4@290@01, 3432297)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_4@290@01 3432297)) 0))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_measures_4 ----------
(declare-const _cthread_166@296@01 $Ref)
(declare-const _caller_measures_166@297@01 Seq<Measure$>)
(declare-const _residue_166@298@01 $Perm)
(declare-const _current_wait_level_166@299@01 $Perm)
(declare-const _cthread_166@300@01 $Ref)
(declare-const _caller_measures_166@301@01 Seq<Measure$>)
(declare-const _residue_166@302@01 $Perm)
(declare-const _current_wait_level_166@303@01 $Perm)
(push) ; 1
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@300@01 $Ref.null)))
(assert (=
  ($Snap.second $t@304@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@304@01))
    ($Snap.second ($Snap.second $t@304@01)))))
(assert (= ($Snap.first ($Snap.second $t@304@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@300@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@304@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@305@01 $Snap)
(assert (= $t@305@01 ($Snap.combine ($Snap.first $t@305@01) ($Snap.second $t@305@01))))
(assert (= ($Snap.first $t@305@01) $Snap.unit))
; [eval] (forperm _r_51: Ref [_r_51.MustReleaseBounded] :: Level(_r_51) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@305@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@305@01))
    ($Snap.second ($Snap.second $t@305@01)))))
(assert (= ($Snap.first ($Snap.second $t@305@01)) $Snap.unit))
; [eval] (forperm _r_51: Ref [_r_51.MustReleaseUnbounded] :: Level(_r_51) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@305@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@305@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@305@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@305@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_166@302@01 _current_wait_level_166@303@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@305@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@306@01 $Ref)
; [exec]
; var i_5: Ref
(declare-const i_5@307@01 $Ref)
; [exec]
; var _loop_measures_9: Seq[Measure$]
(declare-const _loop_measures_9@308@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_9: Bool
(declare-const _loop_check_before_9@309@01 Bool)
; [exec]
; var _loop_termination_flag_9: Bool
(declare-const _loop_termination_flag_9@310@01 Bool)
; [exec]
; var _loop_original_must_terminate_9: Perm
(declare-const _loop_original_must_terminate_9@311@01 $Perm)
; [exec]
; var _residue_191: Perm
(declare-const _residue_191@312@01 $Perm)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@313@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@314@01 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_5 := __prim__int___box__(5)
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(declare-const i_5@315@01 $Ref)
(assert (= i_5@315@01 (__prim__int___box__ $Snap.unit 5)))
; [exec]
; inhale _isDefined(3497833)
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 $Snap.unit))
; [eval] _isDefined(3497833)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3497833))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497833))
(assert (_isDefined $Snap.unit 3497833))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_9 := perm(MustTerminate(_cthread_166))
; [eval] perm(MustTerminate(_cthread_166))
(declare-const _loop_original_must_terminate_9@317@01 $Perm)
(assert (= _loop_original_must_terminate_9@317@01 $Perm.No))
; [exec]
; _loop_termination_flag_9 := true
; [exec]
; _loop_check_before_9 := true
(declare-const _loop_measures_9@318@01 Seq<Measure$>)
(declare-const i_5@319@01 $Ref)
(declare-const _loop_check_before_9@320@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@321@01 $Snap)
(assert (= $t@321@01 ($Snap.combine ($Snap.first $t@321@01) ($Snap.second $t@321@01))))
(assert (= ($Snap.first $t@321@01) $Snap.unit))
; [eval] (forperm _r_49: Ref [_r_49.MustReleaseBounded] :: Level(_r_49) <= _residue_191)
(assert (=
  ($Snap.second $t@321@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@321@01))
    ($Snap.second ($Snap.second $t@321@01)))))
(assert (= ($Snap.first ($Snap.second $t@321@01)) $Snap.unit))
; [eval] (forperm _r_49: Ref [_r_49.MustReleaseUnbounded] :: Level(_r_49) <= _residue_191)
(assert (=
  ($Snap.second ($Snap.second $t@321@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@321@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@321@01))) $Snap.unit))
; [eval] _residue_166 <= _residue_191
(assert (<= _residue_166@302@01 _residue_191@312@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@321@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_5), int())
; [eval] typeof(i_5)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_5@319@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
  $Snap.unit))
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ==> int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_5@319@01 3497833))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_5@319@01 3497833))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@319@01 3497833)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@319@01 3497833)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@319@01 3497833)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833))))
; [eval] -1
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1) | live]
; [else-branch: 83 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 83 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
; [eval] int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 83 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))))
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_5), int())
; [eval] typeof(i_5)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_5@315@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5@315@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ==> int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_5@315@01 3497833))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_5@315@01 3497833))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@315@01 3497833)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@315@01 3497833)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@315@01 3497833)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833))))
; [eval] -1
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1)))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@315@01, 3497833)), -1) | live]
; [else-branch: 84 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@315@01, 3497833)), -1)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 84 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@315@01, 3497833)), -1)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1)))
; [eval] int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1)))
(push) ; 4
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@315@01 3497833)) 0)))
; [eval] _loop_check_before_9 ==> _loop_termination_flag_9 || (!int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | True | live]
; [else-branch: 85 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 85 | True]
; [eval] _loop_termination_flag_9 || (!int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) || perm(MustTerminate(_cthread_166)) == none && ((forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_9 ==> (forperm _r_50: Ref [MustInvokeBounded(_r_50)] :: false) && ((forperm _r_50: Ref [MustInvokeUnbounded(_r_50)] :: false) && ((forperm _r_50: Ref [_r_50.MustReleaseBounded] :: false) && (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_9
(push) ; 4
; [then-branch: 86 | False | dead]
; [else-branch: 86 | True | live]
(push) ; 5
; [else-branch: 86 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@321@01 ($Snap.combine ($Snap.first $t@321@01) ($Snap.second $t@321@01))))
(assert (= ($Snap.first $t@321@01) $Snap.unit))
(assert (=
  ($Snap.second $t@321@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@321@01))
    ($Snap.second ($Snap.second $t@321@01)))))
(assert (= ($Snap.first ($Snap.second $t@321@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@321@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@321@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@321@01))) $Snap.unit))
(assert (<= _residue_166@302@01 _residue_191@312@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@321@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_5@319@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_5@319@01 3497833))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@319@01 3497833)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)))
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))))
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@321@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] -1
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] -1
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
; [eval] -1
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1) | live]
; [else-branch: 87 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 87 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@319@01, 3497833)), -1)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)) (- 0 1)))
; [exec]
; _loop_measures_9 := Seq(Measure$create(true, _cthread_166, int___unbox__(_checkDefined(i_5,
;   3497833))))
; [eval] Seq(Measure$create(true, _cthread_166, int___unbox__(_checkDefined(i_5, 3497833))))
; [eval] Measure$create(true, _cthread_166, int___unbox__(_checkDefined(i_5, 3497833)))
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833)))))
  1))
(declare-const _loop_measures_9@322@01 Seq<Measure$>)
(assert (=
  _loop_measures_9@322@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@319@01 3497833))))))
; [exec]
; i_5 := __prim__int___box__(int___sub__(int___unbox__(i_5), 1))
; [eval] __prim__int___box__(int___sub__(int___unbox__(i_5), 1))
; [eval] int___sub__(int___unbox__(i_5), 1)
; [eval] int___unbox__(i_5)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_5@319@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_5@319@01))
(push) ; 6
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5@319@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_5@319@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_5@319@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_5@319@01) 1)))
(declare-const i_5@323@01 $Ref)
(assert (=
  i_5@323@01
  (__prim__int___box__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_5@319@01) 1))))
; [exec]
; inhale _isDefined(3497833)
(declare-const $t@324@01 $Snap)
(assert (= $t@324@01 $Snap.unit))
; [eval] _isDefined(3497833)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_9
; [exec]
; _loop_check_before_9 := false
; [exec]
; assert _loop_termination_flag_9 ==>
;   !int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ||
;   Measure$check(_loop_measures_9, _cthread_166, int___unbox__(_checkDefined(i_5,
;   3497833)))
; [eval] _loop_termination_flag_9 ==> !int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) || Measure$check(_loop_measures_9, _cthread_166, int___unbox__(_checkDefined(i_5, 3497833)))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 88 | True | live]
; [else-branch: 88 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 88 | True]
; [eval] !int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) || Measure$check(_loop_measures_9, _cthread_166, int___unbox__(_checkDefined(i_5, 3497833)))
; [eval] !int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_5@323@01 3497833))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_5@323@01 3497833))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@323@01 3497833)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@323@01 3497833)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@323@01 3497833)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833))))
; [eval] -1
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
(push) ; 8
; [then-branch: 89 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)) | live]
; [else-branch: 89 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1) | live]
(push) ; 9
; [then-branch: 89 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 89 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
; [eval] Measure$check(_loop_measures_9, _cthread_166, int___unbox__(_checkDefined(i_5, 3497833)))
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_9@322@01 _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_9@322@01 _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
    (Measure$check%precondition $Snap.unit _loop_measures_9@322@01 _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833))))))
(assert (or
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_5@323@01 3497833)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_5@323@01 3497833)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833))
  (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (=>
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
    (and
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
      (Measure$check%precondition $Snap.unit _loop_measures_9@322@01 _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)))))
  (or
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
    (not
      (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))))))
(push) ; 6
(assert (not (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
  (Measure$check $Snap.unit _loop_measures_9@322@01 _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
  (Measure$check $Snap.unit _loop_measures_9@322@01 _cthread_166@300@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_5), int())
; [eval] typeof(i_5)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_5@323@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_5@323@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ==> int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] -1
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1) | live]
; [else-branch: 90 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 90 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
; [eval] int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))
(push) ; 6
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ==> int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] -1
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1) | live]
; [else-branch: 91 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 91 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ==> int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] -1
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1) | live]
; [else-branch: 92 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 92 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1) ==> int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___gt__(int___unbox__(_checkDefined(i_5, 3497833)), -1)
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
; [eval] -1
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1) | live]
; [else-branch: 93 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 93 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_5@323@01, 3497833)), -1)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(_checkDefined(i_5, 3497833)) > 0
; [eval] int___unbox__(_checkDefined(i_5, 3497833))
; [eval] _checkDefined(i_5, 3497833)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) (- 0 1))
  (> (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_5@323@01 3497833)) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_promise_1 ----------
(declare-const _cthread_167@325@01 $Ref)
(declare-const _caller_measures_167@326@01 Seq<Measure$>)
(declare-const _residue_167@327@01 $Perm)
(declare-const _current_wait_level_167@328@01 $Perm)
(declare-const _cthread_167@329@01 $Ref)
(declare-const _caller_measures_167@330@01 Seq<Measure$>)
(declare-const _residue_167@331@01 $Perm)
(declare-const _current_wait_level_167@332@01 $Perm)
(push) ; 1
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 ($Snap.combine ($Snap.first $t@333@01) ($Snap.second $t@333@01))))
(assert (= ($Snap.first $t@333@01) $Snap.unit))
; [eval] _cthread_167 != null
(assert (not (= _cthread_167@329@01 $Ref.null)))
(assert (=
  ($Snap.second $t@333@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@333@01))
    ($Snap.second ($Snap.second $t@333@01)))))
(assert (= ($Snap.first ($Snap.second $t@333@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_167), Thread_0())
; [eval] typeof(_cthread_167)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_167@329@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@333@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@333@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@333@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@333@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 ($Snap.combine ($Snap.first $t@334@01) ($Snap.second $t@334@01))))
(assert (= ($Snap.first $t@334@01) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_167)
(assert (=
  ($Snap.second $t@334@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@334@01))
    ($Snap.second ($Snap.second $t@334@01)))))
(assert (= ($Snap.first ($Snap.second $t@334@01)) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_167)
(assert (=
  ($Snap.second ($Snap.second $t@334@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@334@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@334@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@334@01))) $Snap.unit))
; [eval] _residue_167 <= _current_wait_level_167
(assert (<= _residue_167@331@01 _current_wait_level_167@332@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@334@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@335@01 $Ref)
; [exec]
; var _loop_measures_10: Seq[Measure$]
(declare-const _loop_measures_10@336@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_10: Bool
(declare-const _loop_check_before_10@337@01 Bool)
; [exec]
; var _loop_termination_flag_10: Bool
(declare-const _loop_termination_flag_10@338@01 Bool)
; [exec]
; var _loop_original_must_terminate_10: Perm
(declare-const _loop_original_must_terminate_10@339@01 $Perm)
; [exec]
; var _residue_192: Perm
(declare-const _residue_192@340@01 $Perm)
; [exec]
; var _cwl_167: Perm
(declare-const _cwl_167@341@01 $Perm)
; [exec]
; var _method_measures_167: Seq[Measure$]
(declare-const _method_measures_167@342@01 Seq<Measure$>)
; [exec]
; _method_measures_167 := Seq(Measure$create(true, _cthread_167, 1))
; [eval] Seq(Measure$create(true, _cthread_167, 1))
; [eval] Measure$create(true, _cthread_167, 1)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_167@329@01 1)))
  1))
(declare-const _method_measures_167@343@01 Seq<Measure$>)
(assert (=
  _method_measures_167@343@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_167@329@01 1))))
; [exec]
; _err := null
; [exec]
; _loop_original_must_terminate_10 := perm(MustTerminate(_cthread_167))
; [eval] perm(MustTerminate(_cthread_167))
(declare-const _loop_original_must_terminate_10@344@01 $Perm)
(assert (= _loop_original_must_terminate_10@344@01 $Perm.Write))
; [exec]
; _loop_termination_flag_10 := false
; [exec]
; _loop_check_before_10 := true
(declare-const _loop_measures_10@345@01 Seq<Measure$>)
(declare-const _loop_check_before_10@346@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@347@01 $Snap)
(assert (= $t@347@01 ($Snap.combine ($Snap.first $t@347@01) ($Snap.second $t@347@01))))
(assert (= ($Snap.first $t@347@01) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: Level(_r_54) <= _residue_192)
(assert (=
  ($Snap.second $t@347@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@347@01))
    ($Snap.second ($Snap.second $t@347@01)))))
(assert (= ($Snap.first ($Snap.second $t@347@01)) $Snap.unit))
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: Level(_r_54) <= _residue_192)
(assert (=
  ($Snap.second ($Snap.second $t@347@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@347@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@347@01))) $Snap.unit))
; [eval] _residue_167 <= _residue_192
(assert (<= _residue_167@331@01 _residue_192@340@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@347@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@347@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@347@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | True | live]
; [else-branch: 94 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 94 | True]
; [eval] _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 95 | False | live]
; [else-branch: 95 | True | live]
(push) ; 7
; [then-branch: 95 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 95 | True]
; [eval] !true
(push) ; 8
; [then-branch: 96 | False | live]
; [else-branch: 96 | True | live]
(push) ; 9
; [then-branch: 96 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 96 | True]
; [eval] perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | True | live]
; [else-branch: 97 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 97 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 98 | False | live]
; [else-branch: 98 | True | live]
(push) ; 7
; [then-branch: 98 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 98 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !true
(set-option :timeout 0)
(push) ; 8
; [then-branch: 99 | False | live]
; [else-branch: 99 | True | live]
(push) ; 9
; [then-branch: 99 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 99 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | True | live]
; [else-branch: 100 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 100 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 101 | False | live]
; [else-branch: 101 | True | live]
(push) ; 7
; [then-branch: 101 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 101 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !true
(set-option :timeout 0)
(push) ; 8
; [then-branch: 102 | False | live]
; [else-branch: 102 | True | live]
(push) ; 9
; [then-branch: 102 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 102 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_10 ==> _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | True | live]
; [else-branch: 103 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 103 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_10 || (!true || perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 104 | False | live]
; [else-branch: 104 | True | live]
(push) ; 7
; [then-branch: 104 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 104 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !true
(set-option :timeout 0)
(push) ; 8
; [then-branch: 105 | False | live]
; [else-branch: 105 | True | live]
(push) ; 9
; [then-branch: 105 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 105 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_167)) == none && ((forperm _r_55: Ref [MustInvokeBounded(_r_55)] :: false) && ((forperm _r_55: Ref [MustInvokeUnbounded(_r_55)] :: false) && ((forperm _r_55: Ref [_r_55.MustReleaseBounded] :: false) && (forperm _r_55: Ref [_r_55.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_167)) == none
; [eval] perm(MustTerminate(_cthread_167))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_promise_2 ----------
(declare-const _cthread_168@348@01 $Ref)
(declare-const _caller_measures_168@349@01 Seq<Measure$>)
(declare-const _residue_168@350@01 $Perm)
(declare-const _current_wait_level_168@351@01 $Perm)
(declare-const _cthread_168@352@01 $Ref)
(declare-const _caller_measures_168@353@01 Seq<Measure$>)
(declare-const _residue_168@354@01 $Perm)
(declare-const _current_wait_level_168@355@01 $Perm)
(push) ; 1
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 ($Snap.combine ($Snap.first $t@356@01) ($Snap.second $t@356@01))))
(assert (= ($Snap.first $t@356@01) $Snap.unit))
; [eval] _cthread_168 != null
(assert (not (= _cthread_168@352@01 $Ref.null)))
(assert (=
  ($Snap.second $t@356@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@356@01))
    ($Snap.second ($Snap.second $t@356@01)))))
(assert (= ($Snap.first ($Snap.second $t@356@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_168@352@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@356@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@356@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@356@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@356@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 ($Snap.combine ($Snap.first $t@357@01) ($Snap.second $t@357@01))))
(assert (= ($Snap.first $t@357@01) $Snap.unit))
; [eval] (forperm _r_61: Ref [_r_61.MustReleaseBounded] :: Level(_r_61) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@357@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@357@01))
    ($Snap.second ($Snap.second $t@357@01)))))
(assert (= ($Snap.first ($Snap.second $t@357@01)) $Snap.unit))
; [eval] (forperm _r_61: Ref [_r_61.MustReleaseUnbounded] :: Level(_r_61) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@357@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@357@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@357@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@354@01 _current_wait_level_168@355@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@357@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@358@01 $Ref)
; [exec]
; var _loop_measures_11: Seq[Measure$]
(declare-const _loop_measures_11@359@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_11: Bool
(declare-const _loop_check_before_11@360@01 Bool)
; [exec]
; var _loop_termination_flag_11: Bool
(declare-const _loop_termination_flag_11@361@01 Bool)
; [exec]
; var _loop_original_must_terminate_11: Perm
(declare-const _loop_original_must_terminate_11@362@01 $Perm)
; [exec]
; var _residue_193: Perm
(declare-const _residue_193@363@01 $Perm)
; [exec]
; var _cwl_168: Perm
(declare-const _cwl_168@364@01 $Perm)
; [exec]
; var _method_measures_168: Seq[Measure$]
(declare-const _method_measures_168@365@01 Seq<Measure$>)
; [exec]
; _method_measures_168 := Seq(Measure$create(true, _cthread_168, 1))
; [eval] Seq(Measure$create(true, _cthread_168, 1))
; [eval] Measure$create(true, _cthread_168, 1)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_168@352@01 1)))
  1))
(declare-const _method_measures_168@366@01 Seq<Measure$>)
(assert (=
  _method_measures_168@366@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_168@352@01 1))))
; [exec]
; _err := null
; [exec]
; _loop_original_must_terminate_11 := perm(MustTerminate(_cthread_168))
; [eval] perm(MustTerminate(_cthread_168))
(declare-const _loop_original_must_terminate_11@367@01 $Perm)
(assert (= _loop_original_must_terminate_11@367@01 $Perm.Write))
; [exec]
; _loop_termination_flag_11 := false
; [exec]
; _loop_check_before_11 := true
(declare-const _loop_measures_11@368@01 Seq<Measure$>)
(declare-const _loop_check_before_11@369@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 ($Snap.combine ($Snap.first $t@370@01) ($Snap.second $t@370@01))))
(assert (= ($Snap.first $t@370@01) $Snap.unit))
; [eval] (forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _residue_193)
(assert (=
  ($Snap.second $t@370@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@370@01))
    ($Snap.second ($Snap.second $t@370@01)))))
(assert (= ($Snap.first ($Snap.second $t@370@01)) $Snap.unit))
; [eval] (forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _residue_193)
(assert (=
  ($Snap.second ($Snap.second $t@370@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@370@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@370@01))) $Snap.unit))
; [eval] _residue_168 <= _residue_193
(assert (<= _residue_168@354@01 _residue_193@363@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@370@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] _loop_check_before_11 ==> _loop_termination_flag_11 || (!false || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | True | live]
; [else-branch: 106 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 106 | True]
; [eval] _loop_termination_flag_11 || (!false || perm(MustTerminate(_cthread_168)) == none && ((forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 107 | False | live]
; [else-branch: 107 | True | live]
(push) ; 7
; [then-branch: 107 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 107 | True]
; [eval] !false
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_11 ==> (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false) && ((forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false) && ((forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false) && (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_11
(push) ; 4
; [then-branch: 108 | False | dead]
; [else-branch: 108 | True | live]
(push) ; 5
; [else-branch: 108 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@370@01 ($Snap.combine ($Snap.first $t@370@01) ($Snap.second $t@370@01))))
(assert (= ($Snap.first $t@370@01) $Snap.unit))
(assert (=
  ($Snap.second $t@370@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@370@01))
    ($Snap.second ($Snap.second $t@370@01)))))
(assert (= ($Snap.first ($Snap.second $t@370@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@370@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@370@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@370@01))) $Snap.unit))
(assert (<= _residue_168@354@01 _residue_193@363@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@370@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
(push) ; 5
; [eval] !false
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [then-branch: 109 | False | dead]
; [else-branch: 109 | True | live]
(push) ; 5
; [else-branch: 109 | True]
(pop) ; 5
; [eval] !false
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | True | live]
; [else-branch: 110 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 110 | True]
; [exec]
; exhale perm(MustTerminate(_cthread_168)) > none ==>
;   acc(MustTerminate(_cthread_168), perm(MustTerminate(_cthread_168)) -
;   _loop_original_must_terminate_11)
; [eval] perm(MustTerminate(_cthread_168)) > none
; [eval] perm(MustTerminate(_cthread_168))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | True | live]
; [else-branch: 111 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 111 | True]
; [eval] perm(MustTerminate(_cthread_168)) - _loop_original_must_terminate_11
; [eval] perm(MustTerminate(_cthread_168))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_11@367@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_11@367@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_11@367@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_11@367@01)))))
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_11@367@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_11@367@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_11@367@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_11@367@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_11
; [exec]
; label __end
; [eval] (forperm _r_62: Ref [MustInvokeBounded(_r_62)] :: false)
; [eval] (forperm _r_62: Ref [MustInvokeUnbounded(_r_62)] :: false)
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseBounded] :: false)
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_promise_3 ----------
(declare-const _cthread_169@371@01 $Ref)
(declare-const _caller_measures_169@372@01 Seq<Measure$>)
(declare-const _residue_169@373@01 $Perm)
(declare-const _current_wait_level_169@374@01 $Perm)
(declare-const _cthread_169@375@01 $Ref)
(declare-const _caller_measures_169@376@01 Seq<Measure$>)
(declare-const _residue_169@377@01 $Perm)
(declare-const _current_wait_level_169@378@01 $Perm)
(push) ; 1
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 ($Snap.combine ($Snap.first $t@379@01) ($Snap.second $t@379@01))))
(assert (= ($Snap.first $t@379@01) $Snap.unit))
; [eval] _cthread_169 != null
(assert (not (= _cthread_169@375@01 $Ref.null)))
(assert (=
  ($Snap.second $t@379@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@379@01))
    ($Snap.second ($Snap.second $t@379@01)))))
(assert (= ($Snap.first ($Snap.second $t@379@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_169@375@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@379@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@379@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@379@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@379@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@380@01 $Snap)
(assert (= $t@380@01 ($Snap.combine ($Snap.first $t@380@01) ($Snap.second $t@380@01))))
(assert (= ($Snap.first $t@380@01) $Snap.unit))
; [eval] (forperm _r_66: Ref [_r_66.MustReleaseBounded] :: Level(_r_66) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@380@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@380@01))
    ($Snap.second ($Snap.second $t@380@01)))))
(assert (= ($Snap.first ($Snap.second $t@380@01)) $Snap.unit))
; [eval] (forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: Level(_r_66) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@380@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@380@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@380@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@380@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_169@377@01 _current_wait_level_169@378@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@380@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@381@01 $Ref)
; [exec]
; var i_6: Ref
(declare-const i_6@382@01 $Ref)
; [exec]
; var _loop_measures_12: Seq[Measure$]
(declare-const _loop_measures_12@383@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_12: Bool
(declare-const _loop_check_before_12@384@01 Bool)
; [exec]
; var _loop_termination_flag_12: Bool
(declare-const _loop_termination_flag_12@385@01 Bool)
; [exec]
; var _loop_original_must_terminate_12: Perm
(declare-const _loop_original_must_terminate_12@386@01 $Perm)
; [exec]
; var _residue_194: Perm
(declare-const _residue_194@387@01 $Perm)
; [exec]
; var _cwl_169: Perm
(declare-const _cwl_169@388@01 $Perm)
; [exec]
; var _method_measures_169: Seq[Measure$]
(declare-const _method_measures_169@389@01 Seq<Measure$>)
; [exec]
; _method_measures_169 := Seq(Measure$create(true, _cthread_169, 1))
; [eval] Seq(Measure$create(true, _cthread_169, 1))
; [eval] Measure$create(true, _cthread_169, 1)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_169@375@01 1)))
  1))
(declare-const _method_measures_169@390@01 Seq<Measure$>)
(assert (=
  _method_measures_169@390@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_169@375@01 1))))
; [exec]
; _err := null
; [exec]
; i_6 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_6@391@01 $Ref)
(assert (= i_6@391@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3563369)
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] _isDefined(3563369)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3563369))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3563369))
(assert (_isDefined $Snap.unit 3563369))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_12 := perm(MustTerminate(_cthread_169))
; [eval] perm(MustTerminate(_cthread_169))
(declare-const _loop_original_must_terminate_12@393@01 $Perm)
(assert (= _loop_original_must_terminate_12@393@01 $Perm.Write))
; [exec]
; _loop_termination_flag_12 := false
; [exec]
; _loop_check_before_12 := true
(declare-const _loop_measures_12@394@01 Seq<Measure$>)
(declare-const i_6@395@01 $Ref)
(declare-const _loop_check_before_12@396@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 ($Snap.combine ($Snap.first $t@397@01) ($Snap.second $t@397@01))))
(assert (= ($Snap.first $t@397@01) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseBounded] :: Level(_r_64) <= _residue_194)
(assert (=
  ($Snap.second $t@397@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@397@01))
    ($Snap.second ($Snap.second $t@397@01)))))
(assert (= ($Snap.first ($Snap.second $t@397@01)) $Snap.unit))
; [eval] (forperm _r_64: Ref [_r_64.MustReleaseUnbounded] :: Level(_r_64) <= _residue_194)
(assert (=
  ($Snap.second ($Snap.second $t@397@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@397@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@397@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@397@01))) $Snap.unit))
; [eval] _residue_169 <= _residue_194
(assert (<= _residue_169@377@01 _residue_194@387@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@397@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@397@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@397@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_6), int())
; [eval] typeof(i_6)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_6@395@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@397@01))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_6), int())
; [eval] typeof(i_6)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_6@391@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_6@391@01) (as int<PyType>  PyType)))
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | True | live]
; [else-branch: 112 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 112 | True]
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 113 | False | live]
; [else-branch: 113 | True | live]
(push) ; 7
; [then-branch: 113 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 113 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___unbox__(_checkDefined(i_6, 3563369))
; [eval] _checkDefined(i_6, 3563369)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_6@391@01 3563369))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_6@391@01 3563369))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_6@391@01 3563369)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_6@391@01 3563369)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_6@391@01 3563369)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))
(push) ; 8
; [then-branch: 114 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)) | live]
; [else-branch: 114 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5) | live]
(push) ; 9
; [then-branch: 114 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 114 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))
; [eval] perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_6@391@01 3563369)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_6@391@01 3563369)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_6@391@01 3563369)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_6@391@01 3563369)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)))))
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | True | live]
; [else-branch: 115 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 115 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 116 | False | live]
; [else-branch: 116 | True | live]
(push) ; 7
; [then-branch: 116 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 116 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___unbox__(_checkDefined(i_6, 3563369))
; [eval] _checkDefined(i_6, 3563369)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 117 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)) | live]
; [else-branch: 117 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5) | live]
(push) ; 9
; [then-branch: 117 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 117 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | True | live]
; [else-branch: 118 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 118 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 119 | False | live]
; [else-branch: 119 | True | live]
(push) ; 7
; [then-branch: 119 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 119 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___unbox__(_checkDefined(i_6, 3563369))
; [eval] _checkDefined(i_6, 3563369)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 120 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)) | live]
; [else-branch: 120 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5) | live]
(push) ; 9
; [then-branch: 120 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 120 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_12 ==> _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | True | live]
; [else-branch: 121 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 121 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_12 || (!int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5) || perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 122 | False | live]
; [else-branch: 122 | True | live]
(push) ; 7
; [then-branch: 122 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 122 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_6, 3563369)), 5)
; [eval] int___unbox__(_checkDefined(i_6, 3563369))
; [eval] _checkDefined(i_6, 3563369)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 123 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)) | live]
; [else-branch: 123 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5) | live]
(push) ; 9
; [then-branch: 123 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 123 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_6@391@01, 3563369)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_169)) == none && ((forperm _r_65: Ref [MustInvokeBounded(_r_65)] :: false) && ((forperm _r_65: Ref [MustInvokeUnbounded(_r_65)] :: false) && ((forperm _r_65: Ref [_r_65.MustReleaseBounded] :: false) && (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(pop) ; 4
; Joined path conditions
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_6@391@01 3563369)) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_promise_4 ----------
(declare-const _cthread_170@398@01 $Ref)
(declare-const _caller_measures_170@399@01 Seq<Measure$>)
(declare-const _residue_170@400@01 $Perm)
(declare-const _current_wait_level_170@401@01 $Perm)
(declare-const _cthread_170@402@01 $Ref)
(declare-const _caller_measures_170@403@01 Seq<Measure$>)
(declare-const _residue_170@404@01 $Perm)
(declare-const _current_wait_level_170@405@01 $Perm)
(push) ; 1
(declare-const $t@406@01 $Snap)
(assert (= $t@406@01 ($Snap.combine ($Snap.first $t@406@01) ($Snap.second $t@406@01))))
(assert (= ($Snap.first $t@406@01) $Snap.unit))
; [eval] _cthread_170 != null
(assert (not (= _cthread_170@402@01 $Ref.null)))
(assert (=
  ($Snap.second $t@406@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@406@01))
    ($Snap.second ($Snap.second $t@406@01)))))
(assert (= ($Snap.first ($Snap.second $t@406@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_170), Thread_0())
; [eval] typeof(_cthread_170)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_170@402@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@406@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@406@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@406@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@406@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@407@01 $Snap)
(assert (= $t@407@01 ($Snap.combine ($Snap.first $t@407@01) ($Snap.second $t@407@01))))
(assert (= ($Snap.first $t@407@01) $Snap.unit))
; [eval] (forperm _r_73: Ref [_r_73.MustReleaseBounded] :: Level(_r_73) <= _current_wait_level_170)
(assert (=
  ($Snap.second $t@407@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@407@01))
    ($Snap.second ($Snap.second $t@407@01)))))
(assert (= ($Snap.first ($Snap.second $t@407@01)) $Snap.unit))
; [eval] (forperm _r_73: Ref [_r_73.MustReleaseUnbounded] :: Level(_r_73) <= _current_wait_level_170)
(assert (=
  ($Snap.second ($Snap.second $t@407@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@407@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@407@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@407@01))) $Snap.unit))
; [eval] _residue_170 <= _current_wait_level_170
(assert (<= _residue_170@404@01 _current_wait_level_170@405@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@407@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@408@01 $Ref)
; [exec]
; var i_7: Ref
(declare-const i_7@409@01 $Ref)
; [exec]
; var j_1: Ref
(declare-const j_1@410@01 $Ref)
; [exec]
; var _loop_measures_13: Seq[Measure$]
(declare-const _loop_measures_13@411@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_13: Bool
(declare-const _loop_check_before_13@412@01 Bool)
; [exec]
; var _loop_termination_flag_13: Bool
(declare-const _loop_termination_flag_13@413@01 Bool)
; [exec]
; var _loop_original_must_terminate_13: Perm
(declare-const _loop_original_must_terminate_13@414@01 $Perm)
; [exec]
; var _residue_195: Perm
(declare-const _residue_195@415@01 $Perm)
; [exec]
; var _loop_measures_14: Seq[Measure$]
(declare-const _loop_measures_14@416@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_14: Bool
(declare-const _loop_check_before_14@417@01 Bool)
; [exec]
; var _loop_termination_flag_14: Bool
(declare-const _loop_termination_flag_14@418@01 Bool)
; [exec]
; var _loop_original_must_terminate_14: Perm
(declare-const _loop_original_must_terminate_14@419@01 $Perm)
; [exec]
; var _residue_196: Perm
(declare-const _residue_196@420@01 $Perm)
; [exec]
; var _cwl_170: Perm
(declare-const _cwl_170@421@01 $Perm)
; [exec]
; var _method_measures_170: Seq[Measure$]
(declare-const _method_measures_170@422@01 Seq<Measure$>)
; [exec]
; _method_measures_170 := Seq(Measure$create(true, _cthread_170, 1))
; [eval] Seq(Measure$create(true, _cthread_170, 1))
; [eval] Measure$create(true, _cthread_170, 1)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_170@402@01 1)))
  1))
(declare-const _method_measures_170@423@01 Seq<Measure$>)
(assert (=
  _method_measures_170@423@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_170@402@01 1))))
; [exec]
; _err := null
; [exec]
; i_7 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_7@424@01 $Ref)
(assert (= i_7@424@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3628905)
(declare-const $t@425@01 $Snap)
(assert (= $t@425@01 $Snap.unit))
; [eval] _isDefined(3628905)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3628905))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3628905))
(assert (_isDefined $Snap.unit 3628905))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_13 := perm(MustTerminate(_cthread_170))
; [eval] perm(MustTerminate(_cthread_170))
(declare-const _loop_original_must_terminate_13@426@01 $Perm)
(assert (= _loop_original_must_terminate_13@426@01 $Perm.Write))
; [exec]
; _loop_termination_flag_13 := true
; [exec]
; _loop_check_before_13 := true
(declare-const _loop_measures_13@427@01 Seq<Measure$>)
(declare-const i_7@428@01 $Ref)
(declare-const j_1@429@01 $Ref)
(declare-const _loop_original_must_terminate_14@430@01 $Perm)
(declare-const _loop_termination_flag_14@431@01 Bool)
(declare-const _loop_check_before_14@432@01 Bool)
(declare-const _loop_measures_14@433@01 Seq<Measure$>)
(declare-const _loop_check_before_13@434@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@435@01 $Snap)
(assert (= $t@435@01 ($Snap.combine ($Snap.first $t@435@01) ($Snap.second $t@435@01))))
(assert (= ($Snap.first $t@435@01) $Snap.unit))
; [eval] (forperm _r_71: Ref [_r_71.MustReleaseBounded] :: Level(_r_71) <= _residue_195)
(assert (=
  ($Snap.second $t@435@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@435@01))
    ($Snap.second ($Snap.second $t@435@01)))))
(assert (= ($Snap.first ($Snap.second $t@435@01)) $Snap.unit))
; [eval] (forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: Level(_r_71) <= _residue_195)
(assert (=
  ($Snap.second ($Snap.second $t@435@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@435@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@435@01))) $Snap.unit))
; [eval] _residue_170 <= _residue_195
(assert (<= _residue_170@404@01 _residue_195@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@435@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_7), int())
; [eval] typeof(i_7)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_7@428@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5)
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_7@428@01 3628905))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_7@428@01 3628905))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@428@01 3628905)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@428@01 3628905)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@428@01 3628905)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5) | live]
; [else-branch: 124 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 124 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905)))
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))
(pop) ; 5
(push) ; 5
; [else-branch: 124 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_7), int())
; [eval] typeof(i_7)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_7@424@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_7@424@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5)
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_7@424@01 3628905))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_7@424@01 3628905))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@424@01 3628905)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@424@01 3628905)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@424@01 3628905)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@424@01, 3628905)), 5) | live]
; [else-branch: 125 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@424@01, 3628905)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 125 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@424@01, 3628905)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905)))
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@424@01 3628905)))
    0)))
; [eval] _loop_check_before_13 ==> _loop_termination_flag_13 || (!int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | True | live]
; [else-branch: 126 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 126 | True]
; [eval] _loop_termination_flag_13 || (!int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_13 ==> (forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false) && ((forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false) && ((forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false) && (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_13
(push) ; 4
; [then-branch: 127 | False | dead]
; [else-branch: 127 | True | live]
(push) ; 5
; [else-branch: 127 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@435@01 ($Snap.combine ($Snap.first $t@435@01) ($Snap.second $t@435@01))))
(assert (= ($Snap.first $t@435@01) $Snap.unit))
(assert (=
  ($Snap.second $t@435@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@435@01))
    ($Snap.second ($Snap.second $t@435@01)))))
(assert (= ($Snap.first ($Snap.second $t@435@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@435@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@435@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@435@01))) $Snap.unit))
(assert (<= _residue_170@404@01 _residue_195@415@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@435@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_7@428@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_7@428@01 3628905))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_7@428@01 3628905)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5)
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5)
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_7, 3628905)), 5)
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5) | live]
; [else-branch: 128 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 128 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_7@428@01, 3628905)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)) 5))
; [exec]
; _loop_measures_13 := Seq(Measure$create(true, _cthread_170, int___sub__(5, int___unbox__(_checkDefined(i_7,
;   3628905)))))
; [eval] Seq(Measure$create(true, _cthread_170, int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905)))))
; [eval] Measure$create(true, _cthread_170, int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_7, 3628905)))
; [eval] int___unbox__(_checkDefined(i_7, 3628905))
; [eval] _checkDefined(i_7, 3628905)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_170@402@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905))))))
  1))
(declare-const _loop_measures_13@436@01 Seq<Measure$>)
(assert (=
  _loop_measures_13@436@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_170@402@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_7@428@01 3628905)))))))
; [exec]
; i_7 := __prim__int___box__(int___add__(int___unbox__(i_7), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_7), 1))
; [eval] int___add__(int___unbox__(i_7), 1)
; [eval] int___unbox__(i_7)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_7@428@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_7@428@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@428@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_7@428@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_7@428@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_7@428@01) 1)))
(declare-const i_7@437@01 $Ref)
(assert (=
  i_7@437@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_7@428@01) 1))))
; [exec]
; inhale _isDefined(3628905)
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 $Snap.unit))
; [eval] _isDefined(3628905)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; j_1 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(declare-const j_1@439@01 $Ref)
(assert (= j_1@439@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3235690)
(declare-const $t@440@01 $Snap)
(assert (= $t@440@01 $Snap.unit))
; [eval] _isDefined(3235690)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 3235690))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235690))
(assert (_isDefined $Snap.unit 3235690))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_14 := perm(MustTerminate(_cthread_170))
; [eval] perm(MustTerminate(_cthread_170))
(declare-const _loop_original_must_terminate_14@441@01 $Perm)
(assert (= _loop_original_must_terminate_14@441@01 $Perm.Write))
; [exec]
; _loop_termination_flag_14 := false
; [exec]
; _loop_check_before_14 := true
(declare-const _loop_measures_14@442@01 Seq<Measure$>)
(declare-const j_1@443@01 $Ref)
(declare-const _loop_check_before_14@444@01 Bool)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@445@01 $Snap)
(assert (= $t@445@01 ($Snap.combine ($Snap.first $t@445@01) ($Snap.second $t@445@01))))
(assert (= ($Snap.first $t@445@01) $Snap.unit))
; [eval] (forperm _r_69: Ref [_r_69.MustReleaseBounded] :: Level(_r_69) <= _residue_196)
(assert (=
  ($Snap.second $t@445@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@445@01))
    ($Snap.second ($Snap.second $t@445@01)))))
(assert (= ($Snap.first ($Snap.second $t@445@01)) $Snap.unit))
; [eval] (forperm _r_69: Ref [_r_69.MustReleaseUnbounded] :: Level(_r_69) <= _residue_196)
(assert (=
  ($Snap.second ($Snap.second $t@445@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@445@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@445@01))) $Snap.unit))
; [eval] _residue_195 <= _residue_196
(assert (<= _residue_195@415@01 _residue_196@420@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@445@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@445@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@445@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(j_1), int())
; [eval] typeof(j_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> j_1@443@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@445@01))))))
  $Snap.unit))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] issubtype(typeof(j_1), int())
; [eval] typeof(j_1)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> j_1@439@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> j_1@439@01) (as int<PyType>  PyType)))
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | True | live]
; [else-branch: 129 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 129 | True]
; [eval] _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(push) ; 9
; [then-branch: 130 | False | live]
; [else-branch: 130 | True | live]
(push) ; 10
; [then-branch: 130 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 130 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___unbox__(_checkDefined(j_1, 3235690))
; [eval] _checkDefined(j_1, 3235690)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_1@439@01 3235690))
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_1@439@01 3235690))
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_1@439@01 3235690)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_1@439@01 3235690)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_1@439@01 3235690)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690))))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))
(push) ; 11
; [then-branch: 131 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)) | live]
; [else-branch: 131 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5) | live]
(push) ; 12
; [then-branch: 131 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 131 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))
; [eval] perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_170)) == none
; [eval] perm(MustTerminate(_cthread_170))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit j_1@439@01 3235690)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_1@439@01 3235690)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit j_1@439@01 3235690)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_1@439@01 3235690)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)))))
(push) ; 7
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | True | live]
; [else-branch: 132 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 132 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 133 | False | live]
; [else-branch: 133 | True | live]
(push) ; 10
; [then-branch: 133 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 133 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___unbox__(_checkDefined(j_1, 3235690))
; [eval] _checkDefined(j_1, 3235690)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 134 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)) | live]
; [else-branch: 134 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5) | live]
(push) ; 12
; [then-branch: 134 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 134 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_170)) == none
; [eval] perm(MustTerminate(_cthread_170))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | True | live]
; [else-branch: 135 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 135 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 136 | False | live]
; [else-branch: 136 | True | live]
(push) ; 10
; [then-branch: 136 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 136 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___unbox__(_checkDefined(j_1, 3235690))
; [eval] _checkDefined(j_1, 3235690)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 137 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)) | live]
; [else-branch: 137 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5) | live]
(push) ; 12
; [then-branch: 137 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 137 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_170)) == none
; [eval] perm(MustTerminate(_cthread_170))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_check_before_14 ==> _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | True | live]
; [else-branch: 138 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 138 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_14 || (!int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5) || perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 139 | False | live]
; [else-branch: 139 | True | live]
(push) ; 10
; [then-branch: 139 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 139 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_1, 3235690)), 5)
; [eval] int___unbox__(_checkDefined(j_1, 3235690))
; [eval] _checkDefined(j_1, 3235690)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 140 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)) | live]
; [else-branch: 140 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5) | live]
(push) ; 12
; [then-branch: 140 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 140 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_1@439@01, 3235690)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_170)) == none && ((forperm _r_70: Ref [MustInvokeBounded(_r_70)] :: false) && ((forperm _r_70: Ref [MustInvokeUnbounded(_r_70)] :: false) && ((forperm _r_70: Ref [_r_70.MustReleaseBounded] :: false) && (forperm _r_70: Ref [_r_70.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_170)) == none
; [eval] perm(MustTerminate(_cthread_170))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_1@439@01 3235690)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_keep_promise_1 ----------
(declare-const _cthread_171@446@01 $Ref)
(declare-const _caller_measures_171@447@01 Seq<Measure$>)
(declare-const _residue_171@448@01 $Perm)
(declare-const _current_wait_level_171@449@01 $Perm)
(declare-const _cthread_171@450@01 $Ref)
(declare-const _caller_measures_171@451@01 Seq<Measure$>)
(declare-const _residue_171@452@01 $Perm)
(declare-const _current_wait_level_171@453@01 $Perm)
(push) ; 1
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] _cthread_171 != null
(assert (not (= _cthread_171@450@01 $Ref.null)))
(assert (=
  ($Snap.second $t@454@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@454@01))
    ($Snap.second ($Snap.second $t@454@01)))))
(assert (= ($Snap.first ($Snap.second $t@454@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_171), Thread_0())
; [eval] typeof(_cthread_171)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_171@450@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@454@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 ($Snap.combine ($Snap.first $t@455@01) ($Snap.second $t@455@01))))
(assert (= ($Snap.first $t@455@01) $Snap.unit))
; [eval] (forperm _r_78: Ref [_r_78.MustReleaseBounded] :: Level(_r_78) <= _current_wait_level_171)
(assert (=
  ($Snap.second $t@455@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@455@01))
    ($Snap.second ($Snap.second $t@455@01)))))
(assert (= ($Snap.first ($Snap.second $t@455@01)) $Snap.unit))
; [eval] (forperm _r_78: Ref [_r_78.MustReleaseUnbounded] :: Level(_r_78) <= _current_wait_level_171)
(assert (=
  ($Snap.second ($Snap.second $t@455@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@455@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@455@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@455@01))) $Snap.unit))
; [eval] _residue_171 <= _current_wait_level_171
(assert (<= _residue_171@452@01 _current_wait_level_171@453@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@455@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@456@01 $Ref)
; [exec]
; var i_8: Ref
(declare-const i_8@457@01 $Ref)
; [exec]
; var _loop_measures_15: Seq[Measure$]
(declare-const _loop_measures_15@458@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_15: Bool
(declare-const _loop_check_before_15@459@01 Bool)
; [exec]
; var _loop_termination_flag_15: Bool
(declare-const _loop_termination_flag_15@460@01 Bool)
; [exec]
; var _loop_original_must_terminate_15: Perm
(declare-const _loop_original_must_terminate_15@461@01 $Perm)
; [exec]
; var _residue_197: Perm
(declare-const _residue_197@462@01 $Perm)
; [exec]
; var _cwl_171: Perm
(declare-const _cwl_171@463@01 $Perm)
; [exec]
; var _method_measures_171: Seq[Measure$]
(declare-const _method_measures_171@464@01 Seq<Measure$>)
; [exec]
; _method_measures_171 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_8 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_8@465@01 $Ref)
(assert (= i_8@465@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3694441)
(declare-const $t@466@01 $Snap)
(assert (= $t@466@01 $Snap.unit))
; [eval] _isDefined(3694441)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3694441))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3694441))
(assert (_isDefined $Snap.unit 3694441))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_15 := perm(MustTerminate(_cthread_171))
; [eval] perm(MustTerminate(_cthread_171))
(declare-const _loop_original_must_terminate_15@467@01 $Perm)
(assert (= _loop_original_must_terminate_15@467@01 $Perm.No))
; [exec]
; _loop_termination_flag_15 := true
; [exec]
; _loop_check_before_15 := true
(declare-const _loop_measures_15@468@01 Seq<Measure$>)
(declare-const i_8@469@01 $Ref)
(declare-const _loop_check_before_15@470@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 ($Snap.combine ($Snap.first $t@471@01) ($Snap.second $t@471@01))))
(assert (= ($Snap.first $t@471@01) $Snap.unit))
; [eval] (forperm _r_76: Ref [_r_76.MustReleaseBounded] :: Level(_r_76) <= _residue_197)
(assert (=
  ($Snap.second $t@471@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@471@01))
    ($Snap.second ($Snap.second $t@471@01)))))
(assert (= ($Snap.first ($Snap.second $t@471@01)) $Snap.unit))
; [eval] (forperm _r_76: Ref [_r_76.MustReleaseUnbounded] :: Level(_r_76) <= _residue_197)
(assert (=
  ($Snap.second ($Snap.second $t@471@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@471@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@471@01))) $Snap.unit))
; [eval] _residue_171 <= _residue_197
(assert (<= _residue_171@452@01 _residue_197@462@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@471@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@471@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@471@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_8), int())
; [eval] typeof(i_8)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_8@469@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_8@469@01 3694441))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_8@469@01 3694441))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@469@01 3694441)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@469@01 3694441)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@469@01 3694441)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5) | live]
; [else-branch: 141 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 141 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))
(pop) ; 5
(push) ; 5
; [else-branch: 141 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_8), int())
; [eval] typeof(i_8)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_8@465@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_8@465@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_8@465@01 3694441))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_8@465@01 3694441))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@465@01 3694441)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@465@01 3694441)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@465@01 3694441)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 142 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@465@01, 3694441)), 5) | live]
; [else-branch: 142 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@465@01, 3694441)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 142 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@465@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@465@01 3694441)))
    0)))
; [eval] _loop_check_before_15 ==> _loop_termination_flag_15 || (!int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || perm(MustTerminate(_cthread_171)) == none && ((forperm _r_77: Ref [MustInvokeBounded(_r_77)] :: false) && ((forperm _r_77: Ref [MustInvokeUnbounded(_r_77)] :: false) && ((forperm _r_77: Ref [_r_77.MustReleaseBounded] :: false) && (forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | True | live]
; [else-branch: 143 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 143 | True]
; [eval] _loop_termination_flag_15 || (!int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || perm(MustTerminate(_cthread_171)) == none && ((forperm _r_77: Ref [MustInvokeBounded(_r_77)] :: false) && ((forperm _r_77: Ref [MustInvokeUnbounded(_r_77)] :: false) && ((forperm _r_77: Ref [_r_77.MustReleaseBounded] :: false) && (forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_15 ==> (forperm _r_77: Ref [MustInvokeBounded(_r_77)] :: false) && ((forperm _r_77: Ref [MustInvokeUnbounded(_r_77)] :: false) && ((forperm _r_77: Ref [_r_77.MustReleaseBounded] :: false) && (forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_15
(push) ; 4
; [then-branch: 144 | False | dead]
; [else-branch: 144 | True | live]
(push) ; 5
; [else-branch: 144 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@471@01 ($Snap.combine ($Snap.first $t@471@01) ($Snap.second $t@471@01))))
(assert (= ($Snap.first $t@471@01) $Snap.unit))
(assert (=
  ($Snap.second $t@471@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@471@01))
    ($Snap.second ($Snap.second $t@471@01)))))
(assert (= ($Snap.first ($Snap.second $t@471@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@471@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@471@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@471@01))) $Snap.unit))
(assert (<= _residue_171@452@01 _residue_197@462@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@471@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@471@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@471@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_8@469@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_8@469@01 3694441))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@469@01 3694441)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@471@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5) | live]
; [else-branch: 145 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 145 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@469@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)) 5))
; [exec]
; _loop_measures_15 := Seq(Measure$create(true, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8,
;   3694441)))))
; [eval] Seq(Measure$create(true, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))))
; [eval] Measure$create(true, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441))))))
  1))
(declare-const _loop_measures_15@472@01 Seq<Measure$>)
(assert (=
  _loop_measures_15@472@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@469@01 3694441)))))))
; [exec]
; i_8 := __prim__int___box__(int___sub__(int___unbox__(i_8), 1))
; [eval] __prim__int___box__(int___sub__(int___unbox__(i_8), 1))
; [eval] int___sub__(int___unbox__(i_8), 1)
; [eval] int___unbox__(i_8)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_8@469@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_8@469@01))
(push) ; 6
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_8@469@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_8@469@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_8@469@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_8@469@01) 1)))
(declare-const i_8@473@01 $Ref)
(assert (=
  i_8@473@01
  (__prim__int___box__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_8@469@01) 1))))
; [exec]
; inhale _isDefined(3694441)
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 $Snap.unit))
; [eval] _isDefined(3694441)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_15
; [exec]
; _loop_check_before_15 := false
; [exec]
; assert _loop_termination_flag_15 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) ||
;   Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8,
;   3694441))))
; [eval] _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | True | live]
; [else-branch: 146 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 146 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_8@473@01 3694441))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_8@473@01 3694441))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@473@01 3694441)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@473@01 3694441)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@473@01 3694441)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
(push) ; 8
; [then-branch: 147 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)) | live]
; [else-branch: 147 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5) | live]
(push) ; 9
; [then-branch: 147 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 147 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
; [eval] Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))
    (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_8@473@01 3694441)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_8@473@01 3694441)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))
      (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
  (Measure$check $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | True | live]
; [else-branch: 148 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 148 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 149 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)) | live]
; [else-branch: 149 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5) | live]
(push) ; 9
; [then-branch: 149 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 149 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
  (Measure$check $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | True | live]
; [else-branch: 150 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 150 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 151 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)) | live]
; [else-branch: 151 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5) | live]
(push) ; 9
; [then-branch: 151 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 151 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
  (Measure$check $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_15 ==> !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | True | live]
; [else-branch: 152 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 152 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5) || Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_8, 3694441)), 5)
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 153 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)) | live]
; [else-branch: 153 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5) | live]
(push) ; 9
; [then-branch: 153 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 153 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_8@473@01, 3694441)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_15, _cthread_171, int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_8, 3694441)))
; [eval] int___unbox__(_checkDefined(i_8, 3694441))
; [eval] _checkDefined(i_8, 3694441)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)) 5))
  (Measure$check $Snap.unit _loop_measures_15@472@01 _cthread_171@450@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_8@473@01 3694441)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_keep_promise_2 ----------
(declare-const _cthread_172@475@01 $Ref)
(declare-const _caller_measures_172@476@01 Seq<Measure$>)
(declare-const _residue_172@477@01 $Perm)
(declare-const _current_wait_level_172@478@01 $Perm)
(declare-const _cthread_172@479@01 $Ref)
(declare-const _caller_measures_172@480@01 Seq<Measure$>)
(declare-const _residue_172@481@01 $Perm)
(declare-const _current_wait_level_172@482@01 $Perm)
(push) ; 1
(declare-const $t@483@01 $Snap)
(assert (= $t@483@01 ($Snap.combine ($Snap.first $t@483@01) ($Snap.second $t@483@01))))
(assert (= ($Snap.first $t@483@01) $Snap.unit))
; [eval] _cthread_172 != null
(assert (not (= _cthread_172@479@01 $Ref.null)))
(assert (=
  ($Snap.second $t@483@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@483@01))
    ($Snap.second ($Snap.second $t@483@01)))))
(assert (= ($Snap.first ($Snap.second $t@483@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_172@479@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@483@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 ($Snap.combine ($Snap.first $t@484@01) ($Snap.second $t@484@01))))
(assert (= ($Snap.first $t@484@01) $Snap.unit))
; [eval] (forperm _r_83: Ref [_r_83.MustReleaseBounded] :: Level(_r_83) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@484@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@484@01))
    ($Snap.second ($Snap.second $t@484@01)))))
(assert (= ($Snap.first ($Snap.second $t@484@01)) $Snap.unit))
; [eval] (forperm _r_83: Ref [_r_83.MustReleaseUnbounded] :: Level(_r_83) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@484@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@484@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@484@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_172@481@01 _current_wait_level_172@482@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@484@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@485@01 $Ref)
; [exec]
; var i_9: Ref
(declare-const i_9@486@01 $Ref)
; [exec]
; var j_2: Ref
(declare-const j_2@487@01 $Ref)
; [exec]
; var _loop_measures_16: Seq[Measure$]
(declare-const _loop_measures_16@488@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_16: Bool
(declare-const _loop_check_before_16@489@01 Bool)
; [exec]
; var _loop_termination_flag_16: Bool
(declare-const _loop_termination_flag_16@490@01 Bool)
; [exec]
; var _loop_original_must_terminate_16: Perm
(declare-const _loop_original_must_terminate_16@491@01 $Perm)
; [exec]
; var _residue_198: Perm
(declare-const _residue_198@492@01 $Perm)
; [exec]
; var _cwl_172: Perm
(declare-const _cwl_172@493@01 $Perm)
; [exec]
; var _method_measures_172: Seq[Measure$]
(declare-const _method_measures_172@494@01 Seq<Measure$>)
; [exec]
; _method_measures_172 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_9 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_9@495@01 $Ref)
(assert (= i_9@495@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3759977)
(declare-const $t@496@01 $Snap)
(assert (= $t@496@01 $Snap.unit))
; [eval] _isDefined(3759977)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3759977))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3759977))
(assert (_isDefined $Snap.unit 3759977))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_16 := perm(MustTerminate(_cthread_172))
; [eval] perm(MustTerminate(_cthread_172))
(declare-const _loop_original_must_terminate_16@497@01 $Perm)
(assert (= _loop_original_must_terminate_16@497@01 $Perm.No))
; [exec]
; _loop_termination_flag_16 := true
; [exec]
; _loop_check_before_16 := true
(declare-const _loop_measures_16@498@01 Seq<Measure$>)
(declare-const j_2@499@01 $Ref)
(declare-const _loop_check_before_16@500@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@501@01 $Snap)
(assert (= $t@501@01 ($Snap.combine ($Snap.first $t@501@01) ($Snap.second $t@501@01))))
(assert (= ($Snap.first $t@501@01) $Snap.unit))
; [eval] (forperm _r_81: Ref [_r_81.MustReleaseBounded] :: Level(_r_81) <= _residue_198)
(assert (=
  ($Snap.second $t@501@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@501@01))
    ($Snap.second ($Snap.second $t@501@01)))))
(assert (= ($Snap.first ($Snap.second $t@501@01)) $Snap.unit))
; [eval] (forperm _r_81: Ref [_r_81.MustReleaseUnbounded] :: Level(_r_81) <= _residue_198)
(assert (=
  ($Snap.second ($Snap.second $t@501@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@501@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@501@01))) $Snap.unit))
; [eval] _residue_172 <= _residue_198
(assert (<= _residue_172@481@01 _residue_198@492@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@501@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@501@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@501@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_9@495@01 3759977))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_9@495@01 3759977))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_9@495@01 3759977)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_9@495@01 3759977)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_9@495@01 3759977)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
; [else-branch: 154 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 154 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_9@495@01 3759977))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_9@495@01 3759977))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_9@495@01 3759977)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_9@495@01 3759977)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_9@495@01 3759977)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
; [else-branch: 155 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 155 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))
    0)))
; [eval] _loop_check_before_16 ==> _loop_termination_flag_16 || (!int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || perm(MustTerminate(_cthread_172)) == none && ((forperm _r_82: Ref [MustInvokeBounded(_r_82)] :: false) && ((forperm _r_82: Ref [MustInvokeUnbounded(_r_82)] :: false) && ((forperm _r_82: Ref [_r_82.MustReleaseBounded] :: false) && (forperm _r_82: Ref [_r_82.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | True | live]
; [else-branch: 156 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 156 | True]
; [eval] _loop_termination_flag_16 || (!int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || perm(MustTerminate(_cthread_172)) == none && ((forperm _r_82: Ref [MustInvokeBounded(_r_82)] :: false) && ((forperm _r_82: Ref [MustInvokeUnbounded(_r_82)] :: false) && ((forperm _r_82: Ref [_r_82.MustReleaseBounded] :: false) && (forperm _r_82: Ref [_r_82.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_16 ==> (forperm _r_82: Ref [MustInvokeBounded(_r_82)] :: false) && ((forperm _r_82: Ref [MustInvokeUnbounded(_r_82)] :: false) && ((forperm _r_82: Ref [_r_82.MustReleaseBounded] :: false) && (forperm _r_82: Ref [_r_82.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_16
(push) ; 4
; [then-branch: 157 | False | dead]
; [else-branch: 157 | True | live]
(push) ; 5
; [else-branch: 157 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@501@01 ($Snap.combine ($Snap.first $t@501@01) ($Snap.second $t@501@01))))
(assert (= ($Snap.first $t@501@01) $Snap.unit))
(assert (=
  ($Snap.second $t@501@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@501@01))
    ($Snap.second ($Snap.second $t@501@01)))))
(assert (= ($Snap.first ($Snap.second $t@501@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@501@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@501@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@501@01))) $Snap.unit))
(assert (<= _residue_172@481@01 _residue_198@492@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@501@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@501@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@501@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@501@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
; [else-branch: 158 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 158 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
; [exec]
; _loop_measures_16 := Seq(Measure$create(true, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9,
;   3759977)))))
; [eval] Seq(Measure$create(true, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))))
; [eval] Measure$create(true, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))))
  1))
(declare-const _loop_measures_16@502@01 Seq<Measure$>)
(assert (=
  _loop_measures_16@502@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))))
; [exec]
; j_2 := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const j_2@503@01 $Ref)
(assert (= j_2@503@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; inhale _isDefined(3301226)
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 $Snap.unit))
; [eval] _isDefined(3301226)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 3301226))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301226))
(assert (_isDefined $Snap.unit 3301226))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_16
; [exec]
; _loop_check_before_16 := false
; [exec]
; assert _loop_termination_flag_16 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) ||
;   Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9,
;   3759977))))
; [eval] _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | True | live]
; [else-branch: 159 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 159 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 160 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | live]
; [else-branch: 160 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
(push) ; 9
; [then-branch: 160 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 160 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
; [eval] Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
    (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
  (Measure$check $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | True | live]
; [else-branch: 161 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 161 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 162 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | live]
; [else-branch: 162 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
(push) ; 9
; [then-branch: 162 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 162 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
  (Measure$check $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | True | live]
; [else-branch: 163 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 163 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 164 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | live]
; [else-branch: 164 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
(push) ; 9
; [then-branch: 164 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 164 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
  (Measure$check $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_16 ==> !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | True | live]
; [else-branch: 165 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 165 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5) || Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_9, 3759977)), 5)
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 166 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)) | live]
; [else-branch: 166 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5) | live]
(push) ; 9
; [then-branch: 166 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 166 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_9@495@01, 3759977)), 5)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_16, _cthread_172, int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_9, 3759977)))
; [eval] int___unbox__(_checkDefined(i_9, 3759977))
; [eval] _checkDefined(i_9, 3759977)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)) 5))
  (Measure$check $Snap.unit _loop_measures_16@502@01 _cthread_172@479@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_9@495@01 3759977)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_keep_promise_3 ----------
(declare-const _cthread_173@505@01 $Ref)
(declare-const _caller_measures_173@506@01 Seq<Measure$>)
(declare-const _residue_173@507@01 $Perm)
(declare-const _current_wait_level_173@508@01 $Perm)
(declare-const _cthread_173@509@01 $Ref)
(declare-const _caller_measures_173@510@01 Seq<Measure$>)
(declare-const _residue_173@511@01 $Perm)
(declare-const _current_wait_level_173@512@01 $Perm)
(push) ; 1
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 ($Snap.combine ($Snap.first $t@513@01) ($Snap.second $t@513@01))))
(assert (= ($Snap.first $t@513@01) $Snap.unit))
; [eval] _cthread_173 != null
(assert (not (= _cthread_173@509@01 $Ref.null)))
(assert (=
  ($Snap.second $t@513@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@513@01))
    ($Snap.second ($Snap.second $t@513@01)))))
(assert (= ($Snap.first ($Snap.second $t@513@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_173@509@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@513@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@514@01 $Snap)
(assert (= $t@514@01 ($Snap.combine ($Snap.first $t@514@01) ($Snap.second $t@514@01))))
(assert (= ($Snap.first $t@514@01) $Snap.unit))
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: Level(_r_90) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@514@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@514@01))
    ($Snap.second ($Snap.second $t@514@01)))))
(assert (= ($Snap.first ($Snap.second $t@514@01)) $Snap.unit))
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: Level(_r_90) <= _current_wait_level_173)
(assert (=
  ($Snap.second ($Snap.second $t@514@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@514@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@514@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@514@01))) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_173@511@01 _current_wait_level_173@512@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@514@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@515@01 $Ref)
; [exec]
; var i_10: Ref
(declare-const i_10@516@01 $Ref)
; [exec]
; var j_3: Ref
(declare-const j_3@517@01 $Ref)
; [exec]
; var _loop_measures_17: Seq[Measure$]
(declare-const _loop_measures_17@518@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_17: Bool
(declare-const _loop_check_before_17@519@01 Bool)
; [exec]
; var _loop_termination_flag_17: Bool
(declare-const _loop_termination_flag_17@520@01 Bool)
; [exec]
; var _loop_original_must_terminate_17: Perm
(declare-const _loop_original_must_terminate_17@521@01 $Perm)
; [exec]
; var _residue_199: Perm
(declare-const _residue_199@522@01 $Perm)
; [exec]
; var _loop_measures_18: Seq[Measure$]
(declare-const _loop_measures_18@523@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_18: Bool
(declare-const _loop_check_before_18@524@01 Bool)
; [exec]
; var _loop_termination_flag_18: Bool
(declare-const _loop_termination_flag_18@525@01 Bool)
; [exec]
; var _loop_original_must_terminate_18: Perm
(declare-const _loop_original_must_terminate_18@526@01 $Perm)
; [exec]
; var _residue_200: Perm
(declare-const _residue_200@527@01 $Perm)
; [exec]
; var _cwl_173: Perm
(declare-const _cwl_173@528@01 $Perm)
; [exec]
; var _method_measures_173: Seq[Measure$]
(declare-const _method_measures_173@529@01 Seq<Measure$>)
; [exec]
; _method_measures_173 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_10 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_10@530@01 $Ref)
(assert (= i_10@530@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(808542057)
(declare-const $t@531@01 $Snap)
(assert (= $t@531@01 $Snap.unit))
; [eval] _isDefined(808542057)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 808542057))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 808542057))
(assert (_isDefined $Snap.unit 808542057))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_17 := perm(MustTerminate(_cthread_173))
; [eval] perm(MustTerminate(_cthread_173))
(declare-const _loop_original_must_terminate_17@532@01 $Perm)
(assert (= _loop_original_must_terminate_17@532@01 $Perm.No))
; [exec]
; _loop_termination_flag_17 := true
; [exec]
; _loop_check_before_17 := true
(declare-const _loop_measures_17@533@01 Seq<Measure$>)
(declare-const i_10@534@01 $Ref)
(declare-const j_3@535@01 $Ref)
(declare-const _loop_original_must_terminate_18@536@01 $Perm)
(declare-const _loop_termination_flag_18@537@01 Bool)
(declare-const _loop_check_before_18@538@01 Bool)
(declare-const _loop_measures_18@539@01 Seq<Measure$>)
(declare-const _loop_check_before_17@540@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 ($Snap.combine ($Snap.first $t@541@01) ($Snap.second $t@541@01))))
(assert (= ($Snap.first $t@541@01) $Snap.unit))
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseBounded] :: Level(_r_88) <= _residue_199)
(assert (=
  ($Snap.second $t@541@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@541@01))
    ($Snap.second ($Snap.second $t@541@01)))))
(assert (= ($Snap.first ($Snap.second $t@541@01)) $Snap.unit))
; [eval] (forperm _r_88: Ref [_r_88.MustReleaseUnbounded] :: Level(_r_88) <= _residue_199)
(assert (=
  ($Snap.second ($Snap.second $t@541@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@541@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@541@01))) $Snap.unit))
; [eval] _residue_173 <= _residue_199
(assert (<= _residue_173@511@01 _residue_199@522@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@541@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_10), int())
; [eval] typeof(i_10)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_10@534@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5)
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_10@534@01 808542057))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_10@534@01 808542057))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@534@01 808542057)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@534@01 808542057)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@534@01 808542057)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5) | live]
; [else-branch: 167 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 167 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057)))
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))
(pop) ; 5
(push) ; 5
; [else-branch: 167 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_10), int())
; [eval] typeof(i_10)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_10@530@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_10@530@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5)
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_10@530@01 808542057))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_10@530@01 808542057))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@530@01 808542057)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@530@01 808542057)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@530@01 808542057)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@530@01, 808542057)), 5) | live]
; [else-branch: 168 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@530@01, 808542057)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 168 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@530@01, 808542057)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057)))
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@530@01 808542057)))
    0)))
; [eval] _loop_check_before_17 ==> _loop_termination_flag_17 || (!int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_89: Ref [MustInvokeBounded(_r_89)] :: false) && ((forperm _r_89: Ref [MustInvokeUnbounded(_r_89)] :: false) && ((forperm _r_89: Ref [_r_89.MustReleaseBounded] :: false) && (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | True | live]
; [else-branch: 169 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 169 | True]
; [eval] _loop_termination_flag_17 || (!int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_89: Ref [MustInvokeBounded(_r_89)] :: false) && ((forperm _r_89: Ref [MustInvokeUnbounded(_r_89)] :: false) && ((forperm _r_89: Ref [_r_89.MustReleaseBounded] :: false) && (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_17 ==> (forperm _r_89: Ref [MustInvokeBounded(_r_89)] :: false) && ((forperm _r_89: Ref [MustInvokeUnbounded(_r_89)] :: false) && ((forperm _r_89: Ref [_r_89.MustReleaseBounded] :: false) && (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_17
(push) ; 4
; [then-branch: 170 | False | dead]
; [else-branch: 170 | True | live]
(push) ; 5
; [else-branch: 170 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@541@01 ($Snap.combine ($Snap.first $t@541@01) ($Snap.second $t@541@01))))
(assert (= ($Snap.first $t@541@01) $Snap.unit))
(assert (=
  ($Snap.second $t@541@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@541@01))
    ($Snap.second ($Snap.second $t@541@01)))))
(assert (= ($Snap.first ($Snap.second $t@541@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@541@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@541@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@541@01))) $Snap.unit))
(assert (<= _residue_173@511@01 _residue_199@522@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@541@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_10@534@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_10@534@01 808542057))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_10@534@01 808542057)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5)
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5)
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_10, 808542057)), 5)
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5) | live]
; [else-branch: 171 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 171 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_10@534@01, 808542057)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)) 5))
; [exec]
; _loop_measures_17 := Seq(Measure$create(true, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(i_10,
;   808542057)))))
; [eval] Seq(Measure$create(true, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057)))))
; [eval] Measure$create(true, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_10, 808542057)))
; [eval] int___unbox__(_checkDefined(i_10, 808542057))
; [eval] _checkDefined(i_10, 808542057)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057))))))
  1))
(declare-const _loop_measures_17@542@01 Seq<Measure$>)
(assert (=
  _loop_measures_17@542@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_10@534@01 808542057)))))))
; [exec]
; i_10 := __prim__int___box__(int___add__(int___unbox__(i_10), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_10), 1))
; [eval] int___add__(int___unbox__(i_10), 1)
; [eval] int___unbox__(i_10)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_10@534@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_10@534@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_10@534@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_10@534@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_10@534@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_10@534@01) 1)))
(declare-const i_10@543@01 $Ref)
(assert (=
  i_10@543@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_10@534@01) 1))))
; [exec]
; inhale _isDefined(808542057)
(declare-const $t@544@01 $Snap)
(assert (= $t@544@01 $Snap.unit))
; [eval] _isDefined(808542057)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; j_3 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(declare-const j_3@545@01 $Ref)
(assert (= j_3@545@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3366762)
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 $Snap.unit))
; [eval] _isDefined(3366762)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 3366762))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366762))
(assert (_isDefined $Snap.unit 3366762))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_18 := perm(MustTerminate(_cthread_173))
; [eval] perm(MustTerminate(_cthread_173))
(declare-const _loop_original_must_terminate_18@547@01 $Perm)
(assert (= _loop_original_must_terminate_18@547@01 $Perm.Write))
; [exec]
; _loop_termination_flag_18 := true
; [exec]
; _loop_check_before_18 := true
(declare-const _loop_measures_18@548@01 Seq<Measure$>)
(declare-const j_3@549@01 $Ref)
(declare-const _loop_check_before_18@550@01 Bool)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 ($Snap.combine ($Snap.first $t@551@01) ($Snap.second $t@551@01))))
(assert (= ($Snap.first $t@551@01) $Snap.unit))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) <= _residue_200)
(assert (=
  ($Snap.second $t@551@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@551@01))
    ($Snap.second ($Snap.second $t@551@01)))))
(assert (= ($Snap.first ($Snap.second $t@551@01)) $Snap.unit))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) <= _residue_200)
(assert (=
  ($Snap.second ($Snap.second $t@551@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@551@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@551@01))) $Snap.unit))
; [eval] _residue_199 <= _residue_200
(assert (<= _residue_199@522@01 _residue_200@527@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@551@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@551@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@551@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(j_3), int())
; [eval] typeof(j_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> j_3@549@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_3@549@01 3366762))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_3@549@01 3366762))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@549@01 3366762)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@549@01 3366762)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@549@01 3366762)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))
(push) ; 7
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
(pop) ; 7
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5) | live]
; [else-branch: 172 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 172 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))
(pop) ; 8
(push) ; 8
; [else-branch: 172 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
  $Snap.unit))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] issubtype(typeof(j_3), int())
; [eval] typeof(j_3)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> j_3@545@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> j_3@545@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_3@545@01 3366762))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_3@545@01 3366762))
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@545@01 3366762)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@545@01 3366762)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@545@01 3366762)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762))))
(push) ; 7
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5))
(pop) ; 7
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@545@01, 3366762)), 5) | live]
; [else-branch: 173 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@545@01, 3366762)), 5)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 173 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@545@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5))
(push) ; 7
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@545@01 3366762)))
    0)))
; [eval] _loop_check_before_18 ==> _loop_termination_flag_18 || (!int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_87: Ref [MustInvokeBounded(_r_87)] :: false) && ((forperm _r_87: Ref [MustInvokeUnbounded(_r_87)] :: false) && ((forperm _r_87: Ref [_r_87.MustReleaseBounded] :: false) && (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: false)))))
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | True | live]
; [else-branch: 174 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 174 | True]
; [eval] _loop_termination_flag_18 || (!int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || perm(MustTerminate(_cthread_173)) == none && ((forperm _r_87: Ref [MustInvokeBounded(_r_87)] :: false) && ((forperm _r_87: Ref [MustInvokeUnbounded(_r_87)] :: false) && ((forperm _r_87: Ref [_r_87.MustReleaseBounded] :: false) && (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: false)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !_loop_check_before_18 ==> (forperm _r_87: Ref [MustInvokeBounded(_r_87)] :: false) && ((forperm _r_87: Ref [MustInvokeUnbounded(_r_87)] :: false) && ((forperm _r_87: Ref [_r_87.MustReleaseBounded] :: false) && (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_18
(push) ; 7
; [then-branch: 175 | False | dead]
; [else-branch: 175 | True | live]
(push) ; 8
; [else-branch: 175 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (= $t@551@01 ($Snap.combine ($Snap.first $t@551@01) ($Snap.second $t@551@01))))
(assert (= ($Snap.first $t@551@01) $Snap.unit))
(assert (=
  ($Snap.second $t@551@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@551@01))
    ($Snap.second ($Snap.second $t@551@01)))))
(assert (= ($Snap.first ($Snap.second $t@551@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@551@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@551@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@551@01))) $Snap.unit))
(assert (<= _residue_199@522@01 _residue_200@527@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@551@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@551@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@551@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> j_3@549@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit j_3@549@01 3366762))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@549@01 3366762)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@551@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5) | live]
; [else-branch: 176 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5)) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 176 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@549@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)) 5))
; [exec]
; _loop_measures_18 := Seq(Measure$create(true, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3,
;   3366762)))))
; [eval] Seq(Measure$create(true, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))))
; [eval] Measure$create(true, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762))))))
  1))
(declare-const _loop_measures_18@552@01 Seq<Measure$>)
(assert (=
  _loop_measures_18@552@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@549@01 3366762)))))))
; [exec]
; j_3 := __prim__int___box__(int___sub__(int___unbox__(j_3), 1))
; [eval] __prim__int___box__(int___sub__(int___unbox__(j_3), 1))
; [eval] int___sub__(int___unbox__(j_3), 1)
; [eval] int___unbox__(j_3)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit j_3@549@01))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit j_3@549@01))
(push) ; 9
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit j_3@549@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit j_3@549@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit j_3@549@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit j_3@549@01) 1)))
(declare-const j_3@553@01 $Ref)
(assert (=
  j_3@553@01
  (__prim__int___box__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit j_3@549@01) 1))))
; [exec]
; inhale _isDefined(3366762)
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 $Snap.unit))
; [eval] _isDefined(3366762)
(push) ; 9
(pop) ; 9
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_18
; [exec]
; _loop_check_before_18 := false
; [exec]
; assert _loop_termination_flag_18 ==>
;   !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) ||
;   Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3,
;   3366762))))
; [eval] _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | True | live]
; [else-branch: 177 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 177 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_3@553@01 3366762))
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit j_3@553@01 3366762))
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@553@01 3366762)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@553@01 3366762)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@553@01 3366762)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(push) ; 11
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
(pop) ; 11
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
(push) ; 11
; [then-branch: 178 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)) | live]
; [else-branch: 178 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5) | live]
(push) ; 12
; [then-branch: 178 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)))
(pop) ; 12
(push) ; 12
; [else-branch: 178 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
; [eval] Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))
    (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit j_3@553@01 3366762)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit j_3@553@01 3366762)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))
      (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)))))
(push) ; 9
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
  (Measure$check $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | True | live]
; [else-branch: 179 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 179 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 180 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)) | live]
; [else-branch: 180 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5) | live]
(push) ; 12
; [then-branch: 180 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 180 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
  (Measure$check $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | True | live]
; [else-branch: 181 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 181 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 182 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)) | live]
; [else-branch: 182 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5) | live]
(push) ; 12
; [then-branch: 182 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 182 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
  (Measure$check $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _loop_termination_flag_18 ==> !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | True | live]
; [else-branch: 183 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 183 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5) || Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] !int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(j_3, 3366762)), 5)
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 184 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)) | live]
; [else-branch: 184 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5) | live]
(push) ; 12
; [then-branch: 184 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 184 | int___lt__(_, int___unbox__(_, _checkDefined(_, j_3@553@01, 3366762)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] Measure$check(_loop_measures_18, _cthread_173, int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(j_3, 3366762)))
; [eval] int___unbox__(_checkDefined(j_3, 3366762))
; [eval] _checkDefined(j_3, 3366762)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762))))
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)) 5))
  (Measure$check $Snap.unit _loop_measures_18@552@01 _cthread_173@509@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit j_3@553@01 3366762)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_terminate_keep_promise_4 ----------
(declare-const _cthread_174@555@01 $Ref)
(declare-const _caller_measures_174@556@01 Seq<Measure$>)
(declare-const _residue_174@557@01 $Perm)
(declare-const _current_wait_level_174@558@01 $Perm)
(declare-const _cthread_174@559@01 $Ref)
(declare-const _caller_measures_174@560@01 Seq<Measure$>)
(declare-const _residue_174@561@01 $Perm)
(declare-const _current_wait_level_174@562@01 $Perm)
(push) ; 1
(declare-const $t@563@01 $Snap)
(assert (= $t@563@01 ($Snap.combine ($Snap.first $t@563@01) ($Snap.second $t@563@01))))
(assert (= ($Snap.first $t@563@01) $Snap.unit))
; [eval] _cthread_174 != null
(assert (not (= _cthread_174@559@01 $Ref.null)))
(assert (=
  ($Snap.second $t@563@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@563@01))
    ($Snap.second ($Snap.second $t@563@01)))))
(assert (= ($Snap.first ($Snap.second $t@563@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_174), Thread_0())
; [eval] typeof(_cthread_174)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_174@559@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@563@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@564@01 $Snap)
(assert (= $t@564@01 ($Snap.combine ($Snap.first $t@564@01) ($Snap.second $t@564@01))))
(assert (= ($Snap.first $t@564@01) $Snap.unit))
; [eval] (forperm _r_95: Ref [_r_95.MustReleaseBounded] :: Level(_r_95) <= _current_wait_level_174)
(assert (=
  ($Snap.second $t@564@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@564@01))
    ($Snap.second ($Snap.second $t@564@01)))))
(assert (= ($Snap.first ($Snap.second $t@564@01)) $Snap.unit))
; [eval] (forperm _r_95: Ref [_r_95.MustReleaseUnbounded] :: Level(_r_95) <= _current_wait_level_174)
(assert (=
  ($Snap.second ($Snap.second $t@564@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@564@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@564@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@564@01))) $Snap.unit))
; [eval] _residue_174 <= _current_wait_level_174
(assert (<= _residue_174@561@01 _current_wait_level_174@562@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@564@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@565@01 $Ref)
; [exec]
; var b: Ref
(declare-const b@566@01 $Ref)
; [exec]
; var _loop_measures_19: Seq[Measure$]
(declare-const _loop_measures_19@567@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_19: Bool
(declare-const _loop_check_before_19@568@01 Bool)
; [exec]
; var _loop_termination_flag_19: Bool
(declare-const _loop_termination_flag_19@569@01 Bool)
; [exec]
; var _loop_original_must_terminate_19: Perm
(declare-const _loop_original_must_terminate_19@570@01 $Perm)
; [exec]
; var _residue_201: Perm
(declare-const _residue_201@571@01 $Perm)
; [exec]
; var _cwl_174: Perm
(declare-const _cwl_174@572@01 $Perm)
; [exec]
; var _method_measures_174: Seq[Measure$]
(declare-const _method_measures_174@573@01 Seq<Measure$>)
; [exec]
; _method_measures_174 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; b := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 3
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 3
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const b@574@01 $Ref)
(assert (= b@574@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(98)
(declare-const $t@575@01 $Snap)
(assert (= $t@575@01 $Snap.unit))
; [eval] _isDefined(98)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 98))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 98))
(assert (_isDefined $Snap.unit 98))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_19 := perm(MustTerminate(_cthread_174))
; [eval] perm(MustTerminate(_cthread_174))
(declare-const _loop_original_must_terminate_19@576@01 $Perm)
(assert (= _loop_original_must_terminate_19@576@01 $Perm.No))
; [exec]
; _loop_termination_flag_19 := bool___unbox__(_checkDefined(b, 98)) ||
;   !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98)) || !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@574@01 98))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@574@01 98))
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@574@01 98)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@574@01 98)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@574@01 98)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))
(push) ; 3
; [then-branch: 185 | bool___unbox__(_, _checkDefined(_, b@574@01, 98)) | live]
; [else-branch: 185 | !(bool___unbox__(_, _checkDefined(_, b@574@01, 98))) | live]
(push) ; 4
; [then-branch: 185 | bool___unbox__(_, _checkDefined(_, b@574@01, 98))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))
(pop) ; 4
(push) ; 4
; [else-branch: 185 | !(bool___unbox__(_, _checkDefined(_, b@574@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))
(declare-const _loop_termination_flag_19@577@01 Bool)
(assert (=
  _loop_termination_flag_19@577@01
  (or
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))
    (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))))
; [exec]
; _loop_check_before_19 := true
(declare-const _loop_measures_19@578@01 Seq<Measure$>)
(declare-const b@579@01 $Ref)
(declare-const _loop_check_before_19@580@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@581@01 $Snap)
(assert (= $t@581@01 ($Snap.combine ($Snap.first $t@581@01) ($Snap.second $t@581@01))))
(assert (= ($Snap.first $t@581@01) $Snap.unit))
; [eval] (forperm _r_93: Ref [_r_93.MustReleaseBounded] :: Level(_r_93) <= _residue_201)
(assert (=
  ($Snap.second $t@581@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@581@01))
    ($Snap.second ($Snap.second $t@581@01)))))
(assert (= ($Snap.first ($Snap.second $t@581@01)) $Snap.unit))
; [eval] (forperm _r_93: Ref [_r_93.MustReleaseUnbounded] :: Level(_r_93) <= _residue_201)
(assert (=
  ($Snap.second ($Snap.second $t@581@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@581@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@581@01))) $Snap.unit))
; [eval] _residue_174 <= _residue_201
(assert (<= _residue_174@561@01 _residue_201@571@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@581@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> b@579@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@579@01 98))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@579@01 98))
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@579@01 98)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@579@01 98)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@579@01 98)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@579@01 98))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | live]
; [else-branch: 186 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 186 | bool___unbox__(_, _checkDefined(_, b@579@01, 98))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
; [then-branch: 187 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | dead]
; [else-branch: 187 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | live]
(push) ; 5
; [else-branch: 187 | bool___unbox__(_, _checkDefined(_, b@579@01, 98))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 186 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | live]
; [else-branch: 188 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 188 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98)))]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> b@574@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@574@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(_checkDefined(b, 98)) ==> true
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | bool___unbox__(_, _checkDefined(_, b@574@01, 98)) | live]
; [else-branch: 189 | !(bool___unbox__(_, _checkDefined(_, b@574@01, 98))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 189 | bool___unbox__(_, _checkDefined(_, b@574@01, 98))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))
; [eval] !bool___unbox__(_checkDefined(b, 98)) ==> true
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 190 | !(bool___unbox__(_, _checkDefined(_, b@574@01, 98))) | dead]
; [else-branch: 190 | bool___unbox__(_, _checkDefined(_, b@574@01, 98)) | live]
(push) ; 5
; [else-branch: 190 | bool___unbox__(_, _checkDefined(_, b@574@01, 98))]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] _loop_check_before_19 ==> _loop_termination_flag_19 || (!bool___unbox__(_checkDefined(b, 98)) || perm(MustTerminate(_cthread_174)) == none && ((forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | True | live]
; [else-branch: 191 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 191 | True]
; [eval] _loop_termination_flag_19 || (!bool___unbox__(_checkDefined(b, 98)) || perm(MustTerminate(_cthread_174)) == none && ((forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 192 | _loop_termination_flag_19@577@01 | live]
; [else-branch: 192 | !(_loop_termination_flag_19@577@01) | live]
(push) ; 7
; [then-branch: 192 | _loop_termination_flag_19@577@01]
(assert _loop_termination_flag_19@577@01)
(pop) ; 7
(push) ; 7
; [else-branch: 192 | !(_loop_termination_flag_19@577@01)]
(assert (not _loop_termination_flag_19@577@01))
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 193 | !(bool___unbox__(_, _checkDefined(_, b@574@01, 98))) | live]
; [else-branch: 193 | bool___unbox__(_, _checkDefined(_, b@574@01, 98)) | live]
(push) ; 9
; [then-branch: 193 | !(bool___unbox__(_, _checkDefined(_, b@574@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))
(pop) ; 9
(push) ; 9
; [else-branch: 193 | bool___unbox__(_, _checkDefined(_, b@574@01, 98))]
; [eval] perm(MustTerminate(_cthread_174)) == none && ((forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_174)) == none
; [eval] perm(MustTerminate(_cthread_174))
(push) ; 10
; [then-branch: 194 | False | live]
; [else-branch: 194 | True | live]
(push) ; 11
; [then-branch: 194 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 194 | True]
; [eval] (forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false)
(push) ; 12
; [then-branch: 195 | False | live]
; [else-branch: 195 | True | live]
(push) ; 13
; [then-branch: 195 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 195 | True]
; [eval] (forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false)
(push) ; 14
; [then-branch: 196 | False | live]
; [else-branch: 196 | True | live]
(push) ; 15
; [then-branch: 196 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 196 | True]
; [eval] (forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 197 | False | live]
; [else-branch: 197 | True | live]
(push) ; 17
; [then-branch: 197 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 197 | True]
; [eval] (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not _loop_termination_flag_19@577@01)
  (and
    (not _loop_termination_flag_19@577@01)
    (or
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))
      (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98)))))))
(assert (or (not _loop_termination_flag_19@577@01) _loop_termination_flag_19@577@01))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (=>
    (not _loop_termination_flag_19@577@01)
    (and
      (not _loop_termination_flag_19@577@01)
      (or
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))
        (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@574@01 98))))))
  (or (not _loop_termination_flag_19@577@01) _loop_termination_flag_19@577@01)))
; [eval] !_loop_check_before_19 ==> (forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_19
(push) ; 4
; [then-branch: 198 | False | dead]
; [else-branch: 198 | True | live]
(push) ; 5
; [else-branch: 198 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
(assert (= $t@581@01 ($Snap.combine ($Snap.first $t@581@01) ($Snap.second $t@581@01))))
(assert (= ($Snap.first $t@581@01) $Snap.unit))
(assert (=
  ($Snap.second $t@581@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@581@01))
    ($Snap.second ($Snap.second $t@581@01)))))
(assert (= ($Snap.first ($Snap.second $t@581@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@581@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@581@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@581@01))) $Snap.unit))
(assert (<= _residue_174@561@01 _residue_201@571@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@581@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> b@579@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
(assert (_checkDefined%precondition $Snap.unit b@579@01 98))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@579@01 98)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | live]
; [else-branch: 199 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 199 | bool___unbox__(_, _checkDefined(_, b@579@01, 98))]
; [exec]
; _loop_measures_19 := Seq(Measure$create(bool___unbox__(_checkDefined(b, 98)),
;   _cthread_174, 1), Measure$create(!bool___unbox__(_checkDefined(b, 98)), _cthread_174,
;   1))
; [eval] Seq(Measure$create(bool___unbox__(_checkDefined(b, 98)), _cthread_174, 1), Measure$create(!bool___unbox__(_checkDefined(b, 98)), _cthread_174, 1))
; [eval] Measure$create(bool___unbox__(_checkDefined(b, 98)), _cthread_174, 1)
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
; [eval] Measure$create(!bool___unbox__(_checkDefined(b, 98)), _cthread_174, 1)
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Measure$create<Measure$> (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98)) _cthread_174@559@01 1))
      (Seq_singleton (Measure$create<Measure$> (not
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))) _cthread_174@559@01 1))))
  2))
(declare-const _loop_measures_19@582@01 Seq<Measure$>)
(assert (=
  _loop_measures_19@582@01
  (Seq_append
    (Seq_singleton (Measure$create<Measure$> (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98)) _cthread_174@559@01 1))
    (Seq_singleton (Measure$create<Measure$> (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))) _cthread_174@559@01 1)))))
; [exec]
; b := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 6
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 6
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const b@583@01 $Ref)
(assert (= b@583@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(98)
(declare-const $t@584@01 $Snap)
(assert (= $t@584@01 $Snap.unit))
; [eval] _isDefined(98)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_19
; [exec]
; _loop_check_before_19 := false
; [exec]
; assert _loop_termination_flag_19 ==>
;   !bool___unbox__(_checkDefined(b, 98)) ||
;   (bool___unbox__(_checkDefined(b, 98)) &&
;   Measure$check(_loop_measures_19, _cthread_174, 1) ||
;   !bool___unbox__(_checkDefined(b, 98)) &&
;   Measure$check(_loop_measures_19, _cthread_174, 1))
; [eval] _loop_termination_flag_19 ==> !bool___unbox__(_checkDefined(b, 98)) || (bool___unbox__(_checkDefined(b, 98)) && Measure$check(_loop_measures_19, _cthread_174, 1) || !bool___unbox__(_checkDefined(b, 98)) && Measure$check(_loop_measures_19, _cthread_174, 1))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not _loop_termination_flag_19@577@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not _loop_termination_flag_19@577@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | _loop_termination_flag_19@577@01 | live]
; [else-branch: 200 | !(_loop_termination_flag_19@577@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 200 | _loop_termination_flag_19@577@01]
(assert _loop_termination_flag_19@577@01)
; [eval] !bool___unbox__(_checkDefined(b, 98)) || (bool___unbox__(_checkDefined(b, 98)) && Measure$check(_loop_measures_19, _cthread_174, 1) || !bool___unbox__(_checkDefined(b, 98)) && Measure$check(_loop_measures_19, _cthread_174, 1))
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@583@01 98))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@583@01 98))
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(push) ; 8
; [then-branch: 201 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98))) | live]
; [else-branch: 201 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) | live]
(push) ; 9
; [then-branch: 201 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(pop) ; 9
(push) ; 9
; [else-branch: 201 | bool___unbox__(_, _checkDefined(_, b@583@01, 98))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
; [eval] bool___unbox__(_checkDefined(b, 98)) && Measure$check(_loop_measures_19, _cthread_174, 1)
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 202 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98))) | live]
; [else-branch: 202 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) | live]
(push) ; 11
; [then-branch: 202 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(pop) ; 11
(push) ; 11
; [else-branch: 202 | bool___unbox__(_, _checkDefined(_, b@583@01, 98))]
; [eval] Measure$check(_loop_measures_19, _cthread_174, 1)
(push) ; 12
(assert (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
(pop) ; 12
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
  (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))))
(push) ; 10
; [then-branch: 203 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) && Measure$check(_, _loop_measures_19@582@01, _cthread_174@559@01, 1) | live]
; [else-branch: 203 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)) && Measure$check(_, _loop_measures_19@582@01, _cthread_174@559@01, 1)) | live]
(push) ; 11
; [then-branch: 203 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) && Measure$check(_, _loop_measures_19@582@01, _cthread_174@559@01, 1)]
(assert (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
  (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 203 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)) && Measure$check(_, _loop_measures_19@582@01, _cthread_174@559@01, 1))]
(assert (not
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
    (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))))
; [eval] !bool___unbox__(_checkDefined(b, 98)) && Measure$check(_loop_measures_19, _cthread_174, 1)
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 204 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) | live]
; [else-branch: 204 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98))) | live]
(push) ; 13
; [then-branch: 204 | bool___unbox__(_, _checkDefined(_, b@583@01, 98))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
(pop) ; 13
(push) ; 13
; [else-branch: 204 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
; [eval] Measure$check(_loop_measures_19, _cthread_174, 1)
(push) ; 14
(assert (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
(pop) ; 14
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
  (and
    (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
    (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))))
(assert (or
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
      (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
  (and
    (not
      (and
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
        (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
    (=>
      (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
      (and
        (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
        (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
    (or
      (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))))
(assert (or
  (not
    (and
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
      (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
    (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
    (=>
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
      (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
    (or
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
      (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
    (=>
      (not
        (and
          (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
          (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
      (and
        (not
          (and
            (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
            (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
        (=>
          (not
            (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
          (and
            (not
              (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
            (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
        (or
          (not
            (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
          (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))))
    (or
      (not
        (and
          (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
          (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
      (and
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
        (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))))))
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  _loop_termination_flag_19@577@01
  (and
    _loop_termination_flag_19@577@01
    (_checkDefined%precondition $Snap.unit b@583@01 98)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType))
    (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
    (=>
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
      (and
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
        (=>
          (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
          (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
        (or
          (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
          (not
            (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
        (=>
          (not
            (and
              (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
              (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
          (and
            (not
              (and
                (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
                (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
            (=>
              (not
                (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
              (and
                (not
                  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
                (Measure$check%precondition $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
            (or
              (not
                (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
              (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))))
        (or
          (not
            (and
              (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
              (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))
          (and
            (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
            (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))))
    (or
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
      (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))))))
(assert _loop_termination_flag_19@577@01)
(push) ; 6
(assert (not (=>
  _loop_termination_flag_19@577@01
  (or
    (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
    (or
      (and
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
        (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
      (and
        (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
        (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  _loop_termination_flag_19@577@01
  (or
    (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
    (or
      (and
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))
        (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))
      (and
        (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
        (Measure$check $Snap.unit _loop_measures_19@582@01 _cthread_174@559@01 1))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b@583@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b@583@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(_checkDefined(b, 98)) ==> true
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@583@01 98))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b@583@01 98))
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@583@01 98)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) | dead]
; [else-branch: 205 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 205 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
; [eval] !bool___unbox__(_checkDefined(b, 98)) ==> true
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@583@01 98))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98))) | live]
; [else-branch: 206 | bool___unbox__(_, _checkDefined(_, b@583@01, 98)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 206 | !(bool___unbox__(_, _checkDefined(_, b@583@01, 98)))]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] _loop_check_before_19 ==> _loop_termination_flag_19 || (!bool___unbox__(_checkDefined(b, 98)) || perm(MustTerminate(_cthread_174)) == none && ((forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 207 | False | dead]
; [else-branch: 207 | True | live]
(push) ; 7
; [else-branch: 207 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_19 ==> (forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_19
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | True | live]
; [else-branch: 208 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 208 | True]
; [eval] (forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false) && ((forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false) && ((forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false) && (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_94: Ref [MustInvokeBounded(_r_94)] :: false)
(push) ; 8
; [then-branch: 209 | False | live]
; [else-branch: 209 | True | live]
(push) ; 9
; [then-branch: 209 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 209 | True]
; [eval] (forperm _r_94: Ref [MustInvokeUnbounded(_r_94)] :: false)
(push) ; 10
; [then-branch: 210 | False | live]
; [else-branch: 210 | True | live]
(push) ; 11
; [then-branch: 210 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 210 | True]
; [eval] (forperm _r_94: Ref [_r_94.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 211 | False | live]
; [else-branch: 211 | True | live]
(push) ; 13
; [then-branch: 211 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 211 | True]
; [eval] (forperm _r_94: Ref [_r_94.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
; [then-branch: 212 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | dead]
; [else-branch: 212 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | live]
(push) ; 5
; [else-branch: 212 | bool___unbox__(_, _checkDefined(_, b@579@01, 98))]
(pop) ; 5
(pop) ; 4
(push) ; 4
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
  $Snap.unit))
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))))
(assert (= $t@581@01 ($Snap.combine ($Snap.first $t@581@01) ($Snap.second $t@581@01))))
(assert (= ($Snap.first $t@581@01) $Snap.unit))
(assert (=
  ($Snap.second $t@581@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@581@01))
    ($Snap.second ($Snap.second $t@581@01)))))
(assert (= ($Snap.first ($Snap.second $t@581@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@581@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@581@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@581@01))) $Snap.unit))
(assert (<= _residue_174@561@01 _residue_201@571@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@581@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> b@579@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@581@01)))))))))
(assert (_checkDefined%precondition $Snap.unit b@579@01 98))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b@579@01 98)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b@579@01 98)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
; [then-branch: 213 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | dead]
; [else-branch: 213 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | live]
(push) ; 5
; [else-branch: 213 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98)))]
(pop) ; 5
; [eval] !bool___unbox__(_checkDefined(b, 98))
; [eval] bool___unbox__(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b@579@01 98))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98))) | live]
; [else-branch: 214 | bool___unbox__(_, _checkDefined(_, b@579@01, 98)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 214 | !(bool___unbox__(_, _checkDefined(_, b@579@01, 98)))]
; [exec]
; exhale perm(MustTerminate(_cthread_174)) > none ==>
;   acc(MustTerminate(_cthread_174), perm(MustTerminate(_cthread_174)) -
;   _loop_original_must_terminate_19)
; [eval] perm(MustTerminate(_cthread_174)) > none
; [eval] perm(MustTerminate(_cthread_174))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | True | live]
; [else-branch: 215 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 215 | True]
; [eval] perm(MustTerminate(_cthread_174)) - _loop_original_must_terminate_19
; [eval] perm(MustTerminate(_cthread_174))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_19@576@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_19@576@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_19@576@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_19@576@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_19@576@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_19@576@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_19@576@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_19
; [exec]
; label __end
; [eval] (forperm _r_96: Ref [MustInvokeBounded(_r_96)] :: false)
; [eval] (forperm _r_96: Ref [MustInvokeUnbounded(_r_96)] :: false)
; [eval] (forperm _r_96: Ref [_r_96.MustReleaseBounded] :: false)
; [eval] (forperm _r_96: Ref [_r_96.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_generation_1 ----------
(declare-const _cthread_175@585@01 $Ref)
(declare-const _caller_measures_175@586@01 Seq<Measure$>)
(declare-const _residue_175@587@01 $Perm)
(declare-const _current_wait_level_175@588@01 $Perm)
(declare-const _cthread_175@589@01 $Ref)
(declare-const _caller_measures_175@590@01 Seq<Measure$>)
(declare-const _residue_175@591@01 $Perm)
(declare-const _current_wait_level_175@592@01 $Perm)
(push) ; 1
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 ($Snap.combine ($Snap.first $t@593@01) ($Snap.second $t@593@01))))
(assert (= ($Snap.first $t@593@01) $Snap.unit))
; [eval] _cthread_175 != null
(assert (not (= _cthread_175@589@01 $Ref.null)))
(assert (=
  ($Snap.second $t@593@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@593@01))
    ($Snap.second ($Snap.second $t@593@01)))))
(assert (= ($Snap.first ($Snap.second $t@593@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_175), Thread_0())
; [eval] typeof(_cthread_175)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_175@589@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@593@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@594@01 $Snap)
(assert (= $t@594@01 ($Snap.combine ($Snap.first $t@594@01) ($Snap.second $t@594@01))))
(assert (= ($Snap.first $t@594@01) $Snap.unit))
; [eval] (forperm _r_100: Ref [_r_100.MustReleaseBounded] :: Level(_r_100) <= _current_wait_level_175)
(assert (=
  ($Snap.second $t@594@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@594@01))
    ($Snap.second ($Snap.second $t@594@01)))))
(assert (= ($Snap.first ($Snap.second $t@594@01)) $Snap.unit))
; [eval] (forperm _r_100: Ref [_r_100.MustReleaseUnbounded] :: Level(_r_100) <= _current_wait_level_175)
(assert (=
  ($Snap.second ($Snap.second $t@594@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@594@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@594@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@594@01))) $Snap.unit))
; [eval] _residue_175 <= _current_wait_level_175
(assert (<= _residue_175@591@01 _current_wait_level_175@592@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@594@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@595@01 $Ref)
; [exec]
; var i_11: Ref
(declare-const i_11@596@01 $Ref)
; [exec]
; var _loop_measures_20: Seq[Measure$]
(declare-const _loop_measures_20@597@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_20: Bool
(declare-const _loop_check_before_20@598@01 Bool)
; [exec]
; var _loop_termination_flag_20: Bool
(declare-const _loop_termination_flag_20@599@01 Bool)
; [exec]
; var _loop_original_must_terminate_20: Perm
(declare-const _loop_original_must_terminate_20@600@01 $Perm)
; [exec]
; var _residue_202: Perm
(declare-const _residue_202@601@01 $Perm)
; [exec]
; var _cwl_175: Perm
(declare-const _cwl_175@602@01 $Perm)
; [exec]
; var _method_measures_175: Seq[Measure$]
(declare-const _method_measures_175@603@01 Seq<Measure$>)
; [exec]
; _method_measures_175 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_11 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_11@604@01 $Ref)
(assert (= i_11@604@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(825319273)
(declare-const $t@605@01 $Snap)
(assert (= $t@605@01 $Snap.unit))
; [eval] _isDefined(825319273)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 825319273))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 825319273))
(assert (_isDefined $Snap.unit 825319273))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_20 := perm(MustTerminate(_cthread_175))
; [eval] perm(MustTerminate(_cthread_175))
(declare-const _loop_original_must_terminate_20@606@01 $Perm)
(assert (= _loop_original_must_terminate_20@606@01 $Perm.No))
; [exec]
; _loop_termination_flag_20 := true
; [exec]
; _loop_check_before_20 := true
(declare-const _loop_measures_20@607@01 Seq<Measure$>)
(declare-const i_11@608@01 $Ref)
(declare-const _loop_check_before_20@609@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@610@01 $Snap)
(assert (= $t@610@01 ($Snap.combine ($Snap.first $t@610@01) ($Snap.second $t@610@01))))
(assert (= ($Snap.first $t@610@01) $Snap.unit))
; [eval] (forperm _r_98: Ref [_r_98.MustReleaseBounded] :: Level(_r_98) <= _residue_202)
(assert (=
  ($Snap.second $t@610@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@610@01))
    ($Snap.second ($Snap.second $t@610@01)))))
(assert (= ($Snap.first ($Snap.second $t@610@01)) $Snap.unit))
; [eval] (forperm _r_98: Ref [_r_98.MustReleaseUnbounded] :: Level(_r_98) <= _residue_202)
(assert (=
  ($Snap.second ($Snap.second $t@610@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@610@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@610@01))) $Snap.unit))
; [eval] _residue_175 <= _residue_202
(assert (<= _residue_175@591@01 _residue_202@601@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@610@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@610@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@610@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_11), int())
; [eval] typeof(i_11)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_11@608@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_11@608@01 825319273))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_11@608@01 825319273))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@608@01 825319273)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@608@01 825319273)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@608@01 825319273)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5) | live]
; [else-branch: 216 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 216 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273)))
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))
(pop) ; 5
(push) ; 5
; [else-branch: 216 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_11), int())
; [eval] typeof(i_11)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_11@604@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_11@604@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_11@604@01 825319273))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_11@604@01 825319273))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@604@01 825319273)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@604@01 825319273)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@604@01 825319273)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@604@01, 825319273)), 5) | live]
; [else-branch: 217 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@604@01, 825319273)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 217 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@604@01, 825319273)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273)))
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@604@01 825319273)))
    0)))
; [eval] _loop_check_before_20 ==> _loop_termination_flag_20 || (!int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) || perm(MustTerminate(_cthread_175)) == none && ((forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | True | live]
; [else-branch: 218 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 218 | True]
; [eval] _loop_termination_flag_20 || (!int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) || perm(MustTerminate(_cthread_175)) == none && ((forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_20 ==> (forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_20
(push) ; 4
; [then-branch: 219 | False | dead]
; [else-branch: 219 | True | live]
(push) ; 5
; [else-branch: 219 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@610@01 ($Snap.combine ($Snap.first $t@610@01) ($Snap.second $t@610@01))))
(assert (= ($Snap.first $t@610@01) $Snap.unit))
(assert (=
  ($Snap.second $t@610@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@610@01))
    ($Snap.second ($Snap.second $t@610@01)))))
(assert (= ($Snap.first ($Snap.second $t@610@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@610@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@610@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@610@01))) $Snap.unit))
(assert (<= _residue_175@591@01 _residue_202@601@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@610@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@610@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@610@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_11@608@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_11@608@01 825319273))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@608@01 825319273)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@610@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5) | live]
; [else-branch: 220 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 220 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
; [exec]
; _loop_measures_20 := Seq(Measure$create(true, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11,
;   825319273)))))
; [eval] Seq(Measure$create(true, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273)))))
; [eval] Measure$create(true, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273)))
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273))))))
  1))
(declare-const _loop_measures_20@611@01 Seq<Measure$>)
(assert (=
  _loop_measures_20@611@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)))))))
; [exec]
; i_11 := __prim__int___box__(int___add__(int___unbox__(i_11), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_11), 1))
; [eval] int___add__(int___unbox__(i_11), 1)
; [eval] int___unbox__(i_11)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_11@608@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_11@608@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_11@608@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_11@608@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_11@608@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_11@608@01) 1)))
(declare-const i_11@612@01 $Ref)
(assert (=
  i_11@612@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_11@608@01) 1))))
; [exec]
; inhale _isDefined(825319273)
(declare-const $t@613@01 $Snap)
(assert (= $t@613@01 $Snap.unit))
; [eval] _isDefined(825319273)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_20
; [exec]
; _loop_check_before_20 := false
; [exec]
; assert _loop_termination_flag_20 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) ||
;   Measure$check(_loop_measures_20, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11,
;   825319273))))
; [eval] _loop_termination_flag_20 ==> !int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) || Measure$check(_loop_measures_20, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | True | live]
; [else-branch: 221 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 221 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) || Measure$check(_loop_measures_20, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_11@612@01 825319273))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_11@612@01 825319273))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@612@01 825319273)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@612@01 825319273)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@612@01 825319273)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
(push) ; 8
; [then-branch: 222 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5)) | live]
; [else-branch: 222 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5) | live]
(push) ; 9
; [then-branch: 222 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 222 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
; [eval] Measure$check(_loop_measures_20, _cthread_175, int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273)))
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_20@611@01 _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_20@611@01 _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))
    (Measure$check%precondition $Snap.unit _loop_measures_20@611@01 _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_11@612@01 825319273)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_11@612@01 825319273)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))
      (Measure$check%precondition $Snap.unit _loop_measures_20@611@01 _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
  (Measure$check $Snap.unit _loop_measures_20@611@01 _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
  (Measure$check $Snap.unit _loop_measures_20@611@01 _cthread_175@589@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_11), int())
; [eval] typeof(i_11)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_11@612@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_11@612@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5) | live]
; [else-branch: 223 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 223 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_11, 825319273)))
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))
(pop) ; 7
(push) ; 7
; [else-branch: 223 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@612@01, 825319273)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)))
(push) ; 6
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@612@01 825319273)))
    0)))
; [eval] _loop_check_before_20 ==> _loop_termination_flag_20 || (!int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5) || perm(MustTerminate(_cthread_175)) == none && ((forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 224 | False | dead]
; [else-branch: 224 | True | live]
(push) ; 7
; [else-branch: 224 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_20 ==> (forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_20
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | True | live]
; [else-branch: 225 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 225 | True]
; [eval] (forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false) && ((forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false) && ((forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false) && (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false)
(push) ; 8
; [then-branch: 226 | False | live]
; [else-branch: 226 | True | live]
(push) ; 9
; [then-branch: 226 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 226 | True]
; [eval] (forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false)
(push) ; 10
; [then-branch: 227 | False | live]
; [else-branch: 227 | True | live]
(push) ; 11
; [then-branch: 227 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 227 | True]
; [eval] (forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 228 | False | live]
; [else-branch: 228 | True | live]
(push) ; 13
; [then-branch: 228 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 228 | True]
; [eval] (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 220 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_11, 825319273)), 5)
; [eval] int___unbox__(_checkDefined(i_11, 825319273))
; [eval] _checkDefined(i_11, 825319273)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5)) | live]
; [else-branch: 229 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 229 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_175)) > none ==>
;   acc(MustTerminate(_cthread_175), perm(MustTerminate(_cthread_175)) -
;   _loop_original_must_terminate_20)
; [eval] perm(MustTerminate(_cthread_175)) > none
; [eval] perm(MustTerminate(_cthread_175))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | True | live]
; [else-branch: 230 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 230 | True]
; [eval] perm(MustTerminate(_cthread_175)) - _loop_original_must_terminate_20
; [eval] perm(MustTerminate(_cthread_175))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_20@606@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_20@606@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_20@606@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_20@606@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_20@606@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_20@606@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_20@606@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_20
; [exec]
; _cwl_175 := non_terminating(_cthread_175, _method_measures_175, _residue_175)
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
; [eval] (forperm _r_1: Ref [MustInvokeBounded(_r_1)] :: false)
; [eval] (forperm _r_1: Ref [MustInvokeUnbounded(_r_1)] :: false)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: false)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_156@614@01 $Perm)
(declare-const $t@615@01 $Snap)
(assert (= $t@615@01 ($Snap.combine ($Snap.first $t@615@01) ($Snap.second $t@615@01))))
(assert (= ($Snap.first $t@615@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@615@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@615@01))
    ($Snap.second ($Snap.second $t@615@01)))))
(assert (= ($Snap.first ($Snap.second $t@615@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@615@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@615@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@615@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@615@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_175@591@01 _current_wait_level_156@614@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@615@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_101: Ref [MustInvokeBounded(_r_101)] :: false)
; [eval] (forperm _r_101: Ref [MustInvokeUnbounded(_r_101)] :: false)
; [eval] (forperm _r_101: Ref [_r_101.MustReleaseBounded] :: false)
; [eval] (forperm _r_101: Ref [_r_101.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 229 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_11@608@01, 825319273)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_11@608@01 825319273)) 5))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_generation_2 ----------
(declare-const _cthread_176@616@01 $Ref)
(declare-const _caller_measures_176@617@01 Seq<Measure$>)
(declare-const _residue_176@618@01 $Perm)
(declare-const _current_wait_level_176@619@01 $Perm)
(declare-const _cthread_176@620@01 $Ref)
(declare-const _caller_measures_176@621@01 Seq<Measure$>)
(declare-const _residue_176@622@01 $Perm)
(declare-const _current_wait_level_176@623@01 $Perm)
(push) ; 1
(declare-const $t@624@01 $Snap)
(assert (= $t@624@01 ($Snap.combine ($Snap.first $t@624@01) ($Snap.second $t@624@01))))
(assert (= ($Snap.first $t@624@01) $Snap.unit))
; [eval] _cthread_176 != null
(assert (not (= _cthread_176@620@01 $Ref.null)))
(assert (=
  ($Snap.second $t@624@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@624@01))
    ($Snap.second ($Snap.second $t@624@01)))))
(assert (= ($Snap.first ($Snap.second $t@624@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_176), Thread_0())
; [eval] typeof(_cthread_176)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_176@620@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@624@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@625@01 $Snap)
(assert (= $t@625@01 ($Snap.combine ($Snap.first $t@625@01) ($Snap.second $t@625@01))))
(assert (= ($Snap.first $t@625@01) $Snap.unit))
; [eval] (forperm _r_107: Ref [_r_107.MustReleaseBounded] :: Level(_r_107) <= _current_wait_level_176)
(assert (=
  ($Snap.second $t@625@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@625@01))
    ($Snap.second ($Snap.second $t@625@01)))))
(assert (= ($Snap.first ($Snap.second $t@625@01)) $Snap.unit))
; [eval] (forperm _r_107: Ref [_r_107.MustReleaseUnbounded] :: Level(_r_107) <= _current_wait_level_176)
(assert (=
  ($Snap.second ($Snap.second $t@625@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@625@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@625@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@625@01))) $Snap.unit))
; [eval] _residue_176 <= _current_wait_level_176
(assert (<= _residue_176@622@01 _current_wait_level_176@623@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@625@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@626@01 $Ref)
; [exec]
; var b_0: Ref
(declare-const b_0@627@01 $Ref)
; [exec]
; var _loop_measures_21: Seq[Measure$]
(declare-const _loop_measures_21@628@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_21: Bool
(declare-const _loop_check_before_21@629@01 Bool)
; [exec]
; var _loop_termination_flag_21: Bool
(declare-const _loop_termination_flag_21@630@01 Bool)
; [exec]
; var _loop_original_must_terminate_21: Perm
(declare-const _loop_original_must_terminate_21@631@01 $Perm)
; [exec]
; var _residue_203: Perm
(declare-const _residue_203@632@01 $Perm)
; [exec]
; var _loop_measures_22: Seq[Measure$]
(declare-const _loop_measures_22@633@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_22: Bool
(declare-const _loop_check_before_22@634@01 Bool)
; [exec]
; var _loop_termination_flag_22: Bool
(declare-const _loop_termination_flag_22@635@01 Bool)
; [exec]
; var _loop_original_must_terminate_22: Perm
(declare-const _loop_original_must_terminate_22@636@01 $Perm)
; [exec]
; var _residue_204: Perm
(declare-const _residue_204@637@01 $Perm)
; [exec]
; var _cwl_176: Perm
(declare-const _cwl_176@638@01 $Perm)
; [exec]
; var _method_measures_176: Seq[Measure$]
(declare-const _method_measures_176@639@01 Seq<Measure$>)
; [exec]
; _method_measures_176 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; b_0 := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(push) ; 3
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 3
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const b_0@640@01 $Ref)
(assert (= b_0@640@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; inhale _isDefined(3170146)
(declare-const $t@641@01 $Snap)
(assert (= $t@641@01 $Snap.unit))
; [eval] _isDefined(3170146)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170146))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170146))
(assert (_isDefined $Snap.unit 3170146))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_21 := perm(MustTerminate(_cthread_176))
; [eval] perm(MustTerminate(_cthread_176))
(declare-const _loop_original_must_terminate_21@642@01 $Perm)
(assert (= _loop_original_must_terminate_21@642@01 $Perm.No))
; [exec]
; _loop_termination_flag_21 := !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b_0@640@01 3170146))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b_0@640@01 3170146))
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@640@01 3170146)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@640@01 3170146)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@640@01 3170146)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))))
(declare-const _loop_termination_flag_21@643@01 Bool)
(assert (=
  _loop_termination_flag_21@643@01
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146)))))
; [exec]
; _loop_check_before_21 := true
(declare-const _loop_measures_21@644@01 Seq<Measure$>)
(declare-const b_0@645@01 $Ref)
(declare-const _loop_check_before_21@646@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@647@01 $Snap)
(assert (= $t@647@01 ($Snap.combine ($Snap.first $t@647@01) ($Snap.second $t@647@01))))
(assert (= ($Snap.first $t@647@01) $Snap.unit))
; [eval] (forperm _r_103: Ref [_r_103.MustReleaseBounded] :: Level(_r_103) <= _residue_203)
(assert (=
  ($Snap.second $t@647@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@647@01))
    ($Snap.second ($Snap.second $t@647@01)))))
(assert (= ($Snap.first ($Snap.second $t@647@01)) $Snap.unit))
; [eval] (forperm _r_103: Ref [_r_103.MustReleaseUnbounded] :: Level(_r_103) <= _residue_203)
(assert (=
  ($Snap.second ($Snap.second $t@647@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@647@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@647@01))) $Snap.unit))
; [eval] _residue_176 <= _residue_203
(assert (<= _residue_176@622@01 _residue_203@632@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@647@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(b_0), bool())
; [eval] typeof(b_0)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> b_0@645@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))))
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b_0@645@01 3170146))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b_0@645@01 3170146))
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@645@01 3170146)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@645@01 3170146)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@645@01 3170146)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))))
(push) ; 4
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))) | live]
; [else-branch: 231 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 231 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 231 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(b_0), bool())
; [eval] typeof(b_0)
; [eval] bool()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> b_0@640@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@640@01) (as bool<PyType>  PyType)))
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146)) ==> true
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | !(bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146))) | dead]
; [else-branch: 232 | bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146)) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 232 | bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146)))
; [eval] _loop_check_before_21 ==> _loop_termination_flag_21 || (!bool___unbox__(_checkDefined(b_0, 3170146)) || perm(MustTerminate(_cthread_176)) == none && ((forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | True | live]
; [else-branch: 233 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 233 | True]
; [eval] _loop_termination_flag_21 || (!bool___unbox__(_checkDefined(b_0, 3170146)) || perm(MustTerminate(_cthread_176)) == none && ((forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 234 | _loop_termination_flag_21@643@01 | live]
; [else-branch: 234 | !(_loop_termination_flag_21@643@01) | live]
(push) ; 7
; [then-branch: 234 | _loop_termination_flag_21@643@01]
(assert _loop_termination_flag_21@643@01)
(pop) ; 7
(push) ; 7
; [else-branch: 234 | !(_loop_termination_flag_21@643@01)]
(assert (not _loop_termination_flag_21@643@01))
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 235 | !(bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146))) | live]
; [else-branch: 235 | bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146)) | live]
(push) ; 9
; [then-branch: 235 | !(bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))))
(pop) ; 9
(push) ; 9
; [else-branch: 235 | bool___unbox__(_, _checkDefined(_, b_0@640@01, 3170146))]
; [eval] perm(MustTerminate(_cthread_176)) == none && ((forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_176)) == none
; [eval] perm(MustTerminate(_cthread_176))
(push) ; 10
; [then-branch: 236 | False | live]
; [else-branch: 236 | True | live]
(push) ; 11
; [then-branch: 236 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 236 | True]
; [eval] (forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false)
(push) ; 12
; [then-branch: 237 | False | live]
; [else-branch: 237 | True | live]
(push) ; 13
; [then-branch: 237 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 237 | True]
; [eval] (forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false)
(push) ; 14
; [then-branch: 238 | False | live]
; [else-branch: 238 | True | live]
(push) ; 15
; [then-branch: 238 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 238 | True]
; [eval] (forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 239 | False | live]
; [else-branch: 239 | True | live]
(push) ; 17
; [then-branch: 239 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 239 | True]
; [eval] (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))
  (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not _loop_termination_flag_21@643@01)
  (and
    (not _loop_termination_flag_21@643@01)
    (or
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))
      (not
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146)))))))
(assert (or (not _loop_termination_flag_21@643@01) _loop_termination_flag_21@643@01))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (=>
    (not _loop_termination_flag_21@643@01)
    (and
      (not _loop_termination_flag_21@643@01)
      (or
        (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))
        (not
          (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@640@01 3170146))))))
  (or (not _loop_termination_flag_21@643@01) _loop_termination_flag_21@643@01)))
; [eval] !_loop_check_before_21 ==> (forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_21
(push) ; 4
; [then-branch: 240 | False | dead]
; [else-branch: 240 | True | live]
(push) ; 5
; [else-branch: 240 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(assert (= $t@647@01 ($Snap.combine ($Snap.first $t@647@01) ($Snap.second $t@647@01))))
(assert (= ($Snap.first $t@647@01) $Snap.unit))
(assert (=
  ($Snap.second $t@647@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@647@01))
    ($Snap.second ($Snap.second $t@647@01)))))
(assert (= ($Snap.first ($Snap.second $t@647@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@647@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@647@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@647@01))) $Snap.unit))
(assert (<= _residue_176@622@01 _residue_203@632@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@647@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> b_0@645@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))))
(assert (_checkDefined%precondition $Snap.unit b_0@645@01 3170146))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@645@01 3170146)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
; [then-branch: 241 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)) | dead]
; [else-branch: 241 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))) | live]
(push) ; 5
; [else-branch: 241 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)))]
(pop) ; 5
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))) | live]
; [else-branch: 242 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 242 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)))]
; [exec]
; exhale perm(MustTerminate(_cthread_176)) > none ==>
;   acc(MustTerminate(_cthread_176), perm(MustTerminate(_cthread_176)) -
;   _loop_original_must_terminate_21)
; [eval] perm(MustTerminate(_cthread_176)) > none
; [eval] perm(MustTerminate(_cthread_176))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | True | live]
; [else-branch: 243 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 243 | True]
; [eval] perm(MustTerminate(_cthread_176)) - _loop_original_must_terminate_21
; [eval] perm(MustTerminate(_cthread_176))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_21@642@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_21@642@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_21@642@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_21@642@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_21@642@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_21@642@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_21@642@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_21
; [exec]
; _loop_original_must_terminate_22 := perm(MustTerminate(_cthread_176))
; [eval] perm(MustTerminate(_cthread_176))
(declare-const _loop_original_must_terminate_22@648@01 $Perm)
(assert (= _loop_original_must_terminate_22@648@01 $Perm.No))
; [exec]
; _loop_termination_flag_22 := false
; [exec]
; _loop_check_before_22 := true
(declare-const _loop_measures_22@649@01 Seq<Measure$>)
(declare-const _loop_check_before_22@650@01 Bool)
(push) ; 7
; Loop head block: Check well-definedness of invariant
(declare-const $t@651@01 $Snap)
(assert (= $t@651@01 ($Snap.combine ($Snap.first $t@651@01) ($Snap.second $t@651@01))))
(assert (= ($Snap.first $t@651@01) $Snap.unit))
; [eval] (forperm _r_105: Ref [_r_105.MustReleaseBounded] :: Level(_r_105) <= _residue_204)
(assert (=
  ($Snap.second $t@651@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@651@01))
    ($Snap.second ($Snap.second $t@651@01)))))
(assert (= ($Snap.first ($Snap.second $t@651@01)) $Snap.unit))
; [eval] (forperm _r_105: Ref [_r_105.MustReleaseUnbounded] :: Level(_r_105) <= _residue_204)
(assert (=
  ($Snap.second ($Snap.second $t@651@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@651@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@651@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@651@01))) $Snap.unit))
; [eval] _residue_176 <= _residue_204
(assert (<= _residue_176@622@01 _residue_204@637@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@651@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@651@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@651@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))
  $Snap.unit))
(pop) ; 7
(push) ; 7
; Loop head block: Establish invariant
; [eval] _loop_check_before_22 ==> _loop_termination_flag_22 || (!true || perm(MustTerminate(_cthread_176)) == none && ((forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | True | live]
; [else-branch: 244 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 244 | True]
; [eval] _loop_termination_flag_22 || (!true || perm(MustTerminate(_cthread_176)) == none && ((forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 245 | False | live]
; [else-branch: 245 | True | live]
(push) ; 11
; [then-branch: 245 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 245 | True]
; [eval] !true
(push) ; 12
; [then-branch: 246 | False | live]
; [else-branch: 246 | True | live]
(push) ; 13
; [then-branch: 246 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 246 | True]
; [eval] perm(MustTerminate(_cthread_176)) == none && ((forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_176)) == none
; [eval] perm(MustTerminate(_cthread_176))
(push) ; 14
; [then-branch: 247 | False | live]
; [else-branch: 247 | True | live]
(push) ; 15
; [then-branch: 247 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 247 | True]
; [eval] (forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false)
(push) ; 16
; [then-branch: 248 | False | live]
; [else-branch: 248 | True | live]
(push) ; 17
; [then-branch: 248 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 248 | True]
; [eval] (forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false)
(push) ; 18
; [then-branch: 249 | False | live]
; [else-branch: 249 | True | live]
(push) ; 19
; [then-branch: 249 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 249 | True]
; [eval] (forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false)
(push) ; 20
; [then-branch: 250 | False | live]
; [else-branch: 250 | True | live]
(push) ; 21
; [then-branch: 250 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 250 | True]
; [eval] (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before_22 ==> (forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_22
(push) ; 8
; [then-branch: 251 | False | dead]
; [else-branch: 251 | True | live]
(push) ; 9
; [else-branch: 251 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 8
(assert (= $t@651@01 ($Snap.combine ($Snap.first $t@651@01) ($Snap.second $t@651@01))))
(assert (= ($Snap.first $t@651@01) $Snap.unit))
(assert (=
  ($Snap.second $t@651@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@651@01))
    ($Snap.second ($Snap.second $t@651@01)))))
(assert (= ($Snap.first ($Snap.second $t@651@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@651@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@651@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@651@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@651@01))) $Snap.unit))
(assert (<= _residue_176@622@01 _residue_204@637@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@651@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@651@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@651@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@651@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
(push) ; 9
; [eval] !true
(pop) ; 9
; Loop head block: Follow loop-internal edges
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | True | live]
; [else-branch: 252 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 252 | True]
; [exec]
; _loop_measures_22 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; label loop_end_22
; [exec]
; _loop_check_before_22 := false
; [exec]
; assert _loop_termination_flag_22 ==> !true
; [eval] _loop_termination_flag_22 ==> !true
(push) ; 10
; [then-branch: 253 | False | dead]
; [else-branch: 253 | True | live]
(push) ; 11
; [else-branch: 253 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] _loop_check_before_22 ==> _loop_termination_flag_22 || (!true || perm(MustTerminate(_cthread_176)) == none && ((forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 254 | False | dead]
; [else-branch: 254 | True | live]
(push) ; 11
; [else-branch: 254 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before_22 ==> (forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_22
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | True | live]
; [else-branch: 255 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 255 | True]
; [eval] (forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false) && ((forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false) && ((forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false) && (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_106: Ref [MustInvokeBounded(_r_106)] :: false)
(push) ; 12
; [then-branch: 256 | False | live]
; [else-branch: 256 | True | live]
(push) ; 13
; [then-branch: 256 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 256 | True]
; [eval] (forperm _r_106: Ref [MustInvokeUnbounded(_r_106)] :: false)
(push) ; 14
; [then-branch: 257 | False | live]
; [else-branch: 257 | True | live]
(push) ; 15
; [then-branch: 257 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 257 | True]
; [eval] (forperm _r_106: Ref [_r_106.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 258 | False | live]
; [else-branch: 258 | True | live]
(push) ; 17
; [then-branch: 258 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 258 | True]
; [eval] (forperm _r_106: Ref [_r_106.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
; [eval] !true
; [then-branch: 259 | False | dead]
; [else-branch: 259 | True | live]
(push) ; 9
; [else-branch: 259 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
  $Snap.unit))
(assert (= $t@647@01 ($Snap.combine ($Snap.first $t@647@01) ($Snap.second $t@647@01))))
(assert (= ($Snap.first $t@647@01) $Snap.unit))
(assert (=
  ($Snap.second $t@647@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@647@01))
    ($Snap.second ($Snap.second $t@647@01)))))
(assert (= ($Snap.first ($Snap.second $t@647@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@647@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@647@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@647@01))) $Snap.unit))
(assert (<= _residue_176@622@01 _residue_203@632@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@647@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> b_0@645@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@647@01)))))))))
(assert (_checkDefined%precondition $Snap.unit b_0@645@01 3170146))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@645@01 3170146)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)) | live]
; [else-branch: 260 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 260 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))]
; [exec]
; _loop_measures_21 := Seq(Measure$create(!bool___unbox__(_checkDefined(b_0, 3170146)),
;   _cthread_176, 1))
; [eval] Seq(Measure$create(!bool___unbox__(_checkDefined(b_0, 3170146)), _cthread_176, 1))
; [eval] Measure$create(!bool___unbox__(_checkDefined(b_0, 3170146)), _cthread_176, 1)
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 6
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (not
      (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))) _cthread_176@620@01 1)))
  1))
(declare-const _loop_measures_21@652@01 Seq<Measure$>)
(assert (=
  _loop_measures_21@652@01
  (Seq_singleton (Measure$create<Measure$> (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@645@01 3170146))) _cthread_176@620@01 1))))
; [exec]
; b_0 := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 6
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 6
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const b_0@653@01 $Ref)
(assert (= b_0@653@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; inhale _isDefined(3170146)
(declare-const $t@654@01 $Snap)
(assert (= $t@654@01 $Snap.unit))
; [eval] _isDefined(3170146)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_21
; [exec]
; _loop_check_before_21 := false
; [exec]
; assert _loop_termination_flag_21 ==>
;   !bool___unbox__(_checkDefined(b_0, 3170146)) ||
;   !bool___unbox__(_checkDefined(b_0, 3170146)) &&
;   Measure$check(_loop_measures_21, _cthread_176, 1)
; [eval] _loop_termination_flag_21 ==> !bool___unbox__(_checkDefined(b_0, 3170146)) || !bool___unbox__(_checkDefined(b_0, 3170146)) && Measure$check(_loop_measures_21, _cthread_176, 1)
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not _loop_termination_flag_21@643@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | _loop_termination_flag_21@643@01 | dead]
; [else-branch: 261 | !(_loop_termination_flag_21@643@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 261 | !(_loop_termination_flag_21@643@01)]
(assert (not _loop_termination_flag_21@643@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not _loop_termination_flag_21@643@01))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(b_0), bool())
; [eval] typeof(b_0)
; [eval] bool()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> b_0@653@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> b_0@653@01) (as bool<PyType>  PyType)))
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146)) ==> true
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b_0@653@01 3170146))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit b_0@653@01 3170146))
(push) ; 6
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@653@01 3170146)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@653@01 3170146)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@653@01 3170146)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit b_0@653@01 3170146)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit b_0@653@01 3170146))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@653@01 3170146))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@653@01 3170146)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | !(bool___unbox__(_, _checkDefined(_, b_0@653@01, 3170146))) | live]
; [else-branch: 262 | bool___unbox__(_, _checkDefined(_, b_0@653@01, 3170146)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 262 | !(bool___unbox__(_, _checkDefined(_, b_0@653@01, 3170146)))]
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@653@01 3170146))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit b_0@653@01 3170146))))
; [eval] _loop_check_before_21 ==> _loop_termination_flag_21 || (!bool___unbox__(_checkDefined(b_0, 3170146)) || perm(MustTerminate(_cthread_176)) == none && ((forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 7
; [else-branch: 263 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_21 ==> (forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_21
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | True | live]
; [else-branch: 264 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 264 | True]
; [eval] (forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false) && ((forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false) && ((forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false) && (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_104: Ref [MustInvokeBounded(_r_104)] :: false)
(push) ; 8
; [then-branch: 265 | False | live]
; [else-branch: 265 | True | live]
(push) ; 9
; [then-branch: 265 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 265 | True]
; [eval] (forperm _r_104: Ref [MustInvokeUnbounded(_r_104)] :: false)
(push) ; 10
; [then-branch: 266 | False | live]
; [else-branch: 266 | True | live]
(push) ; 11
; [then-branch: 266 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 266 | True]
; [eval] (forperm _r_104: Ref [_r_104.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 267 | False | live]
; [else-branch: 267 | True | live]
(push) ; 13
; [then-branch: 267 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 267 | True]
; [eval] (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; [eval] !bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] bool___unbox__(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 5
; Joined path conditions
; [then-branch: 268 | !(bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))) | dead]
; [else-branch: 268 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146)) | live]
(push) ; 5
; [else-branch: 268 | bool___unbox__(_, _checkDefined(_, b_0@645@01, 3170146))]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_eating_1 ----------
(declare-const _cthread_177@655@01 $Ref)
(declare-const _caller_measures_177@656@01 Seq<Measure$>)
(declare-const _residue_177@657@01 $Perm)
(declare-const _current_wait_level_177@658@01 $Perm)
(declare-const _cthread_177@659@01 $Ref)
(declare-const _caller_measures_177@660@01 Seq<Measure$>)
(declare-const _residue_177@661@01 $Perm)
(declare-const _current_wait_level_177@662@01 $Perm)
(push) ; 1
(declare-const $t@663@01 $Snap)
(assert (= $t@663@01 ($Snap.combine ($Snap.first $t@663@01) ($Snap.second $t@663@01))))
(assert (= ($Snap.first $t@663@01) $Snap.unit))
; [eval] _cthread_177 != null
(assert (not (= _cthread_177@659@01 $Ref.null)))
(assert (=
  ($Snap.second $t@663@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@663@01))
    ($Snap.second ($Snap.second $t@663@01)))))
(assert (= ($Snap.first ($Snap.second $t@663@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_177), Thread_0())
; [eval] typeof(_cthread_177)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_177@659@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@663@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@663@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@663@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@663@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@664@01 $Snap)
(assert (= $t@664@01 ($Snap.combine ($Snap.first $t@664@01) ($Snap.second $t@664@01))))
(assert (= ($Snap.first $t@664@01) $Snap.unit))
; [eval] (forperm _r_112: Ref [_r_112.MustReleaseBounded] :: Level(_r_112) <= _current_wait_level_177)
(assert (=
  ($Snap.second $t@664@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@664@01))
    ($Snap.second ($Snap.second $t@664@01)))))
(assert (= ($Snap.first ($Snap.second $t@664@01)) $Snap.unit))
; [eval] (forperm _r_112: Ref [_r_112.MustReleaseUnbounded] :: Level(_r_112) <= _current_wait_level_177)
(assert (=
  ($Snap.second ($Snap.second $t@664@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@664@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@664@01))) $Snap.unit))
; [eval] _residue_177 <= _current_wait_level_177
(assert (<= _residue_177@661@01 _current_wait_level_177@662@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@664@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@665@01 $Ref)
; [exec]
; var i_12: Ref
(declare-const i_12@666@01 $Ref)
; [exec]
; var _loop_measures_23: Seq[Measure$]
(declare-const _loop_measures_23@667@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_23: Bool
(declare-const _loop_check_before_23@668@01 Bool)
; [exec]
; var _loop_termination_flag_23: Bool
(declare-const _loop_termination_flag_23@669@01 Bool)
; [exec]
; var _loop_original_must_terminate_23: Perm
(declare-const _loop_original_must_terminate_23@670@01 $Perm)
; [exec]
; var _residue_205: Perm
(declare-const _residue_205@671@01 $Perm)
; [exec]
; var _cwl_177: Perm
(declare-const _cwl_177@672@01 $Perm)
; [exec]
; var _method_measures_177: Seq[Measure$]
(declare-const _method_measures_177@673@01 Seq<Measure$>)
; [exec]
; _method_measures_177 := Seq(Measure$create(true, _cthread_177, 2))
; [eval] Seq(Measure$create(true, _cthread_177, 2))
; [eval] Measure$create(true, _cthread_177, 2)
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_177@659@01 2)))
  1))
(declare-const _method_measures_177@674@01 Seq<Measure$>)
(assert (=
  _method_measures_177@674@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_177@659@01 2))))
; [exec]
; _err := null
; [exec]
; i_12 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_12@675@01 $Ref)
(assert (= i_12@675@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(842096489)
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 $Snap.unit))
; [eval] _isDefined(842096489)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 842096489))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 842096489))
(assert (_isDefined $Snap.unit 842096489))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_23 := perm(MustTerminate(_cthread_177))
; [eval] perm(MustTerminate(_cthread_177))
(declare-const _loop_original_must_terminate_23@677@01 $Perm)
(assert (= _loop_original_must_terminate_23@677@01 $Perm.Write))
; [exec]
; _loop_termination_flag_23 := true
; [exec]
; _loop_check_before_23 := true
(declare-const _loop_measures_23@678@01 Seq<Measure$>)
(declare-const i_12@679@01 $Ref)
(declare-const _loop_check_before_23@680@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@681@01 $Snap)
(assert (= $t@681@01 ($Snap.combine ($Snap.first $t@681@01) ($Snap.second $t@681@01))))
(assert (= ($Snap.first $t@681@01) $Snap.unit))
; [eval] (forperm _r_110: Ref [_r_110.MustReleaseBounded] :: Level(_r_110) <= _residue_205)
(assert (=
  ($Snap.second $t@681@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@681@01))
    ($Snap.second ($Snap.second $t@681@01)))))
(assert (= ($Snap.first ($Snap.second $t@681@01)) $Snap.unit))
; [eval] (forperm _r_110: Ref [_r_110.MustReleaseUnbounded] :: Level(_r_110) <= _residue_205)
(assert (=
  ($Snap.second ($Snap.second $t@681@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@681@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@681@01))) $Snap.unit))
; [eval] _residue_177 <= _residue_205
(assert (<= _residue_177@661@01 _residue_205@671@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@681@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@681@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@681@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_12), int())
; [eval] typeof(i_12)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_12@679@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_12@679@01 842096489))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_12@679@01 842096489))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@679@01 842096489)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@679@01 842096489)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@679@01 842096489)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5) | live]
; [else-branch: 269 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 269 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489)))
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))
(pop) ; 5
(push) ; 5
; [else-branch: 269 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_12), int())
; [eval] typeof(i_12)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_12@675@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_12@675@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_12@675@01 842096489))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_12@675@01 842096489))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@675@01 842096489)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@675@01 842096489)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@675@01 842096489)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@675@01, 842096489)), 5) | live]
; [else-branch: 270 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@675@01, 842096489)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 270 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@675@01, 842096489)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489)))
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@675@01 842096489)))
    0)))
; [eval] _loop_check_before_23 ==> _loop_termination_flag_23 || (!int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | True | live]
; [else-branch: 271 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 271 | True]
; [eval] _loop_termination_flag_23 || (!int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_23 ==> (forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_23
(push) ; 4
; [then-branch: 272 | False | dead]
; [else-branch: 272 | True | live]
(push) ; 5
; [else-branch: 272 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@681@01 ($Snap.combine ($Snap.first $t@681@01) ($Snap.second $t@681@01))))
(assert (= ($Snap.first $t@681@01) $Snap.unit))
(assert (=
  ($Snap.second $t@681@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@681@01))
    ($Snap.second ($Snap.second $t@681@01)))))
(assert (= ($Snap.first ($Snap.second $t@681@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@681@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@681@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@681@01))) $Snap.unit))
(assert (<= _residue_177@661@01 _residue_205@671@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@681@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@681@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@681@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_12@679@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_12@679@01 842096489))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@679@01 842096489)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5) | live]
; [else-branch: 273 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 273 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))
; [exec]
; _loop_measures_23 := Seq(Measure$create(true, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12,
;   842096489)))))
; [eval] Seq(Measure$create(true, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489)))))
; [eval] Measure$create(true, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489)))
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489))))))
  1))
(declare-const _loop_measures_23@682@01 Seq<Measure$>)
(assert (=
  _loop_measures_23@682@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)))))))
; [exec]
; i_12 := __prim__int___box__(int___add__(int___unbox__(i_12), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_12), 1))
; [eval] int___add__(int___unbox__(i_12), 1)
; [eval] int___unbox__(i_12)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_12@679@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_12@679@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_12@679@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_12@679@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_12@679@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_12@679@01) 1)))
(declare-const i_12@683@01 $Ref)
(assert (=
  i_12@683@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_12@679@01) 1))))
; [exec]
; inhale _isDefined(842096489)
(declare-const $t@684@01 $Snap)
(assert (= $t@684@01 $Snap.unit))
; [eval] _isDefined(842096489)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_23
; [exec]
; _loop_check_before_23 := false
; [exec]
; assert _loop_termination_flag_23 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) ||
;   Measure$check(_loop_measures_23, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12,
;   842096489))))
; [eval] _loop_termination_flag_23 ==> !int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) || Measure$check(_loop_measures_23, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | True | live]
; [else-branch: 274 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 274 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) || Measure$check(_loop_measures_23, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_12@683@01 842096489))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_12@683@01 842096489))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@683@01 842096489)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@683@01 842096489)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@683@01 842096489)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
(push) ; 8
; [then-branch: 275 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5)) | live]
; [else-branch: 275 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5) | live]
(push) ; 9
; [then-branch: 275 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 275 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
; [eval] Measure$check(_loop_measures_23, _cthread_177, int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489)))
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_23@682@01 _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_23@682@01 _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))
    (Measure$check%precondition $Snap.unit _loop_measures_23@682@01 _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_12@683@01 842096489)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_12@683@01 842096489)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))
      (Measure$check%precondition $Snap.unit _loop_measures_23@682@01 _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
  (Measure$check $Snap.unit _loop_measures_23@682@01 _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
  (Measure$check $Snap.unit _loop_measures_23@682@01 _cthread_177@659@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_12), int())
; [eval] typeof(i_12)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_12@683@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_12@683@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5) | live]
; [else-branch: 276 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 276 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_12, 842096489)))
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))
(pop) ; 7
(push) ; 7
; [else-branch: 276 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@683@01, 842096489)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)))
(push) ; 6
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@683@01 842096489)))
    0)))
; [eval] _loop_check_before_23 ==> _loop_termination_flag_23 || (!int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5) || perm(MustTerminate(_cthread_177)) == none && ((forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 277 | False | dead]
; [else-branch: 277 | True | live]
(push) ; 7
; [else-branch: 277 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_23 ==> (forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_23
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | True | live]
; [else-branch: 278 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 278 | True]
; [eval] (forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false) && ((forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false) && ((forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false) && (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false)
(push) ; 8
; [then-branch: 279 | False | live]
; [else-branch: 279 | True | live]
(push) ; 9
; [then-branch: 279 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 279 | True]
; [eval] (forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false)
(push) ; 10
; [then-branch: 280 | False | live]
; [else-branch: 280 | True | live]
(push) ; 11
; [then-branch: 280 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 280 | True]
; [eval] (forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 281 | False | live]
; [else-branch: 281 | True | live]
(push) ; 13
; [then-branch: 281 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 281 | True]
; [eval] (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 273 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(pop) ; 5
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@681@01)))))))
  ($Snap.first ($Snap.second ($Snap.second $t@663@01)))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_12, 842096489)), 5)
; [eval] int___unbox__(_checkDefined(i_12, 842096489))
; [eval] _checkDefined(i_12, 842096489)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5)) | live]
; [else-branch: 282 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 282 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_12@679@01, 842096489)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_12@679@01 842096489)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_177)) > none ==>
;   acc(MustTerminate(_cthread_177), perm(MustTerminate(_cthread_177)) -
;   _loop_original_must_terminate_23)
; [eval] perm(MustTerminate(_cthread_177)) > none
; [eval] perm(MustTerminate(_cthread_177))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | True | live]
; [else-branch: 283 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 283 | True]
; [eval] perm(MustTerminate(_cthread_177)) - _loop_original_must_terminate_23
; [eval] perm(MustTerminate(_cthread_177))
(push) ; 7
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))))
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_23
; [exec]
; _cwl_177 := non_terminating2(_cthread_177, _method_measures_177, _residue_177)
; [eval] _cthread_157 != null
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
; [eval] false ==> 0 > 0 && true
(push) ; 7
; [then-branch: 284 | False | dead]
; [else-branch: 284 | True | live]
(push) ; 8
; [else-branch: 284 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0)
(push) ; 7
; [then-branch: 285 | False | live]
; [else-branch: 285 | True | live]
(push) ; 8
; [then-branch: 285 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 285 | True]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 9
; [then-branch: 286 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z | live]
; [else-branch: 286 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z | live]
(push) ; 10
; [then-branch: 286 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)))
(pop) ; 10
(push) ; 10
; [else-branch: 286 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No))
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
(push) ; 11
; [then-branch: 287 | False | live]
; [else-branch: 287 | True | live]
(push) ; 12
; [then-branch: 287 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 287 | True]
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
(push) ; 13
; [then-branch: 288 | False | live]
; [else-branch: 288 | True | live]
(push) ; 14
; [then-branch: 288 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 288 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
(push) ; 15
; [then-branch: 289 | False | live]
; [else-branch: 289 | True | live]
(push) ; 16
; [then-branch: 289 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 289 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)
  (not
    (=
      (-
        (/ (to_real 2) (to_real 1))
        ($Perm.min
          (/ (to_real 2) (to_real 1))
          (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
      $Perm.No))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)
  (not
    (=
      (-
        (/ (to_real 2) (to_real 1))
        ($Perm.min
          (/ (to_real 2) (to_real 1))
          (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
      $Perm.No))))
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 290 | False | live]
; [else-branch: 290 | True | live]
(push) ; 8
; [then-branch: 290 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 290 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 291 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z | live]
; [else-branch: 291 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z | live]
(push) ; 10
; [then-branch: 291 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 291 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 292 | False | live]
; [else-branch: 292 | True | live]
(push) ; 12
; [then-branch: 292 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 292 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
(set-option :timeout 0)
(push) ; 13
; [then-branch: 293 | False | live]
; [else-branch: 293 | True | live]
(push) ; 14
; [then-branch: 293 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 293 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 294 | False | live]
; [else-branch: 294 | True | live]
(push) ; 16
; [then-branch: 294 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 294 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 295 | False | live]
; [else-branch: 295 | True | live]
(push) ; 8
; [then-branch: 295 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 295 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 296 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z | live]
; [else-branch: 296 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z | live]
(push) ; 10
; [then-branch: 296 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 296 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 297 | False | live]
; [else-branch: 297 | True | live]
(push) ; 12
; [then-branch: 297 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 297 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
(set-option :timeout 0)
(push) ; 13
; [then-branch: 298 | False | live]
; [else-branch: 298 | True | live]
(push) ; 14
; [then-branch: 298 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 298 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 299 | False | live]
; [else-branch: 299 | True | live]
(push) ; 16
; [then-branch: 299 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 299 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] false && Measure$check(_caller_measures_157, _cthread_157, 0)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 300 | False | live]
; [else-branch: 300 | True | live]
(push) ; 8
; [then-branch: 300 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 300 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false) && ((forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false) && ((forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false) && (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 301 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z | live]
; [else-branch: 301 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z | live]
(push) ; 10
; [then-branch: 301 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
    $Perm.No)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 301 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate_23@677@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [MustInvokeBounded(_r_4)] :: false)
(set-option :timeout 0)
(push) ; 11
; [then-branch: 302 | False | live]
; [else-branch: 302 | True | live]
(push) ; 12
; [then-branch: 302 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 302 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [MustInvokeUnbounded(_r_4)] :: false)
(set-option :timeout 0)
(push) ; 13
; [then-branch: 303 | False | live]
; [else-branch: 303 | True | live]
(push) ; 14
; [then-branch: 303 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 303 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: false)
(set-option :timeout 0)
(push) ; 15
; [then-branch: 304 | False | live]
; [else-branch: 304 | True | live]
(push) ; 16
; [then-branch: 304 | False]
(assert false)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 16
(set-option :timeout 0)
(push) ; 16
; [else-branch: 304 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_23@677@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_exhale_1 ----------
(declare-const _cthread_178@685@01 $Ref)
(declare-const _caller_measures_178@686@01 Seq<Measure$>)
(declare-const _residue_178@687@01 $Perm)
(declare-const _current_wait_level_178@688@01 $Perm)
(declare-const _cthread_178@689@01 $Ref)
(declare-const _caller_measures_178@690@01 Seq<Measure$>)
(declare-const _residue_178@691@01 $Perm)
(declare-const _current_wait_level_178@692@01 $Perm)
(push) ; 1
(declare-const $t@693@01 $Snap)
(assert (= $t@693@01 ($Snap.combine ($Snap.first $t@693@01) ($Snap.second $t@693@01))))
(assert (= ($Snap.first $t@693@01) $Snap.unit))
; [eval] _cthread_178 != null
(assert (not (= _cthread_178@689@01 $Ref.null)))
(assert (=
  ($Snap.second $t@693@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@693@01))
    ($Snap.second ($Snap.second $t@693@01)))))
(assert (= ($Snap.first ($Snap.second $t@693@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_178), Thread_0())
; [eval] typeof(_cthread_178)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_178@689@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@693@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@694@01 $Snap)
(assert (= $t@694@01 ($Snap.combine ($Snap.first $t@694@01) ($Snap.second $t@694@01))))
(assert (= ($Snap.first $t@694@01) $Snap.unit))
; [eval] (forperm _r_117: Ref [_r_117.MustReleaseBounded] :: Level(_r_117) <= _current_wait_level_178)
(assert (=
  ($Snap.second $t@694@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@694@01))
    ($Snap.second ($Snap.second $t@694@01)))))
(assert (= ($Snap.first ($Snap.second $t@694@01)) $Snap.unit))
; [eval] (forperm _r_117: Ref [_r_117.MustReleaseUnbounded] :: Level(_r_117) <= _current_wait_level_178)
(assert (=
  ($Snap.second ($Snap.second $t@694@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@694@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@694@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@694@01))) $Snap.unit))
; [eval] _residue_178 <= _current_wait_level_178
(assert (<= _residue_178@691@01 _current_wait_level_178@692@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@694@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@695@01 $Ref)
; [exec]
; var i_13: Ref
(declare-const i_13@696@01 $Ref)
; [exec]
; var _loop_measures_24: Seq[Measure$]
(declare-const _loop_measures_24@697@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_24: Bool
(declare-const _loop_check_before_24@698@01 Bool)
; [exec]
; var _loop_termination_flag_24: Bool
(declare-const _loop_termination_flag_24@699@01 Bool)
; [exec]
; var _loop_original_must_terminate_24: Perm
(declare-const _loop_original_must_terminate_24@700@01 $Perm)
; [exec]
; var _residue_206: Perm
(declare-const _residue_206@701@01 $Perm)
; [exec]
; var _cwl_178: Perm
(declare-const _cwl_178@702@01 $Perm)
; [exec]
; var _method_measures_178: Seq[Measure$]
(declare-const _method_measures_178@703@01 Seq<Measure$>)
; [exec]
; _method_measures_178 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_13 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_13@704@01 $Ref)
(assert (= i_13@704@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(858873705)
(declare-const $t@705@01 $Snap)
(assert (= $t@705@01 $Snap.unit))
; [eval] _isDefined(858873705)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 858873705))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 858873705))
(assert (_isDefined $Snap.unit 858873705))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_24 := perm(MustTerminate(_cthread_178))
; [eval] perm(MustTerminate(_cthread_178))
(declare-const _loop_original_must_terminate_24@706@01 $Perm)
(assert (= _loop_original_must_terminate_24@706@01 $Perm.No))
; [exec]
; _loop_termination_flag_24 := true || true
; [eval] true || true
; [exec]
; _loop_check_before_24 := true
(declare-const _loop_measures_24@707@01 Seq<Measure$>)
(declare-const i_13@708@01 $Ref)
(declare-const _loop_check_before_24@709@01 Bool)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@710@01 $Snap)
(assert (= $t@710@01 ($Snap.combine ($Snap.first $t@710@01) ($Snap.second $t@710@01))))
(assert (= ($Snap.first $t@710@01) $Snap.unit))
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseBounded] :: Level(_r_115) <= _residue_206)
(assert (=
  ($Snap.second $t@710@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@710@01))
    ($Snap.second ($Snap.second $t@710@01)))))
(assert (= ($Snap.first ($Snap.second $t@710@01)) $Snap.unit))
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseUnbounded] :: Level(_r_115) <= _residue_206)
(assert (=
  ($Snap.second ($Snap.second $t@710@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@710@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@710@01))) $Snap.unit))
; [eval] _residue_178 <= _residue_206
(assert (<= _residue_178@691@01 _residue_206@701@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@710@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@710@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@710@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_13), int())
; [eval] typeof(i_13)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_13@708@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_13@708@01 858873705))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_13@708@01 858873705))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@708@01 858873705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@708@01 858873705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@708@01 858873705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5) | live]
; [else-branch: 305 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 305 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(pop) ; 5
(push) ; 5
; [else-branch: 305 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5) | live]
; [else-branch: 306 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 306 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(pop) ; 5
(push) ; 5
; [else-branch: 306 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))))
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_13), int())
; [eval] typeof(i_13)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_13@704@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_13@704@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_13@704@01 858873705))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_13@704@01 858873705))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@704@01 858873705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@704@01 858873705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@704@01 858873705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705))))
(push) ; 4
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5))
(pop) ; 4
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@704@01, 858873705)), 5) | live]
; [else-branch: 307 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@704@01, 858873705)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 307 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@704@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)))
    0)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@704@01, 858873705)), 5) | live]
; [else-branch: 308 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@704@01, 858873705)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 308 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@704@01, 858873705)), 5)]
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
  (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)))))
(push) ; 4
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@704@01 858873705)))
    0)))
; [eval] _loop_check_before_24 ==> _loop_termination_flag_24 || (!int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) || perm(MustTerminate(_cthread_178)) == none && ((forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false) && ((forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false) && ((forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false) && (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | True | live]
; [else-branch: 309 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 309 | True]
; [eval] _loop_termination_flag_24 || (!int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) || perm(MustTerminate(_cthread_178)) == none && ((forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false) && ((forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false) && ((forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false) && (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] !_loop_check_before_24 ==> (forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false) && ((forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false) && ((forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false) && (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_24
(push) ; 4
; [then-branch: 310 | False | dead]
; [else-branch: 310 | True | live]
(push) ; 5
; [else-branch: 310 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@710@01 ($Snap.combine ($Snap.first $t@710@01) ($Snap.second $t@710@01))))
(assert (= ($Snap.first $t@710@01) $Snap.unit))
(assert (=
  ($Snap.second $t@710@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@710@01))
    ($Snap.second ($Snap.second $t@710@01)))))
(assert (= ($Snap.first ($Snap.second $t@710@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@710@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@710@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@710@01))) $Snap.unit))
(assert (<= _residue_178@691@01 _residue_206@701@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@710@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@710@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@710@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_13@708@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
  $Snap.unit))
(assert (_checkDefined%precondition $Snap.unit i_13@708@01 858873705))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@708@01 858873705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@710@01))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5) | live]
; [else-branch: 311 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 311 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
; [exec]
; _loop_measures_24 := Seq(Measure$create(true, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13,
;   858873705)))), Measure$create(true, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13,
;   858873705)))))
; [eval] Seq(Measure$create(true, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))), Measure$create(true, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))))
; [eval] Measure$create(true, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
; [eval] Measure$create(true, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Measure$create<Measure$> true _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))))
      (Seq_singleton (Measure$create<Measure$> true _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))))))
  2))
(declare-const _loop_measures_24@711@01 Seq<Measure$>)
(assert (=
  _loop_measures_24@711@01
  (Seq_append
    (Seq_singleton (Measure$create<Measure$> true _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)))))
    (Seq_singleton (Measure$create<Measure$> true _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705))))))))
; [exec]
; i_13 := __prim__int___box__(int___add__(int___unbox__(i_13), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_13), 1))
; [eval] int___add__(int___unbox__(i_13), 1)
; [eval] int___unbox__(i_13)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_13@708@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_13@708@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_13@708@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_13@708@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_13@708@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_13@708@01) 1)))
(declare-const i_13@712@01 $Ref)
(assert (=
  i_13@712@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_13@708@01) 1))))
; [exec]
; inhale _isDefined(858873705)
(declare-const $t@713@01 $Snap)
(assert (= $t@713@01 $Snap.unit))
; [eval] _isDefined(858873705)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_24
; [exec]
; _loop_check_before_24 := false
; [exec]
; assert _loop_termination_flag_24 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ||
;   (Measure$check(_loop_measures_24, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13,
;   858873705)))) ||
;   Measure$check(_loop_measures_24, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13,
;   858873705)))))
; [eval] _loop_termination_flag_24 ==> !int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) || (Measure$check(_loop_measures_24, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))) || Measure$check(_loop_measures_24, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 312 | True | live]
; [else-branch: 312 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 312 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) || (Measure$check(_loop_measures_24, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))) || Measure$check(_loop_measures_24, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_13@712@01 858873705))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_13@712@01 858873705))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@712@01 858873705)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@712@01 858873705)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@712@01 858873705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
(push) ; 8
; [then-branch: 313 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5)) | live]
; [else-branch: 313 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5) | live]
(push) ; 9
; [then-branch: 313 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 313 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
; [eval] Measure$check(_loop_measures_24, _cthread_178, int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(push) ; 10
(assert (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
(pop) ; 10
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
(push) ; 10
; [then-branch: 314 | Measure$check(_, _loop_measures_24@711@01, _cthread_178@689@01, int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)))) | live]
; [else-branch: 314 | !(Measure$check(_, _loop_measures_24@711@01, _cthread_178@689@01, int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705))))) | live]
(push) ; 11
; [then-branch: 314 | Measure$check(_, _loop_measures_24@711@01, _cthread_178@689@01, int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705))))]
(assert (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
(pop) ; 11
(push) ; 11
; [else-branch: 314 | !(Measure$check(_, _loop_measures_24@711@01, _cthread_178@689@01, int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)))))]
(assert (not
  (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))
; [eval] Measure$check(_loop_measures_24, _cthread_178, int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(pop) ; 12
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(push) ; 12
(assert (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
(pop) ; 12
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
  (and
    (not
      (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
    (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))))
(assert (or
  (not
    (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
  (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
    (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
    (=>
      (not
        (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
      (and
        (not
          (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
        (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
        (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))
    (or
      (not
        (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
      (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))))
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (_checkDefined%precondition $Snap.unit i_13@712@01 858873705)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_13@712@01 858873705)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
    (and
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
      (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
      (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
      (=>
        (not
          (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
        (and
          (not
            (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
          (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
          (Measure$check%precondition $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))
      (or
        (not
          (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))
        (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))))
(push) ; 6
(assert (not (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
  (or
    (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
    (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
  (or
    (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
    (Measure$check $Snap.unit _loop_measures_24@711@01 _cthread_178@689@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_13), int())
; [eval] typeof(i_13)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_13@712@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_13@712@01) (as int<PyType>  PyType)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5) | live]
; [else-branch: 315 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 315 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(pop) ; 7
(push) ; 7
; [else-branch: 315 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))
(push) ; 6
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
    0)))
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5) | live]
; [else-branch: 316 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 316 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705))) > 0
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_13, 858873705)))
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))
(pop) ; 7
(push) ; 7
; [else-branch: 316 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@712@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705))))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@712@01 858873705)))
    0)))
; [eval] _loop_check_before_24 ==> _loop_termination_flag_24 || (!int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5) || perm(MustTerminate(_cthread_178)) == none && ((forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false) && ((forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false) && ((forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false) && (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 317 | False | dead]
; [else-branch: 317 | True | live]
(push) ; 7
; [else-branch: 317 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_24 ==> (forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false) && ((forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false) && ((forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false) && (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_24
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | True | live]
; [else-branch: 318 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 318 | True]
; [eval] (forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false) && ((forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false) && ((forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false) && (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_116: Ref [MustInvokeBounded(_r_116)] :: false)
(push) ; 8
; [then-branch: 319 | False | live]
; [else-branch: 319 | True | live]
(push) ; 9
; [then-branch: 319 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 319 | True]
; [eval] (forperm _r_116: Ref [MustInvokeUnbounded(_r_116)] :: false)
(push) ; 10
; [then-branch: 320 | False | live]
; [else-branch: 320 | True | live]
(push) ; 11
; [then-branch: 320 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 320 | True]
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 321 | False | live]
; [else-branch: 321 | True | live]
(push) ; 13
; [then-branch: 321 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 321 | True]
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 311 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_13, 858873705)), 5)
; [eval] int___unbox__(_checkDefined(i_13, 858873705))
; [eval] _checkDefined(i_13, 858873705)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)) | live]
; [else-branch: 322 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 322 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_178)) > none ==>
;   acc(MustTerminate(_cthread_178), perm(MustTerminate(_cthread_178)) -
;   _loop_original_must_terminate_24)
; [eval] perm(MustTerminate(_cthread_178)) > none
; [eval] perm(MustTerminate(_cthread_178))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | True | live]
; [else-branch: 323 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 323 | True]
; [eval] perm(MustTerminate(_cthread_178)) - _loop_original_must_terminate_24
; [eval] perm(MustTerminate(_cthread_178))
(push) ; 7
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_24@706@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_24
; [exec]
; label __end
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 322 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_13@708@01, 858873705)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_13@708@01 858873705)) 5))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_exhale_2 ----------
(declare-const _cthread_179@714@01 $Ref)
(declare-const _caller_measures_179@715@01 Seq<Measure$>)
(declare-const _residue_179@716@01 $Perm)
(declare-const _current_wait_level_179@717@01 $Perm)
(declare-const _cthread_179@718@01 $Ref)
(declare-const _caller_measures_179@719@01 Seq<Measure$>)
(declare-const _residue_179@720@01 $Perm)
(declare-const _current_wait_level_179@721@01 $Perm)
(push) ; 1
(declare-const $t@722@01 $Snap)
(assert (= $t@722@01 ($Snap.combine ($Snap.first $t@722@01) ($Snap.second $t@722@01))))
(assert (= ($Snap.first $t@722@01) $Snap.unit))
; [eval] _cthread_179 != null
(assert (not (= _cthread_179@718@01 $Ref.null)))
(assert (=
  ($Snap.second $t@722@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@722@01))
    ($Snap.second ($Snap.second $t@722@01)))))
(assert (= ($Snap.first ($Snap.second $t@722@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_179), Thread_0())
; [eval] typeof(_cthread_179)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_179@718@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@722@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@723@01 $Snap)
(assert (= $t@723@01 ($Snap.combine ($Snap.first $t@723@01) ($Snap.second $t@723@01))))
(assert (= ($Snap.first $t@723@01) $Snap.unit))
; [eval] (forperm _r_122: Ref [_r_122.MustReleaseBounded] :: Level(_r_122) <= _current_wait_level_179)
(assert (=
  ($Snap.second $t@723@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@723@01))
    ($Snap.second ($Snap.second $t@723@01)))))
(assert (= ($Snap.first ($Snap.second $t@723@01)) $Snap.unit))
; [eval] (forperm _r_122: Ref [_r_122.MustReleaseUnbounded] :: Level(_r_122) <= _current_wait_level_179)
(assert (=
  ($Snap.second ($Snap.second $t@723@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@723@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@723@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@723@01))) $Snap.unit))
; [eval] _residue_179 <= _current_wait_level_179
(assert (<= _residue_179@720@01 _current_wait_level_179@721@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@723@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@724@01 $Ref)
; [exec]
; var i_14: Ref
(declare-const i_14@725@01 $Ref)
; [exec]
; var _loop_measures_25: Seq[Measure$]
(declare-const _loop_measures_25@726@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_25: Bool
(declare-const _loop_check_before_25@727@01 Bool)
; [exec]
; var _loop_termination_flag_25: Bool
(declare-const _loop_termination_flag_25@728@01 Bool)
; [exec]
; var _loop_original_must_terminate_25: Perm
(declare-const _loop_original_must_terminate_25@729@01 $Perm)
; [exec]
; var _residue_207: Perm
(declare-const _residue_207@730@01 $Perm)
; [exec]
; var _cwl_179: Perm
(declare-const _cwl_179@731@01 $Perm)
; [exec]
; var _method_measures_179: Seq[Measure$]
(declare-const _method_measures_179@732@01 Seq<Measure$>)
; [exec]
; _method_measures_179 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_14 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_14@733@01 $Ref)
(assert (= i_14@733@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(875650921)
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 $Snap.unit))
; [eval] _isDefined(875650921)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 875650921))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 875650921))
(assert (_isDefined $Snap.unit 875650921))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_25 := perm(MustTerminate(_cthread_179))
; [eval] perm(MustTerminate(_cthread_179))
(declare-const _loop_original_must_terminate_25@735@01 $Perm)
(assert (= _loop_original_must_terminate_25@735@01 $Perm.No))
; [exec]
; _loop_termination_flag_25 := int___gt__(int___unbox__(_checkDefined(i_14, 875650921)),
;   0) ||
;   int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) || int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@733@01 875650921))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@733@01 875650921))
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@733@01 875650921)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@733@01 875650921)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@733@01 875650921)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921))))
(push) ; 3
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0))
(pop) ; 3
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0))
(push) ; 3
; [then-branch: 324 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0) | live]
; [else-branch: 324 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0)) | live]
(push) ; 4
; [then-branch: 324 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0))
(pop) ; 4
(push) ; 4
; [else-branch: 324 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0)))
(declare-const _loop_termination_flag_25@736@01 Bool)
(assert (=
  _loop_termination_flag_25@736@01
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0)))
; [exec]
; _loop_check_before_25 := true
(declare-const _loop_measures_25@737@01 Seq<Measure$>)
(declare-const i_14@738@01 $Ref)
(declare-const _loop_check_before_25@739@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@740@01 $Snap)
(assert (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01))))
(assert (= ($Snap.first $t@740@01) $Snap.unit))
; [eval] (forperm _r_120: Ref [_r_120.MustReleaseBounded] :: Level(_r_120) <= _residue_207)
(assert (=
  ($Snap.second $t@740@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@740@01))
    ($Snap.second ($Snap.second $t@740@01)))))
(assert (= ($Snap.first ($Snap.second $t@740@01)) $Snap.unit))
; [eval] (forperm _r_120: Ref [_r_120.MustReleaseUnbounded] :: Level(_r_120) <= _residue_207)
(assert (=
  ($Snap.second ($Snap.second $t@740@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@740@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@740@01))) $Snap.unit))
; [eval] _residue_179 <= _residue_207
(assert (<= _residue_179@720@01 _residue_207@730@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@740@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_14), int())
; [eval] typeof(i_14)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_14@738@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@738@01 875650921))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@738@01 875650921))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@738@01 875650921)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@738@01 875650921)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@738@01 875650921)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0) | live]
; [else-branch: 325 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 325 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 5
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5) | live]
; [else-branch: 326 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 326 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 6
(push) ; 6
; [else-branch: 326 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0) | live]
; [else-branch: 327 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 327 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5) | live]
; [else-branch: 328 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 328 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 7
(push) ; 7
; [else-branch: 328 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))))
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
    0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 325 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 329 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0) | dead]
; [else-branch: 329 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0)) | live]
(push) ; 5
; [else-branch: 329 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 0))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_14), int())
; [eval] typeof(i_14)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_14@733@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_14@733@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) ==> (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0) | dead]
; [else-branch: 330 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0)) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 330 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 0)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) ==> (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 331 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0) | dead]
; [else-branch: 331 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0)) | live]
(push) ; 5
; [else-branch: 331 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 0))]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] _loop_check_before_25 ==> _loop_termination_flag_25 || (!int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) || perm(MustTerminate(_cthread_179)) == none && ((forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | True | live]
; [else-branch: 332 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 332 | True]
; [eval] _loop_termination_flag_25 || (!int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) || perm(MustTerminate(_cthread_179)) == none && ((forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 333 | _loop_termination_flag_25@736@01 | live]
; [else-branch: 333 | !(_loop_termination_flag_25@736@01) | live]
(push) ; 7
; [then-branch: 333 | _loop_termination_flag_25@736@01]
(assert _loop_termination_flag_25@736@01)
(pop) ; 7
(push) ; 7
; [else-branch: 333 | !(_loop_termination_flag_25@736@01)]
(assert (not _loop_termination_flag_25@736@01))
; [eval] !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5))
(push) ; 8
; [then-branch: 334 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 5)) | live]
; [else-branch: 334 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 5) | live]
(push) ; 9
; [then-branch: 334 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)))
(pop) ; 9
(push) ; 9
; [else-branch: 334 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@733@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5))
; [eval] perm(MustTerminate(_cthread_179)) == none && ((forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_179)) == none
; [eval] perm(MustTerminate(_cthread_179))
(push) ; 10
; [then-branch: 335 | False | live]
; [else-branch: 335 | True | live]
(push) ; 11
; [then-branch: 335 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 335 | True]
; [eval] (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false)
(push) ; 12
; [then-branch: 336 | False | live]
; [else-branch: 336 | True | live]
(push) ; 13
; [then-branch: 336 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 336 | True]
; [eval] (forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false)
(push) ; 14
; [then-branch: 337 | False | live]
; [else-branch: 337 | True | live]
(push) ; 15
; [then-branch: 337 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 337 | True]
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 338 | False | live]
; [else-branch: 338 | True | live]
(push) ; 17
; [then-branch: 338 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 338 | True]
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not _loop_termination_flag_25@736@01)
  (and
    (not _loop_termination_flag_25@736@01)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)
    (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5))))))
(assert (or (not _loop_termination_flag_25@736@01) _loop_termination_flag_25@736@01))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (=>
    (not _loop_termination_flag_25@736@01)
    (and
      (not _loop_termination_flag_25@736@01)
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)
      (or
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)
        (not
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@733@01 875650921)) 5)))))
  (or (not _loop_termination_flag_25@736@01) _loop_termination_flag_25@736@01)))
; [eval] !_loop_check_before_25 ==> (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_25
(push) ; 4
; [then-branch: 339 | False | dead]
; [else-branch: 339 | True | live]
(push) ; 5
; [else-branch: 339 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
    0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  $Snap.unit))
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))))
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
(assert (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01))))
(assert (= ($Snap.first $t@740@01) $Snap.unit))
(assert (=
  ($Snap.second $t@740@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@740@01))
    ($Snap.second ($Snap.second $t@740@01)))))
(assert (= ($Snap.first ($Snap.second $t@740@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@740@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@740@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@740@01))) $Snap.unit))
(assert (<= _residue_179@720@01 _residue_207@730@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@740@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_14@738@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))
(assert (_checkDefined%precondition $Snap.unit i_14@738@01 875650921))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@738@01 875650921)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5) | live]
; [else-branch: 340 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 340 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
; [exec]
; _loop_measures_25 := Seq(Measure$create(int___gt__(int___unbox__(_checkDefined(i_14,
;   875650921)), 0), _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14,
;   875650921)))), Measure$create(int___gt__(int___unbox__(_checkDefined(i_14,
;   875650921)), 0), _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14,
;   875650921)))))
; [eval] Seq(Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))), Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))))
; [eval] Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
; [eval] Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))))
      (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))))))
  2))
(declare-const _loop_measures_25@741@01 Seq<Measure$>)
(assert (=
  _loop_measures_25@741@01
  (Seq_append
    (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))))
    (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))))))
; [exec]
; i_14 := __prim__int___box__(int___add__(int___unbox__(i_14), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_14), 1))
; [eval] int___add__(int___unbox__(i_14), 1)
; [eval] int___unbox__(i_14)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_14@738@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_14@738@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1)))
(declare-const i_14@742@01 $Ref)
(assert (=
  i_14@742@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1))))
; [exec]
; inhale _isDefined(875650921)
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 $Snap.unit))
; [eval] _isDefined(875650921)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_25
; [exec]
; _loop_check_before_25 := false
; [exec]
; assert _loop_termination_flag_25 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ||
;   (int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) &&
;   Measure$check(_loop_measures_25, _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14,
;   875650921)))) ||
;   int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) &&
;   Measure$check(_loop_measures_25, _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14,
;   875650921)))))
; [eval] _loop_termination_flag_25 ==> !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) || (int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) && Measure$check(_loop_measures_25, _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))) || int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) && Measure$check(_loop_measures_25, _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not _loop_termination_flag_25@736@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | _loop_termination_flag_25@736@01 | dead]
; [else-branch: 341 | !(_loop_termination_flag_25@736@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 341 | !(_loop_termination_flag_25@736@01)]
(assert (not _loop_termination_flag_25@736@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not _loop_termination_flag_25@736@01))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_14), int())
; [eval] typeof(i_14)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_14@742@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_14@742@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) ==> (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@742@01 875650921))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@742@01 875650921))
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@742@01 875650921)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@742@01 875650921)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@742@01 875650921)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 342 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 0) | live]
; [else-branch: 342 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 0)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 342 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0))
; [eval] (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) | live]
; [else-branch: 343 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 343 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))
(pop) ; 9
(push) ; 9
; [else-branch: 343 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)))
(push) ; 8
; [then-branch: 344 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0) | live]
; [else-branch: 344 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0 | live]
(push) ; 9
; [then-branch: 344 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0)]
(assert (not
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 344 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0]
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
        0))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0)))
(assert (or
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
      0))
  (not
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
        (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))))
    (or
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
    (=>
      (and
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
            0))
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
      (>
        (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
        0))
    (or
      (=>
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
        (>
          (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
          0))
      (not
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
            0)))))))
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0))
(push) ; 6
(assert (not (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) ==> (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 0) | live]
; [else-branch: 345 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 0)) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 345 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 0)]
; [eval] (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) | live]
; [else-branch: 346 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 346 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))
(pop) ; 9
(push) ; 9
; [else-branch: 346 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921))))))
; Joined path conditions
(assert (or
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)))
(push) ; 8
; [then-branch: 347 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0) | live]
; [else-branch: 347 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0 | live]
(push) ; 9
; [then-branch: 347 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0)]
(assert (not
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 347 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@742@01, 875650921))) > 0]
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
        0))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0)))
(assert (or
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
      0))
  (not
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
  (and
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
        (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))))
    (or
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
    (=>
      (and
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
            0))
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
      (>
        (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
        0))
    (or
      (=>
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
        (>
          (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
          0))
      (not
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
            0)))))))
(push) ; 6
(assert (not (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@742@01 875650921)))
    0)))
; [eval] _loop_check_before_25 ==> _loop_termination_flag_25 || (!int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) || perm(MustTerminate(_cthread_179)) == none && ((forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 348 | False | dead]
; [else-branch: 348 | True | live]
(push) ; 7
; [else-branch: 348 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_25 ==> (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_25
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | True | live]
; [else-branch: 349 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 349 | True]
; [eval] (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false)
(push) ; 8
; [then-branch: 350 | False | live]
; [else-branch: 350 | True | live]
(push) ; 9
; [then-branch: 350 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 350 | True]
; [eval] (forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false)
(push) ; 10
; [then-branch: 351 | False | live]
; [else-branch: 351 | True | live]
(push) ; 11
; [then-branch: 351 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 351 | True]
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 352 | False | live]
; [else-branch: 352 | True | live]
(push) ; 13
; [then-branch: 352 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 352 | True]
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 340 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(pop) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 353 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)) | live]
; [else-branch: 353 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 353 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
; [exec]
; exhale perm(MustTerminate(_cthread_179)) > none ==>
;   acc(MustTerminate(_cthread_179), perm(MustTerminate(_cthread_179)) -
;   _loop_original_must_terminate_25)
; [eval] perm(MustTerminate(_cthread_179)) > none
; [eval] perm(MustTerminate(_cthread_179))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | True | live]
; [else-branch: 354 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 354 | True]
; [eval] perm(MustTerminate(_cthread_179)) - _loop_original_must_terminate_25
; [eval] perm(MustTerminate(_cthread_179))
(push) ; 7
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate_25@735@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_25
; [exec]
; label __end
; [eval] (forperm _r_123: Ref [MustInvokeBounded(_r_123)] :: false)
; [eval] (forperm _r_123: Ref [MustInvokeUnbounded(_r_123)] :: false)
; [eval] (forperm _r_123: Ref [_r_123.MustReleaseBounded] :: false)
; [eval] (forperm _r_123: Ref [_r_123.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 353 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 5
(pop) ; 4
(push) ; 4
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
  $Snap.unit))
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))))
(assert (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01))))
(assert (= ($Snap.first $t@740@01) $Snap.unit))
(assert (=
  ($Snap.second $t@740@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@740@01))
    ($Snap.second ($Snap.second $t@740@01)))))
(assert (= ($Snap.first ($Snap.second $t@740@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@740@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@740@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@740@01))) $Snap.unit))
(assert (<= _residue_179@720@01 _residue_207@730@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@740@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_14@738@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@740@01)))))))))
(assert (_checkDefined%precondition $Snap.unit i_14@738@01 875650921))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@738@01 875650921)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 6
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 5
(push) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 6
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 5
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5) | live]
; [else-branch: 355 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 355 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
; [exec]
; _loop_measures_25 := Seq(Measure$create(int___gt__(int___unbox__(_checkDefined(i_14,
;   875650921)), 0), _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14,
;   875650921)))), Measure$create(int___gt__(int___unbox__(_checkDefined(i_14,
;   875650921)), 0), _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14,
;   875650921)))))
; [eval] Seq(Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))), Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))))
; [eval] Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
; [eval] Measure$create(int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0), _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))))
      (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))))))
  2))
(declare-const _loop_measures_25@744@01 Seq<Measure$>)
(assert (=
  _loop_measures_25@744@01
  (Seq_append
    (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)))))
    (Seq_singleton (Measure$create<Measure$> (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 0) _cthread_179@718@01 (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921))))))))
; [exec]
; i_14 := __prim__int___box__(int___add__(int___unbox__(i_14), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_14), 1))
; [eval] int___add__(int___unbox__(i_14), 1)
; [eval] int___unbox__(i_14)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_14@738@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_14@738@01))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1)))
(declare-const i_14@745@01 $Ref)
(assert (=
  i_14@745@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_14@738@01) 1))))
; [exec]
; inhale _isDefined(875650921)
(declare-const $t@746@01 $Snap)
(assert (= $t@746@01 $Snap.unit))
; [eval] _isDefined(875650921)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_25
; [exec]
; _loop_check_before_25 := false
; [exec]
; assert _loop_termination_flag_25 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ||
;   (int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) &&
;   Measure$check(_loop_measures_25, _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14,
;   875650921)))) ||
;   int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) &&
;   Measure$check(_loop_measures_25, _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14,
;   875650921)))))
; [eval] _loop_termination_flag_25 ==> !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) || (int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) && Measure$check(_loop_measures_25, _cthread_179, int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))) || int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) && Measure$check(_loop_measures_25, _cthread_179, int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not _loop_termination_flag_25@736@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 356 | _loop_termination_flag_25@736@01 | dead]
; [else-branch: 356 | !(_loop_termination_flag_25@736@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 356 | !(_loop_termination_flag_25@736@01)]
(assert (not _loop_termination_flag_25@736@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not _loop_termination_flag_25@736@01))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_14), int())
; [eval] typeof(i_14)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_14@745@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_14@745@01) (as int<PyType>  PyType)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) ==> (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@745@01 875650921))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_14@745@01 875650921))
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@745@01 875650921)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@745@01 875650921)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_14@745@01 875650921)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0) | live]
; [else-branch: 357 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 357 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))
; [eval] (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 358 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) | live]
; [else-branch: 358 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 358 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___sub__(5, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
(push) ; 8
; [then-branch: 359 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0) | live]
; [else-branch: 359 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0 | live]
(push) ; 9
; [then-branch: 359 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0)]
(assert (not
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 359 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 5, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0]
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
        0))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0)))
(assert (or
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
      0))
  (not
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
        0)))))
(pop) ; 7
(push) ; 7
; [else-branch: 357 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
        (int___sub__%precondition $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (=>
      (and
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
            0))
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
      (>
        (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
        0))
    (or
      (=>
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
        (>
          (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
          0))
      (not
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
            0)))))))
; Joined path conditions
(assert (or
  (not
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)))
(push) ; 6
(assert (not (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 5 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0)))
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0) ==> (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___gt__(int___unbox__(_checkDefined(i_14, 875650921)), 0)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0) | live]
; [else-branch: 360 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 360 | int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0))
; [eval] (int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0) && true
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) ==> int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) | live]
; [else-branch: 361 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 361 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921))) > 0
; [eval] int___sub__(6, int___unbox__(_checkDefined(i_14, 875650921)))
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))
(pop) ; 10
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
  (and
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921))))))
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
(push) ; 8
; [then-branch: 362 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0) | live]
; [else-branch: 362 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0 | live]
(push) ; 9
; [then-branch: 362 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0)]
(assert (not
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 362 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 5) ==> int___sub__(_, 6, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921))) > 0]
(assert (=>
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
        0))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0)))
(assert (or
  (=>
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (>
      (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
      0))
  (not
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
      (>
        (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
        0)))))
(pop) ; 7
(push) ; 7
; [else-branch: 360 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i_14@745@01, 875650921)), 0))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (=>
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
      (and
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
        (int___sub__%precondition $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))))
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
    (=>
      (and
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
            0))
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
      (>
        (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
        0))
    (or
      (=>
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
        (>
          (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
          0))
      (not
        (=>
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5)
          (>
            (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
            0)))))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)) 5))
  (>
    (int___sub__ $Snap.unit 6 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@745@01 875650921)))
    0)))
; [eval] _loop_check_before_25 ==> _loop_termination_flag_25 || (!int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5) || perm(MustTerminate(_cthread_179)) == none && ((forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 363 | False | dead]
; [else-branch: 363 | True | live]
(push) ; 7
; [else-branch: 363 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_25 ==> (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_25
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | True | live]
; [else-branch: 364 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 364 | True]
; [eval] (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false) && ((forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false) && ((forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false) && (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false)
(push) ; 8
; [then-branch: 365 | False | live]
; [else-branch: 365 | True | live]
(push) ; 9
; [then-branch: 365 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 365 | True]
; [eval] (forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false)
(push) ; 10
; [then-branch: 366 | False | live]
; [else-branch: 366 | True | live]
(push) ; 11
; [then-branch: 366 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 366 | True]
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 367 | False | live]
; [else-branch: 367 | True | live]
(push) ; 13
; [then-branch: 367 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 367 | True]
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; [eval] !int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___lt__(int___unbox__(_checkDefined(i_14, 875650921)), 5)
; [eval] int___unbox__(_checkDefined(i_14, 875650921))
; [eval] _checkDefined(i_14, 875650921)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)) | dead]
; [else-branch: 368 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 368 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_14@738@01, 875650921)), 5)]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_14@738@01 875650921)) 5))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_non_boolean_guards ----------
(declare-const _cthread_180@747@01 $Ref)
(declare-const _caller_measures_180@748@01 Seq<Measure$>)
(declare-const _residue_180@749@01 $Perm)
(declare-const _current_wait_level_180@750@01 $Perm)
(declare-const _cthread_180@751@01 $Ref)
(declare-const _caller_measures_180@752@01 Seq<Measure$>)
(declare-const _residue_180@753@01 $Perm)
(declare-const _current_wait_level_180@754@01 $Perm)
(push) ; 1
(declare-const $t@755@01 $Snap)
(assert (= $t@755@01 ($Snap.combine ($Snap.first $t@755@01) ($Snap.second $t@755@01))))
(assert (= ($Snap.first $t@755@01) $Snap.unit))
; [eval] _cthread_180 != null
(assert (not (= _cthread_180@751@01 $Ref.null)))
(assert (=
  ($Snap.second $t@755@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@755@01))
    ($Snap.second ($Snap.second $t@755@01)))))
(assert (= ($Snap.first ($Snap.second $t@755@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_180), Thread_0())
; [eval] typeof(_cthread_180)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_180@751@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@755@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 ($Snap.combine ($Snap.first $t@756@01) ($Snap.second $t@756@01))))
(assert (= ($Snap.first $t@756@01) $Snap.unit))
; [eval] (forperm _r_127: Ref [_r_127.MustReleaseBounded] :: Level(_r_127) <= _current_wait_level_180)
(assert (=
  ($Snap.second $t@756@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@756@01))
    ($Snap.second ($Snap.second $t@756@01)))))
(assert (= ($Snap.first ($Snap.second $t@756@01)) $Snap.unit))
; [eval] (forperm _r_127: Ref [_r_127.MustReleaseUnbounded] :: Level(_r_127) <= _current_wait_level_180)
(assert (=
  ($Snap.second ($Snap.second $t@756@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@756@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@756@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@756@01))) $Snap.unit))
; [eval] _residue_180 <= _current_wait_level_180
(assert (<= _residue_180@753@01 _current_wait_level_180@754@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@756@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@757@01 $Ref)
; [exec]
; var i_15: Ref
(declare-const i_15@758@01 $Ref)
; [exec]
; var _loop_measures_26: Seq[Measure$]
(declare-const _loop_measures_26@759@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_26: Bool
(declare-const _loop_check_before_26@760@01 Bool)
; [exec]
; var _loop_termination_flag_26: Bool
(declare-const _loop_termination_flag_26@761@01 Bool)
; [exec]
; var _loop_original_must_terminate_26: Perm
(declare-const _loop_original_must_terminate_26@762@01 $Perm)
; [exec]
; var _residue_208: Perm
(declare-const _residue_208@763@01 $Perm)
; [exec]
; var _cwl_180: Perm
(declare-const _cwl_180@764@01 $Perm)
; [exec]
; var _method_measures_180: Seq[Measure$]
(declare-const _method_measures_180@765@01 Seq<Measure$>)
; [exec]
; _method_measures_180 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; i_15 := __prim__int___box__(5)
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(declare-const i_15@766@01 $Ref)
(assert (= i_15@766@01 (__prim__int___box__ $Snap.unit 5)))
; [exec]
; inhale _isDefined(892428137)
(declare-const $t@767@01 $Snap)
(assert (= $t@767@01 $Snap.unit))
; [eval] _isDefined(892428137)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 892428137))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 892428137))
(assert (_isDefined $Snap.unit 892428137))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_26 := perm(MustTerminate(_cthread_180))
; [eval] perm(MustTerminate(_cthread_180))
(declare-const _loop_original_must_terminate_26@768@01 $Perm)
(assert (= _loop_original_must_terminate_26@768@01 $Perm.No))
; [exec]
; _loop_termination_flag_26 := int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15,
;   892428137)), 1)))
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@766@01 892428137))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@766@01 892428137))
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))))
(push) ; 3
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
(pop) ; 3
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))
(push) ; 3
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)) != Null | live]
; [else-branch: 369 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)) == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 369 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)) != Null]
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
    $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
    $Ref.null)))
(push) ; 4
(assert (not (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))))
(pop) ; 3
; Joined path conditions
(assert (and
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
      $Ref.null))
  (=>
    (not
      (=
        (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
        $Ref.null))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))))
(declare-const _loop_termination_flag_26@769@01 Bool)
(assert (=
  _loop_termination_flag_26@769@01
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))))
; [exec]
; _loop_check_before_26 := true
(declare-const _loop_measures_26@770@01 Seq<Measure$>)
(declare-const i_15@771@01 $Ref)
(declare-const _loop_check_before_26@772@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@773@01 $Snap)
(assert (= $t@773@01 ($Snap.combine ($Snap.first $t@773@01) ($Snap.second $t@773@01))))
(assert (= ($Snap.first $t@773@01) $Snap.unit))
; [eval] (forperm _r_125: Ref [_r_125.MustReleaseBounded] :: Level(_r_125) <= _residue_208)
(assert (=
  ($Snap.second $t@773@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@773@01))
    ($Snap.second ($Snap.second $t@773@01)))))
(assert (= ($Snap.first ($Snap.second $t@773@01)) $Snap.unit))
; [eval] (forperm _r_125: Ref [_r_125.MustReleaseUnbounded] :: Level(_r_125) <= _residue_208)
(assert (=
  ($Snap.second ($Snap.second $t@773@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@773@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@773@01))) $Snap.unit))
; [eval] _residue_180 <= _residue_208
(assert (<= _residue_180@753@01 _residue_208@763@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@773@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(i_15), int())
; [eval] typeof(i_15)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i_15@771@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@771@01 892428137))
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@771@01 892428137))
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(push) ; 4
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
(pop) ; 4
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))
(push) ; 4
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)) != Null | live]
; [else-branch: 370 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)) == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 370 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)) != Null]
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
    $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
    $Ref.null)))
(push) ; 5
(assert (not (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))))
(pop) ; 4
; Joined path conditions
(assert (and
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
      $Ref.null))
  (=>
    (not
      (=
        (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
        $Ref.null))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1))) | live]
; [else-branch: 371 | !(int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 371 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)))]
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  $Snap.unit))
; [eval] int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | _checkDefined(_, i_15@771@01, 892428137) != Null | live]
; [else-branch: 372 | _checkDefined(_, i_15@771@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 372 | _checkDefined(_, i_15@771@01, 892428137) != Null]
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(push) ; 6
(assert (not (=>
  (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
(pop) ; 5
; Joined path conditions
(assert (and
  (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null))
  (=>
    (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | int___bool__(_, _checkDefined(_, i_15@771@01, 892428137)) | live]
; [else-branch: 373 | !(int___bool__(_, _checkDefined(_, i_15@771@01, 892428137))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 373 | int___bool__(_, _checkDefined(_, i_15@771@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
; [eval] int___unbox__(_checkDefined(i_15, 892428137)) > 0
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 373 | !(int___bool__(_, _checkDefined(_, i_15@771@01, 892428137)))]
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  $Snap.unit))
; [eval] int___ge__(int___unbox__(_checkDefined(i_15, 892428137)), 0)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(pop) ; 5
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 371 | !(int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1))))]
(assert (not
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  $Snap.unit))
; [eval] int___ge__(int___unbox__(_checkDefined(i_15, 892428137)), 0)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(pop) ; 5
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] issubtype(typeof(i_15), int())
; [eval] typeof(i_15)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> i_15@766@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_15@766@01) (as int<PyType>  PyType)))
; [eval] (int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))) ? (int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0) && true : true)
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)) != Null | live]
; [else-branch: 374 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)) == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 374 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)) != Null]
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 375 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1))) | live]
; [else-branch: 375 | !(int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 375 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)), 1)))]
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))))
; [eval] (int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0) && true
; [eval] int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 376 | _checkDefined(_, i_15@766@01, 892428137) != Null | live]
; [else-branch: 376 | _checkDefined(_, i_15@766@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 376 | _checkDefined(_, i_15@766@01, 892428137) != Null]
(assert (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)))
(push) ; 7
(assert (not (=>
  (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
(pop) ; 6
; Joined path conditions
(assert (and
  (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
  (=>
    (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)) | live]
; [else-branch: 377 | !(int___bool__(_, _checkDefined(_, i_15@766@01, 892428137))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 377 | int___bool__(_, _checkDefined(_, i_15@766@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
; [eval] int___unbox__(_checkDefined(i_15, 892428137)) > 0
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
(push) ; 6
; [then-branch: 378 | !(int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)) > 0) | live]
; [else-branch: 378 | int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)) > 0 | live]
(push) ; 7
; [then-branch: 378 | !(int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)) > 0)]
(assert (not
  (=>
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    (>
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
      0))))
(pop) ; 7
(push) ; 7
; [else-branch: 378 | int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@766@01, 892428137)) > 0]
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (=>
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
      (>
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
        0))
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    0)))
(assert (or
  (=>
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    (>
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
      0))
  (not
    (=>
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
      (>
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
        0)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))
  (and
    (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1)))
    (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
    (=>
      (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@766@01 892428137)) (as int<PyType>  PyType)))
    (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    (=>
      (and
        (=>
          (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
          (>
            (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
            0))
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
      (>
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
        0))
    (or
      (=>
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
        (>
          (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
          0))
      (not
        (=>
          (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
          (>
            (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
            0)))))))
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 1))))
(push) ; 4
(assert (not (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    0)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_15, 892428137)), 0)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 4
; [eval] _isDefined(id)
(push) ; 5
(pop) ; 5
; Joined path conditions
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 0))
(pop) ; 4
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 0))
(push) ; 4
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)) 0))
; [eval] _loop_check_before_26 ==> _loop_termination_flag_26 || (!int___bool__(_checkDefined(i_15, 892428137)) || perm(MustTerminate(_cthread_180)) == none && ((forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 379 | True | live]
; [else-branch: 379 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 379 | True]
; [eval] _loop_termination_flag_26 || (!int___bool__(_checkDefined(i_15, 892428137)) || perm(MustTerminate(_cthread_180)) == none && ((forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 380 | _loop_termination_flag_26@769@01 | live]
; [else-branch: 380 | !(_loop_termination_flag_26@769@01) | live]
(push) ; 7
; [then-branch: 380 | _loop_termination_flag_26@769@01]
(assert _loop_termination_flag_26@769@01)
(pop) ; 7
(push) ; 7
; [else-branch: 380 | !(_loop_termination_flag_26@769@01)]
(assert (not _loop_termination_flag_26@769@01))
; [eval] !int___bool__(_checkDefined(i_15, 892428137))
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 381 | _checkDefined(_, i_15@766@01, 892428137) != Null | dead]
; [else-branch: 381 | _checkDefined(_, i_15@766@01, 892428137) == Null | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 381 | _checkDefined(_, i_15@766@01, 892428137) == Null]
(assert (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null))
(assert (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
(pop) ; 8
; Joined path conditions
(assert (and
  (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)
  (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))))
(push) ; 8
; [then-branch: 382 | !(int___bool__(_, _checkDefined(_, i_15@766@01, 892428137))) | live]
; [else-branch: 382 | int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)) | live]
(push) ; 9
; [then-branch: 382 | !(int___bool__(_, _checkDefined(_, i_15@766@01, 892428137)))]
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))))
(pop) ; 9
(push) ; 9
; [else-branch: 382 | int___bool__(_, _checkDefined(_, i_15@766@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))
; [eval] perm(MustTerminate(_cthread_180)) == none && ((forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_180)) == none
; [eval] perm(MustTerminate(_cthread_180))
(push) ; 10
; [then-branch: 383 | False | live]
; [else-branch: 383 | True | live]
(push) ; 11
; [then-branch: 383 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 383 | True]
; [eval] (forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false)
(push) ; 12
; [then-branch: 384 | False | live]
; [else-branch: 384 | True | live]
(push) ; 13
; [then-branch: 384 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 384 | True]
; [eval] (forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false)
(push) ; 14
; [then-branch: 385 | False | live]
; [else-branch: 385 | True | live]
(push) ; 15
; [then-branch: 385 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 385 | True]
; [eval] (forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 386 | False | live]
; [else-branch: 386 | True | live]
(push) ; 17
; [then-branch: 386 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 386 | True]
; [eval] (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
  (not
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not _loop_termination_flag_26@769@01)
  (and
    (not _loop_termination_flag_26@769@01)
    (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)
    (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
    (or
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
      (not
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137)))))))
(assert (or (not _loop_termination_flag_26@769@01) _loop_termination_flag_26@769@01))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (=>
    (not _loop_termination_flag_26@769@01)
    (and
      (not _loop_termination_flag_26@769@01)
      (= (_checkDefined $Snap.unit i_15@766@01 892428137) $Ref.null)
      (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
      (or
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))
        (not
          (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@766@01 892428137))))))
  (or (not _loop_termination_flag_26@769@01) _loop_termination_flag_26@769@01)))
; [eval] !_loop_check_before_26 ==> (forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_26
(push) ; 4
; [then-branch: 387 | False | dead]
; [else-branch: 387 | True | live]
(push) ; 5
; [else-branch: 387 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  $Snap.unit))
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(assert (=>
  (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
(assert (or
  (not
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  $Snap.unit))
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(assert (= $t@773@01 ($Snap.combine ($Snap.first $t@773@01) ($Snap.second $t@773@01))))
(assert (= ($Snap.first $t@773@01) $Snap.unit))
(assert (=
  ($Snap.second $t@773@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@773@01))
    ($Snap.second ($Snap.second $t@773@01)))))
(assert (= ($Snap.first ($Snap.second $t@773@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@773@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@773@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@773@01))) $Snap.unit))
(assert (<= _residue_180@753@01 _residue_208@763@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@773@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_15@771@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))
(assert (_checkDefined%precondition $Snap.unit i_15@771@01 892428137))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
    $Ref.null)))
(assert (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | _checkDefined(_, i_15@771@01, 892428137) != Null | live]
; [else-branch: 388 | _checkDefined(_, i_15@771@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 388 | _checkDefined(_, i_15@771@01, 892428137) != Null]
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [eval] !int___bool__(_checkDefined(i_15, 892428137))
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | _checkDefined(_, i_15@771@01, 892428137) != Null | live]
; [else-branch: 389 | _checkDefined(_, i_15@771@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 389 | _checkDefined(_, i_15@771@01, 892428137) != Null]
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | _checkDefined(_, i_15@771@01, 892428137) != Null | live]
; [else-branch: 390 | _checkDefined(_, i_15@771@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 390 | _checkDefined(_, i_15@771@01, 892428137) != Null]
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | int___bool__(_, _checkDefined(_, i_15@771@01, 892428137)) | live]
; [else-branch: 391 | !(int___bool__(_, _checkDefined(_, i_15@771@01, 892428137))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 391 | int___bool__(_, _checkDefined(_, i_15@771@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
; [exec]
; _loop_measures_26 := Seq(Measure$create(int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15,
;   892428137)), 1))), _cthread_180, int___unbox__(_checkDefined(i_15, 892428137))))
; [eval] Seq(Measure$create(int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))), _cthread_180, int___unbox__(_checkDefined(i_15, 892428137))))
; [eval] Measure$create(int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))), _cthread_180, int___unbox__(_checkDefined(i_15, 892428137)))
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)) != Null | live]
; [else-branch: 392 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 392 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@771@01, 892428137)), 1)) != Null]
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))))
  1))
(declare-const _loop_measures_26@774@01 Seq<Measure$>)
(assert (=
  _loop_measures_26@774@01
  (Seq_singleton (Measure$create<Measure$> (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))))
; [exec]
; i_15 := __prim__int___box__(int___sub__(int___unbox__(i_15), 1))
; [eval] __prim__int___box__(int___sub__(int___unbox__(i_15), 1))
; [eval] int___sub__(int___unbox__(i_15), 1)
; [eval] int___unbox__(i_15)
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_15@771@01))
(pop) ; 6
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_15@771@01))
(push) ; 6
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_15@771@01) 1))
(pop) ; 6
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit i_15@771@01) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_15@771@01) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_15@771@01) 1)))
(declare-const i_15@775@01 $Ref)
(assert (=
  i_15@775@01
  (__prim__int___box__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit i_15@771@01) 1))))
; [exec]
; inhale _isDefined(892428137)
(declare-const $t@776@01 $Snap)
(assert (= $t@776@01 $Snap.unit))
; [eval] _isDefined(892428137)
(push) ; 6
(pop) ; 6
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label loop_end_26
; [exec]
; _loop_check_before_26 := false
; [exec]
; assert _loop_termination_flag_26 ==>
;   !int___bool__(_checkDefined(i_15, 892428137)) ||
;   int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15,
;   892428137)), 1))) &&
;   Measure$check(_loop_measures_26, _cthread_180, int___unbox__(_checkDefined(i_15,
;   892428137)))
; [eval] _loop_termination_flag_26 ==> !int___bool__(_checkDefined(i_15, 892428137)) || int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))) && Measure$check(_loop_measures_26, _cthread_180, int___unbox__(_checkDefined(i_15, 892428137)))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not _loop_termination_flag_26@769@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not _loop_termination_flag_26@769@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | _loop_termination_flag_26@769@01 | live]
; [else-branch: 393 | !(_loop_termination_flag_26@769@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 393 | _loop_termination_flag_26@769@01]
(assert _loop_termination_flag_26@769@01)
; [eval] !int___bool__(_checkDefined(i_15, 892428137)) || int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))) && Measure$check(_loop_measures_26, _cthread_180, int___unbox__(_checkDefined(i_15, 892428137)))
; [eval] !int___bool__(_checkDefined(i_15, 892428137))
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@775@01 892428137))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@775@01 892428137))
(push) ; 8
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | _checkDefined(_, i_15@775@01, 892428137) != Null | live]
; [else-branch: 394 | _checkDefined(_, i_15@775@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 394 | _checkDefined(_, i_15@775@01, 892428137) != Null]
(assert (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null)))
(push) ; 9
(assert (not (=>
  (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
(pop) ; 8
; Joined path conditions
(assert (and
  (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
  (=>
    (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(push) ; 8
; [then-branch: 395 | !(int___bool__(_, _checkDefined(_, i_15@775@01, 892428137))) | live]
; [else-branch: 395 | int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)) | live]
(push) ; 9
; [then-branch: 395 | !(int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)))]
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(pop) ; 9
(push) ; 9
; [else-branch: 395 | int___bool__(_, _checkDefined(_, i_15@775@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))) && Measure$check(_loop_measures_26, _cthread_180, int___unbox__(_checkDefined(i_15, 892428137)))
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(push) ; 10
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
(pop) ; 10
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
(push) ; 10
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)) != Null | live]
; [else-branch: 396 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)) == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 396 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)) != Null]
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    $Ref.null)))
(push) ; 11
(assert (not (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))
(pop) ; 10
; Joined path conditions
(assert (and
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
      $Ref.null))
  (=>
    (not
      (=
        (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
        $Ref.null))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))))
(push) ; 10
; [then-branch: 397 | !(int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)))) | live]
; [else-branch: 397 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1))) | live]
(push) ; 11
; [then-branch: 397 | !(int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1))))]
(assert (not
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))))
(pop) ; 11
(push) ; 11
; [else-branch: 397 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)))]
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))
; [eval] Measure$check(_loop_measures_26, _cthread_180, int___unbox__(_checkDefined(i_15, 892428137)))
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (Measure$check%precondition $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(pop) ; 12
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
  (and
    (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
    (Measure$check%precondition $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))))
(assert (or
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
  (not
    (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
  (and
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)
    (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    (not
      (=
        (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
        $Ref.null))
    (=>
      (not
        (=
          (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
          $Ref.null))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType)))
    (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
    (=>
      (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
      (and
        (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
        (Measure$check%precondition $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))))
    (or
      (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
      (not
        (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))))))
(assert (or
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
  (not
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  _loop_termination_flag_26@769@01
  (and
    _loop_termination_flag_26@769@01
    (_checkDefined%precondition $Snap.unit i_15@775@01 892428137)
    (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
    (=>
      (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))
    (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    (=>
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
      (and
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
        (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)
        (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
        (not
          (=
            (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
            $Ref.null))
        (=>
          (not
            (=
              (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
              $Ref.null))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType)))
        (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
        (=>
          (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
          (and
            (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
            (Measure$check%precondition $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))))
        (or
          (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
          (not
            (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))))))
    (or
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
      (not
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))))))
(assert _loop_termination_flag_26@769@01)
(push) ; 6
(assert (not (=>
  _loop_termination_flag_26@769@01
  (or
    (not
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
    (and
      (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
      (Measure$check $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  _loop_termination_flag_26@769@01
  (or
    (not
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
    (and
      (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
      (Measure$check $Snap.unit _loop_measures_26@774@01 _cthread_180@751@01 (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))))))
; Loop head block: Re-establish invariant
; [eval] issubtype(typeof(i_15), int())
; [eval] typeof(i_15)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> i_15@775@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_15@775@01) (as int<PyType>  PyType)))
; [eval] (int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))) ? (int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0) && true : true)
; [eval] int___bool__(__prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)))
; [eval] __prim__int___box__(int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1))
; [eval] int___add__(int___unbox__(_checkDefined(i_15, 892428137)), 1)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@775@01 892428137))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_15@775@01 892428137))
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
(push) ; 6
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
  $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)) != Null | live]
; [else-branch: 398 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)) == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 398 | __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)) != Null]
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
    $Ref.null)))
(push) ; 7
(assert (not (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))
(pop) ; 6
; Joined path conditions
(assert (and
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
      $Ref.null))
  (=>
    (not
      (=
        (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))
        $Ref.null))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1))) | live]
; [else-branch: 399 | !(int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 399 | int___bool__(_, __prim__int___box__(_, int___add__(_, int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)), 1)))]
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))
; [eval] (int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0) && true
; [eval] int___bool__(_checkDefined(i_15, 892428137)) ==> int___unbox__(_checkDefined(i_15, 892428137)) > 0
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | _checkDefined(_, i_15@775@01, 892428137) != Null | live]
; [else-branch: 400 | _checkDefined(_, i_15@775@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 400 | _checkDefined(_, i_15@775@01, 892428137) != Null]
(assert (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null)))
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null)))
(push) ; 9
(assert (not (=>
  (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
(pop) ; 8
; Joined path conditions
(assert (and
  (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
  (=>
    (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))
  (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 401 | int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)) | live]
; [else-branch: 401 | !(int___bool__(_, _checkDefined(_, i_15@775@01, 892428137))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 401 | int___bool__(_, _checkDefined(_, i_15@775@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
; [eval] int___unbox__(_checkDefined(i_15, 892428137)) > 0
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 401 | !(int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)))]
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))))
(push) ; 8
; [then-branch: 402 | !(int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)) > 0) | live]
; [else-branch: 402 | int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)) > 0 | live]
(push) ; 9
; [then-branch: 402 | !(int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)) > 0)]
(assert (not
  (=>
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    (>
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
      0))))
(pop) ; 9
(push) ; 9
; [else-branch: 402 | int___bool__(_, _checkDefined(_, i_15@775@01, 892428137)) ==> int___unbox__(_, _checkDefined(_, i_15@775@01, 892428137)) > 0]
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    0)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (and
    (=>
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
      (>
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
        0))
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    0)))
(assert (or
  (=>
    (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    (>
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
      0))
  (not
    (=>
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
      (>
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
  (and
    (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1)))
    (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
    (=>
      (not (= (_checkDefined $Snap.unit i_15@775@01 892428137) $Ref.null))
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@775@01 892428137)) (as int<PyType>  PyType)))
    (int___bool__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    (or
      (not
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
      (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
    (=>
      (and
        (=>
          (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
          (>
            (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
            0))
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)))
      (>
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
        0))
    (or
      (=>
        (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
        (>
          (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
          0))
      (not
        (=>
          (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
          (>
            (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
            0)))))))
(assert (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 1))))
(push) ; 6
(assert (not (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
  (>
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137))
    0)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_15, 892428137)), 0)
; [eval] int___unbox__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 0))
(pop) ; 6
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 0))
(push) ; 6
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@775@01 892428137)) 0))
; [eval] _loop_check_before_26 ==> _loop_termination_flag_26 || (!int___bool__(_checkDefined(i_15, 892428137)) || perm(MustTerminate(_cthread_180)) == none && ((forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)))))
(push) ; 6
; [then-branch: 403 | False | dead]
; [else-branch: 403 | True | live]
(push) ; 7
; [else-branch: 403 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before_26 ==> (forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_26
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | True | live]
; [else-branch: 404 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 404 | True]
; [eval] (forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false) && ((forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false) && ((forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false) && (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_126: Ref [MustInvokeBounded(_r_126)] :: false)
(push) ; 8
; [then-branch: 405 | False | live]
; [else-branch: 405 | True | live]
(push) ; 9
; [then-branch: 405 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 405 | True]
; [eval] (forperm _r_126: Ref [MustInvokeUnbounded(_r_126)] :: false)
(push) ; 10
; [then-branch: 406 | False | live]
; [else-branch: 406 | True | live]
(push) ; 11
; [then-branch: 406 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 406 | True]
; [eval] (forperm _r_126: Ref [_r_126.MustReleaseBounded] :: false)
(push) ; 12
; [then-branch: 407 | False | live]
; [else-branch: 407 | True | live]
(push) ; 13
; [then-branch: 407 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 407 | True]
; [eval] (forperm _r_126: Ref [_r_126.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 391 | !(int___bool__(_, _checkDefined(_, i_15@771@01, 892428137)))]
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(pop) ; 5
; [eval] !int___bool__(_checkDefined(i_15, 892428137))
; [eval] int___bool__(_checkDefined(i_15, 892428137))
; [eval] _checkDefined(i_15, 892428137)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] self != null ==> issubtype(typeof(self), int())
; [eval] self != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit i_15@771@01 892428137) $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 408 | _checkDefined(_, i_15@771@01, 892428137) != Null | live]
; [else-branch: 408 | _checkDefined(_, i_15@771@01, 892428137) == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 408 | _checkDefined(_, i_15@771@01, 892428137) != Null]
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | !(int___bool__(_, _checkDefined(_, i_15@771@01, 892428137))) | live]
; [else-branch: 409 | int___bool__(_, _checkDefined(_, i_15@771@01, 892428137)) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 409 | !(int___bool__(_, _checkDefined(_, i_15@771@01, 892428137)))]
(assert (not (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137))))
; [exec]
; exhale perm(MustTerminate(_cthread_180)) > none ==>
;   acc(MustTerminate(_cthread_180), perm(MustTerminate(_cthread_180)) -
;   _loop_original_must_terminate_26)
; [eval] perm(MustTerminate(_cthread_180)) > none
; [eval] perm(MustTerminate(_cthread_180))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 410 | True | live]
; [else-branch: 410 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 410 | True]
; [eval] perm(MustTerminate(_cthread_180)) - _loop_original_must_terminate_26
; [eval] perm(MustTerminate(_cthread_180))
(push) ; 7
(assert (not (or
  (= (- $Perm.Write _loop_original_must_terminate_26@768@01) $Perm.No)
  (< $Perm.No (- $Perm.Write _loop_original_must_terminate_26@768@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (-
    $Perm.Write
    ($Perm.min
      $Perm.Write
      (- $Perm.Write _loop_original_must_terminate_26@768@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (- $Perm.Write _loop_original_must_terminate_26@768@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_26@768@01)))
    $Perm.No)
  (<
    (-
      (- $Perm.Write _loop_original_must_terminate_26@768@01)
      ($Perm.min
        $Perm.Write
        (- $Perm.Write _loop_original_must_terminate_26@768@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_loop_26
; [exec]
; label __end
; [eval] (forperm _r_128: Ref [MustInvokeBounded(_r_128)] :: false)
; [eval] (forperm _r_128: Ref [MustInvokeUnbounded(_r_128)] :: false)
; [eval] (forperm _r_128: Ref [_r_128.MustReleaseBounded] :: false)
; [eval] (forperm _r_128: Ref [_r_128.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 409 | int___bool__(_, _checkDefined(_, i_15@771@01, 892428137))]
(assert (int___bool__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
(pop) ; 5
(pop) ; 4
(push) ; 4
(assert (not
  (int___bool__ $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  $Snap.unit))
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
  $Snap.unit))
(assert (= $t@773@01 ($Snap.combine ($Snap.first $t@773@01) ($Snap.second $t@773@01))))
(assert (= ($Snap.first $t@773@01) $Snap.unit))
(assert (=
  ($Snap.second $t@773@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@773@01))
    ($Snap.second ($Snap.second $t@773@01)))))
(assert (= ($Snap.first ($Snap.second $t@773@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@773@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@773@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@773@01))) $Snap.unit))
(assert (<= _residue_180@753@01 _residue_208@763@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@773@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
  $Snap.unit))
(assert (issubtype<Bool> (typeof<PyType> i_15@771@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@773@01)))))))))
(assert (_checkDefined%precondition $Snap.unit i_15@771@01 892428137))
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_15@771@01 892428137)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)))
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1)))
(assert (not
  (=
    (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
    $Ref.null)))
(assert (=>
  (not
    (=
      (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))
      $Ref.null))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))) (as int<PyType>  PyType))))
(assert (int___bool__%precondition $Snap.unit (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_15@771@01 892428137)) 1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_181@777@01 $Ref)
(declare-const _caller_measures_181@778@01 Seq<Measure$>)
(declare-const _residue_209@779@01 $Perm)
(declare-const _current_wait_level_181@780@01 $Perm)
(declare-const _cthread_181@781@01 $Ref)
(declare-const _caller_measures_181@782@01 Seq<Measure$>)
(declare-const _residue_209@783@01 $Perm)
(declare-const _current_wait_level_181@784@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@785@01 $Snap)
(assert (= $t@785@01 ($Snap.combine ($Snap.first $t@785@01) ($Snap.second $t@785@01))))
(assert (= ($Snap.first $t@785@01) $Snap.unit))
; [eval] _cthread_181 != null
(assert (not (= _cthread_181@781@01 $Ref.null)))
(assert (=
  ($Snap.second $t@785@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@785@01))
    ($Snap.second ($Snap.second $t@785@01)))))
(assert (= ($Snap.first ($Snap.second $t@785@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_181), Thread_0())
; [eval] typeof(_cthread_181)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_181@781@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@785@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@786@01 $Snap)
(assert (= $t@786@01 ($Snap.combine ($Snap.first $t@786@01) ($Snap.second $t@786@01))))
(assert (= ($Snap.first $t@786@01) $Snap.unit))
; [eval] (forperm _r_130: Ref [_r_130.MustReleaseBounded] :: Level(_r_130) <= _current_wait_level_181)
(assert (=
  ($Snap.second $t@786@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@786@01))
    ($Snap.second ($Snap.second $t@786@01)))))
(assert (= ($Snap.first ($Snap.second $t@786@01)) $Snap.unit))
; [eval] (forperm _r_130: Ref [_r_130.MustReleaseUnbounded] :: Level(_r_130) <= _current_wait_level_181)
(assert (=
  ($Snap.second ($Snap.second $t@786@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@786@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@786@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@786@01))) $Snap.unit))
; [eval] _residue_209 <= _current_wait_level_181
(assert (<= _residue_209@783@01 _current_wait_level_181@784@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@786@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@787@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@788@01 Set<_Name>)
; [exec]
; var _cwl_181: Perm
(declare-const _cwl_181@789@01 $Perm)
; [exec]
; var _method_measures_181: Seq[Measure$]
(declare-const _method_measures_181@790@01 Seq<Measure$>)
; [exec]
; _method_measures_181 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@791@01 Set<_Name>)
(assert (=
  module_names_0@791@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@792@01 $Snap)
(assert (= $t@792@01 ($Snap.combine ($Snap.first $t@792@01) ($Snap.second $t@792@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@792@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@792@01))
    ($Snap.second ($Snap.second $t@792@01)))))
(assert (= ($Snap.first ($Snap.second $t@792@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@792@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@792@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@793@01 Set<_Name>)
(assert (=
  module_names_0@793@01
  (Set_union module_names_0@791@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@794@01 $Snap)
(assert (= $t@794@01 ($Snap.combine ($Snap.first $t@794@01) ($Snap.second $t@794@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@794@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@794@01))
    ($Snap.second ($Snap.second $t@794@01)))))
(assert (= ($Snap.first ($Snap.second $t@794@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@794@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@794@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@794@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@794@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@794@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@794@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@794@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@794@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@794@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(128034677158721)))
; [eval] (module_names_0 union Set(_single(128034677158721)))
; [eval] Set(_single(128034677158721))
; [eval] _single(128034677158721)
(declare-const module_names_0@795@01 Set<_Name>)
(assert (=
  module_names_0@795@01
  (Set_union module_names_0@793@01 (Set_singleton (_single<_Name> 128034677158721)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(8315178084276987218)))
; [eval] (module_names_0 union Set(_single(8315178084276987218)))
; [eval] Set(_single(8315178084276987218))
; [eval] _single(8315178084276987218)
(declare-const module_names_0@796@01 Set<_Name>)
(assert (=
  module_names_0@796@01
  (Set_union module_names_0@795@01 (Set_singleton (_single<_Name> 8315178084276987218)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2147776066907203333705)))
; [eval] (module_names_0 union Set(_single(2147776066907203333705)))
; [eval] Set(_single(2147776066907203333705))
; [eval] _single(2147776066907203333705)
(declare-const module_names_0@797@01 Set<_Name>)
(assert (=
  module_names_0@797@01
  (Set_union module_names_0@796@01 (Set_singleton (_single<_Name> 2147776066907203333705)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(32481125787004233)))
; [eval] (module_names_0 union Set(_single(32481125787004233)))
; [eval] Set(_single(32481125787004233))
; [eval] _single(32481125787004233)
(declare-const module_names_0@798@01 Set<_Name>)
(assert (=
  module_names_0@798@01
  (Set_union module_names_0@797@01 (Set_singleton (_single<_Name> 32481125787004233)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(912209860920254746441)))
; [eval] (module_names_0 union Set(_single(912209860920254746441)))
; [eval] Set(_single(912209860920254746441))
; [eval] _single(912209860920254746441)
(declare-const module_names_0@799@01 Set<_Name>)
(assert (=
  module_names_0@799@01
  (Set_union module_names_0@798@01 (Set_singleton (_single<_Name> 912209860920254746441)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7738150958662902082)))
; [eval] (module_names_0 union Set(_single(7738150958662902082)))
; [eval] Set(_single(7738150958662902082))
; [eval] _single(7738150958662902082)
(declare-const module_names_0@800@01 Set<_Name>)
(assert (=
  module_names_0@800@01
  (Set_union module_names_0@799@01 (Set_singleton (_single<_Name> 7738150958662902082)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(537045996460601276127090492134289262)))
; [eval] (module_names_0 union Set(_single(537045996460601276127090492134289262)))
; [eval] Set(_single(537045996460601276127090492134289262))
; [eval] _single(537045996460601276127090492134289262)
(declare-const module_names_0@801@01 Set<_Name>)
(assert (=
  module_names_0@801@01
  (Set_union module_names_0@800@01 (Set_singleton (_single<_Name> 537045996460601276127090492134289262)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(66998445785706394921317443506151518062)))
; [eval] (module_names_0 union Set(_single(66998445785706394921317443506151518062)))
; [eval] Set(_single(66998445785706394921317443506151518062))
; [eval] _single(66998445785706394921317443506151518062)
(declare-const module_names_0@802@01 Set<_Name>)
(assert (=
  module_names_0@802@01
  (Set_union module_names_0@801@01 (Set_singleton (_single<_Name> 66998445785706394921317443506151518062)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(20310739190160819980211417108400730593097594594834137266206762356)))
; [eval] (module_names_0 union Set(_single(20310739190160819980211417108400730593097594594834137266206762356)))
; [eval] Set(_single(20310739190160819980211417108400730593097594594834137266206762356))
; [eval] _single(20310739190160819980211417108400730593097594594834137266206762356)
(declare-const module_names_0@803@01 Set<_Name>)
(assert (=
  module_names_0@803@01
  (Set_union module_names_0@802@01 (Set_singleton (_single<_Name> 20310739190160819980211417108400730593097594594834137266206762356)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(20722115329491121490750159404040068219343278561242532232043914612)))
; [eval] (module_names_0 union Set(_single(20722115329491121490750159404040068219343278561242532232043914612)))
; [eval] Set(_single(20722115329491121490750159404040068219343278561242532232043914612))
; [eval] _single(20722115329491121490750159404040068219343278561242532232043914612)
(declare-const module_names_0@804@01 Set<_Name>)
(assert (=
  module_names_0@804@01
  (Set_union module_names_0@803@01 (Set_singleton (_single<_Name> 20722115329491121490750159404040068219343278561242532232043914612)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(21133491468821423001288901699679405845588962527650927197881066868)))
; [eval] (module_names_0 union Set(_single(21133491468821423001288901699679405845588962527650927197881066868)))
; [eval] Set(_single(21133491468821423001288901699679405845588962527650927197881066868))
; [eval] _single(21133491468821423001288901699679405845588962527650927197881066868)
(declare-const module_names_0@805@01 Set<_Name>)
(assert (=
  module_names_0@805@01
  (Set_union module_names_0@804@01 (Set_singleton (_single<_Name> 21133491468821423001288901699679405845588962527650927197881066868)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(21544867608151724511827643995318743471834646494059322163718219124)))
; [eval] (module_names_0 union Set(_single(21544867608151724511827643995318743471834646494059322163718219124)))
; [eval] Set(_single(21544867608151724511827643995318743471834646494059322163718219124))
; [eval] _single(21544867608151724511827643995318743471834646494059322163718219124)
(declare-const module_names_0@806@01 Set<_Name>)
(assert (=
  module_names_0@806@01
  (Set_union module_names_0@805@01 (Set_singleton (_single<_Name> 21544867608151724511827643995318743471834646494059322163718219124)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(21956243747482026022366386290958081098080330460467717129555371380)))
; [eval] (module_names_0 union Set(_single(21956243747482026022366386290958081098080330460467717129555371380)))
; [eval] Set(_single(21956243747482026022366386290958081098080330460467717129555371380))
; [eval] _single(21956243747482026022366386290958081098080330460467717129555371380)
(declare-const module_names_0@807@01 Set<_Name>)
(assert (=
  module_names_0@807@01
  (Set_union module_names_0@806@01 (Set_singleton (_single<_Name> 21956243747482026022366386290958081098080330460467717129555371380)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(256358517615600783551212309835900276)))
; [eval] (module_names_0 union Set(_single(256358517615600783551212309835900276)))
; [eval] Set(_single(256358517615600783551212309835900276))
; [eval] _single(256358517615600783551212309835900276)
(declare-const module_names_0@808@01 Set<_Name>)
(assert (=
  module_names_0@808@01
  (Set_union module_names_0@807@01 (Set_singleton (_single<_Name> 256358517615600783551212309835900276)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(261550814474135611179742806165120372)))
; [eval] (module_names_0 union Set(_single(261550814474135611179742806165120372)))
; [eval] Set(_single(261550814474135611179742806165120372))
; [eval] _single(261550814474135611179742806165120372)
(declare-const module_names_0@809@01 Set<_Name>)
(assert (=
  module_names_0@809@01
  (Set_union module_names_0@808@01 (Set_singleton (_single<_Name> 261550814474135611179742806165120372)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(266743111332670438808273302494340468)))
; [eval] (module_names_0 union Set(_single(266743111332670438808273302494340468)))
; [eval] Set(_single(266743111332670438808273302494340468))
; [eval] _single(266743111332670438808273302494340468)
(declare-const module_names_0@810@01 Set<_Name>)
(assert (=
  module_names_0@810@01
  (Set_union module_names_0@809@01 (Set_singleton (_single<_Name> 266743111332670438808273302494340468)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(271935408191205266436803798823560564)))
; [eval] (module_names_0 union Set(_single(271935408191205266436803798823560564)))
; [eval] Set(_single(271935408191205266436803798823560564))
; [eval] _single(271935408191205266436803798823560564)
(declare-const module_names_0@811@01 Set<_Name>)
(assert (=
  module_names_0@811@01
  (Set_union module_names_0@810@01 (Set_singleton (_single<_Name> 271935408191205266436803798823560564)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1210613653573655721497575526473069678382747652881019790708)))
; [eval] (module_names_0 union Set(_single(1210613653573655721497575526473069678382747652881019790708)))
; [eval] Set(_single(1210613653573655721497575526473069678382747652881019790708))
; [eval] _single(1210613653573655721497575526473069678382747652881019790708)
(declare-const module_names_0@812@01 Set<_Name>)
(assert (=
  module_names_0@812@01
  (Set_union module_names_0@811@01 (Set_singleton (_single<_Name> 1210613653573655721497575526473069678382747652881019790708)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1235133582227509943231309078907474625320647478835957425524)))
; [eval] (module_names_0 union Set(_single(1235133582227509943231309078907474625320647478835957425524)))
; [eval] Set(_single(1235133582227509943231309078907474625320647478835957425524))
; [eval] _single(1235133582227509943231309078907474625320647478835957425524)
(declare-const module_names_0@813@01 Set<_Name>)
(assert (=
  module_names_0@813@01
  (Set_union module_names_0@812@01 (Set_singleton (_single<_Name> 1235133582227509943231309078907474625320647478835957425524)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1259653510881364164965042631341879572258547304790895060340)))
; [eval] (module_names_0 union Set(_single(1259653510881364164965042631341879572258547304790895060340)))
; [eval] Set(_single(1259653510881364164965042631341879572258547304790895060340))
; [eval] _single(1259653510881364164965042631341879572258547304790895060340)
(declare-const module_names_0@814@01 Set<_Name>)
(assert (=
  module_names_0@814@01
  (Set_union module_names_0@813@01 (Set_singleton (_single<_Name> 1259653510881364164965042631341879572258547304790895060340)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1284173439535218386698776183776284519196447130745832695156)))
; [eval] (module_names_0 union Set(_single(1284173439535218386698776183776284519196447130745832695156)))
; [eval] Set(_single(1284173439535218386698776183776284519196447130745832695156))
; [eval] _single(1284173439535218386698776183776284519196447130745832695156)
(declare-const module_names_0@815@01 Set<_Name>)
(assert (=
  module_names_0@815@01
  (Set_union module_names_0@814@01 (Set_singleton (_single<_Name> 1284173439535218386698776183776284519196447130745832695156)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1331083788848620761854815227552775006865160276275469922212349046121844)))
; [eval] (module_names_0 union Set(_single(1331083788848620761854815227552775006865160276275469922212349046121844)))
; [eval] Set(_single(1331083788848620761854815227552775006865160276275469922212349046121844))
; [eval] _single(1331083788848620761854815227552775006865160276275469922212349046121844)
(declare-const module_names_0@816@01 Set<_Name>)
(assert (=
  module_names_0@816@01
  (Set_union module_names_0@815@01 (Set_singleton (_single<_Name> 1331083788848620761854815227552775006865160276275469922212349046121844)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1358043735515771401649482242639794637538797420698010494693452656371060)))
; [eval] (module_names_0 union Set(_single(1358043735515771401649482242639794637538797420698010494693452656371060)))
; [eval] Set(_single(1358043735515771401649482242639794637538797420698010494693452656371060))
; [eval] _single(1358043735515771401649482242639794637538797420698010494693452656371060)
(declare-const module_names_0@817@01 Set<_Name>)
(assert (=
  module_names_0@817@01
  (Set_union module_names_0@816@01 (Set_singleton (_single<_Name> 1358043735515771401649482242639794637538797420698010494693452656371060)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1385003682182922041444149257726814268212434565120551067174556266620276)))
; [eval] (module_names_0 union Set(_single(1385003682182922041444149257726814268212434565120551067174556266620276)))
; [eval] Set(_single(1385003682182922041444149257726814268212434565120551067174556266620276))
; [eval] _single(1385003682182922041444149257726814268212434565120551067174556266620276)
(declare-const module_names_0@818@01 Set<_Name>)
(assert (=
  module_names_0@818@01
  (Set_union module_names_0@817@01 (Set_singleton (_single<_Name> 1385003682182922041444149257726814268212434565120551067174556266620276)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1411963628850072681238816272813833898886071709543091639655659876869492)))
; [eval] (module_names_0 union Set(_single(1411963628850072681238816272813833898886071709543091639655659876869492)))
; [eval] Set(_single(1411963628850072681238816272813833898886071709543091639655659876869492))
; [eval] _single(1411963628850072681238816272813833898886071709543091639655659876869492)
(declare-const module_names_0@819@01 Set<_Name>)
(assert (=
  module_names_0@819@01
  (Set_union module_names_0@818@01 (Set_singleton (_single<_Name> 1411963628850072681238816272813833898886071709543091639655659876869492)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(16800686051082431685168162018509230138740)))
; [eval] (module_names_0 union Set(_single(16800686051082431685168162018509230138740)))
; [eval] Set(_single(16800686051082431685168162018509230138740))
; [eval] _single(16800686051082431685168162018509230138740)
(declare-const module_names_0@820@01 Set<_Name>)
(assert (=
  module_names_0@820@01
  (Set_union module_names_0@819@01 (Set_singleton (_single<_Name> 16800686051082431685168162018509230138740)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(17140968418003370148631536625940998350196)))
; [eval] (module_names_0 union Set(_single(17140968418003370148631536625940998350196)))
; [eval] Set(_single(17140968418003370148631536625940998350196))
; [eval] _single(17140968418003370148631536625940998350196)
(declare-const module_names_0@821@01 Set<_Name>)
(assert (=
  module_names_0@821@01
  (Set_union module_names_0@820@01 (Set_singleton (_single<_Name> 17140968418003370148631536625940998350196)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(3911706079897007969259769521524)))
; [eval] (module_names_0 union Set(_single(3911706079897007969259769521524)))
; [eval] Set(_single(3911706079897007969259769521524))
; [eval] _single(3911706079897007969259769521524)
(declare-const module_names_0@822@01 Set<_Name>)
(assert (=
  module_names_0@822@01
  (Set_union module_names_0@821@01 (Set_singleton (_single<_Name> 3911706079897007969259769521524)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(3911703652452203604468462478708)))
; [eval] (module_names_0 union Set(_single(3911703652452203604468462478708)))
; [eval] Set(_single(3911703652452203604468462478708))
; [eval] _single(3911703652452203604468462478708)
(declare-const module_names_0@823@01 Set<_Name>)
(assert (=
  module_names_0@823@01
  (Set_union module_names_0@822@01 (Set_singleton (_single<_Name> 3911703652452203604468462478708)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(3990931814966467942062006429044)))
; [eval] (module_names_0 union Set(_single(3990931814966467942062006429044)))
; [eval] Set(_single(3990931814966467942062006429044))
; [eval] _single(3990931814966467942062006429044)
(declare-const module_names_0@824@01 Set<_Name>)
(assert (=
  module_names_0@824@01
  (Set_union module_names_0@823@01 (Set_singleton (_single<_Name> 3990931814966467942062006429044)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(11052393309466200004226443808282216292475306852211713396)))
; [eval] (module_names_0 union Set(_single(11052393309466200004226443808282216292475306852211713396)))
; [eval] Set(_single(11052393309466200004226443808282216292475306852211713396))
; [eval] _single(11052393309466200004226443808282216292475306852211713396)
(declare-const module_names_0@825@01 Set<_Name>)
(assert (=
  module_names_0@825@01
  (Set_union module_names_0@824@01 (Set_singleton (_single<_Name> 11052393309466200004226443808282216292475306852211713396)))))
; [exec]
; label __end
; [eval] (forperm _r_131: Ref [MustInvokeBounded(_r_131)] :: false)
; [eval] (forperm _r_131: Ref [MustInvokeUnbounded(_r_131)] :: false)
; [eval] (forperm _r_131: Ref [_r_131.MustReleaseBounded] :: false)
; [eval] (forperm _r_131: Ref [_r_131.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
