(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-13 12:28:23
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Set<$Ref>> 0)
(declare-sort Set<$Snap> 0)
(declare-sort PyType 0)
(declare-sort SIFDomain<Ref> 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
(declare-sort $FVF<__previous> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<__previous>To$Snap ($FVF<__previous>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<__previous> ($Snap) $FVF<__previous>)
(assert (forall ((x $FVF<__previous>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<__previous>($SortWrappers.$FVF<__previous>To$Snap x)))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<__previous>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<__previous>To$Snap($SortWrappers.$SnapTo$FVF<__previous> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<__previous> x))
    :qid |$Snap.$FVF<__previous>To$SnapTo$FVF<__previous>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Set<$Ref>> Set<Set<$Ref>>) Set<$Ref>)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<__previous>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<__previous> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<__previous> $FVF<__previous>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<__previous>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun list___len__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun PSeq___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%stateless ($Ref) Bool)
(declare-fun PSeq___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun list___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
(declare-fun int___le__%precondition ($Snap Int Int) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun list___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun PSeq___create__ ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%limited ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%stateless (Seq<$Ref> PyType) Bool)
(declare-fun PSeq___create__%precondition ($Snap Seq<$Ref> PyType) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___sub__%precondition ($Snap Int Int) Bool)
(declare-fun PSeq___len__ ($Snap $Ref) Int)
(declare-fun PSeq___len__%limited ($Snap $Ref) Int)
(declare-fun PSeq___len__%stateless ($Ref) Bool)
(declare-fun PSeq___len__%precondition ($Snap $Ref) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Set<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Set<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Set<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  :qid |prog.low_true|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<__previous>) (ws $FVF<__previous>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<__previous>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap vs)
              ($SortWrappers.$FVF<__previous>To$Snap ws)
              )
    :qid |qp.$FVF<__previous>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern (($FVF.perm___previous pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern (($FVF.loc___previous f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@68@00 () $Perm)
(declare-fun $k@70@00 () $Perm)
(declare-fun $k@71@00 () $Perm)
(declare-fun $k@74@00 () $Perm)
(declare-fun letvar@72@00 ($Snap $Ref $Ref) Int)
(declare-fun $k@75@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-1989|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-1990|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-1991|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-1992|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2041|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2042|)))
(assert (forall ((s@$ $Snap) (prim@4@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@4@00)
    (__prim__bool___box__ s@$ prim@4@00))
  :pattern ((__prim__bool___box__ s@$ prim@4@00))
  :qid |quant-u-1993|)))
(assert (forall ((s@$ $Snap) (prim@4@00 Bool)) (!
  (__prim__bool___box__%stateless prim@4@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@4@00))
  :qid |quant-u-1994|)))
(assert (forall ((s@$ $Snap) (prim@4@00 Bool)) (!
  (let ((result@5@00 (__prim__bool___box__%limited s@$ prim@4@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@4@00)
    (and
      (= (typeof<PyType> result@5@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@5@00) prim@4@00)
      (= (int___unbox__%limited $Snap.unit result@5@00) (ite prim@4@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@4@00))
  :qid |quant-u-2043|)))
(assert (forall ((s@$ $Snap) (prim@4@00 Bool)) (!
  (let ((result@5@00 (__prim__bool___box__%limited s@$ prim@4@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@4@00))
  :qid |quant-u-2044|)))
(assert (forall ((s@$ $Snap) (prim@4@00 Bool)) (!
  (let ((result@5@00 (__prim__bool___box__%limited s@$ prim@4@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@4@00)
    (bool___unbox__%precondition $Snap.unit result@5@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@4@00))
  :qid |quant-u-2045|)))
(assert (forall ((s@$ $Snap) (prim@4@00 Bool)) (!
  (let ((result@5@00 (__prim__bool___box__%limited s@$ prim@4@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@4@00)
    (int___unbox__%precondition $Snap.unit result@5@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@4@00))
  :qid |quant-u-2046|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@6@00) (bool___unbox__ s@$ box@6@00))
  :pattern ((bool___unbox__ s@$ box@6@00))
  :qid |quant-u-1995|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (bool___unbox__%stateless box@6@00)
  :pattern ((bool___unbox__%limited s@$ box@6@00))
  :qid |quant-u-1996|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (bool___unbox__%limited s@$ box@6@00))) (=>
    (bool___unbox__%precondition s@$ box@6@00)
    (= (__prim__bool___box__%limited $Snap.unit result@7@00) box@6@00)))
  :pattern ((bool___unbox__%limited s@$ box@6@00))
  :qid |quant-u-2047|)))
(assert (forall ((s@$ $Snap) (box@6@00 $Ref)) (!
  (let ((result@7@00 (bool___unbox__%limited s@$ box@6@00))) (=>
    (bool___unbox__%precondition s@$ box@6@00)
    (__prim__bool___box__%precondition $Snap.unit result@7@00)))
  :pattern ((bool___unbox__%limited s@$ box@6@00))
  :qid |quant-u-2048|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@8@00) (int___unbox__ s@$ box@8@00))
  :pattern ((int___unbox__ s@$ box@8@00))
  :qid |quant-u-1997|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (int___unbox__%stateless box@8@00)
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-1998|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (int___unbox__%precondition s@$ box@8@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@9@00) box@8@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@9@00 0)))
          box@8@00)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2049|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (not (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@9@00)))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2050|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@9@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-2051|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@10@00)
    (__prim__int___box__ s@$ prim@10@00))
  :pattern ((__prim__int___box__ s@$ prim@10@00))
  :qid |quant-u-1999|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (__prim__int___box__%stateless prim@10@00)
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2000|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) (=>
    (__prim__int___box__%precondition s@$ prim@10@00)
    (and
      (= (typeof<PyType> result@11@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@11@00) prim@10@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2052|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2053|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Int)) (!
  (let ((result@11@00 (__prim__int___box__%limited s@$ prim@10@00))) (=>
    (__prim__int___box__%precondition s@$ prim@10@00)
    (int___unbox__%precondition $Snap.unit result@11@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@10@00))
  :qid |quant-u-2054|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref)) (!
  (= (list___len__%limited s@$ self@12@00) (list___len__ s@$ self@12@00))
  :pattern ((list___len__ s@$ self@12@00))
  :qid |quant-u-2001|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref)) (!
  (list___len__%stateless self@12@00)
  :pattern ((list___len__%limited s@$ self@12@00))
  :qid |quant-u-2002|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@68@00)
    (=>
      (list___len__%precondition s@$ self@12@00)
      (=
        (list___len__ s@$ self@12@00)
        (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))))))
  :pattern ((list___len__ s@$ self@12@00))
  :qid |quant-u-2055|)))
(assert (forall ((s@$ $Snap) (self@12@00 $Ref)) (!
  true
  :pattern ((list___len__ s@$ self@12@00))
  :qid |quant-u-2056|)))
(assert (forall ((s@$ $Snap) (id@14@00 Int)) (!
  (= (_isDefined%limited s@$ id@14@00) (_isDefined s@$ id@14@00))
  :pattern ((_isDefined s@$ id@14@00))
  :qid |quant-u-2003|)))
(assert (forall ((s@$ $Snap) (id@14@00 Int)) (!
  (_isDefined%stateless id@14@00)
  :pattern ((_isDefined%limited s@$ id@14@00))
  :qid |quant-u-2004|)))
(assert (forall ((s@$ $Snap) (box@16@00 $Ref)) (!
  (= (PSeq___sil_seq__%limited s@$ box@16@00) (PSeq___sil_seq__ s@$ box@16@00))
  :pattern ((PSeq___sil_seq__ s@$ box@16@00))
  :qid |quant-u-2005|)))
(assert (forall ((s@$ $Snap) (box@16@00 $Ref)) (!
  (PSeq___sil_seq__%stateless box@16@00)
  :pattern ((PSeq___sil_seq__%limited s@$ box@16@00))
  :qid |quant-u-2006|)))
(assert (forall ((s@$ $Snap) (r@18@00 $Ref)) (!
  (= (Level%limited s@$ r@18@00) (Level s@$ r@18@00))
  :pattern ((Level s@$ r@18@00))
  :qid |quant-u-2007|)))
(assert (forall ((s@$ $Snap) (r@18@00 $Ref)) (!
  (Level%stateless r@18@00)
  :pattern ((Level%limited s@$ r@18@00))
  :qid |quant-u-2008|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (=
    (str___create__%limited s@$ len@20@00 value@21@00)
    (str___create__ s@$ len@20@00 value@21@00))
  :pattern ((str___create__ s@$ len@20@00 value@21@00))
  :qid |quant-u-2009|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (str___create__%stateless len@20@00 value@21@00)
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-2010|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) (=>
    (str___create__%precondition s@$ len@20@00 value@21@00)
    (and
      (= (str___len__ $Snap.unit result@22@00) len@20@00)
      (= (str___val__ $Snap.unit result@22@00) value@21@00)
      (= (typeof<PyType> result@22@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-2057|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) (=>
    (str___create__%precondition s@$ len@20@00 value@21@00)
    (str___len__%precondition $Snap.unit result@22@00)))
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-2058|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) (=>
    (str___create__%precondition s@$ len@20@00 value@21@00)
    (str___val__%precondition $Snap.unit result@22@00)))
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-2059|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) true)
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-2060|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (key@24@00 $Ref)) (!
  (=
    (list___getitem__%limited s@$ self@23@00 key@24@00)
    (list___getitem__ s@$ self@23@00 key@24@00))
  :pattern ((list___getitem__ s@$ self@23@00 key@24@00))
  :qid |quant-u-2011|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (key@24@00 $Ref)) (!
  (list___getitem__%stateless self@23@00 key@24@00)
  :pattern ((list___getitem__%limited s@$ self@23@00 key@24@00))
  :qid |quant-u-2012|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (key@24@00 $Ref)) (!
  (let ((result@25@00 (list___getitem__%limited s@$ self@23@00 key@24@00))) (and
    ($Perm.isReadVar $k@70@00)
    ($Perm.isReadVar $k@71@00)
    ($Perm.isReadVar $k@74@00)
    (=>
      (list___getitem__%precondition s@$ self@23@00 key@24@00)
      (and
        (=
          result@25@00
          (ite
            (>= (int___unbox__ $Snap.unit key@24@00) 0)
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (int___unbox__ $Snap.unit key@24@00))
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (+
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second s@$)))) self@23@00)
                (int___unbox__ $Snap.unit key@24@00)))))
        (issubtype<Bool> (typeof<PyType> result@25@00) (list_arg<PyType> (typeof<PyType> self@23@00) 0))))))
  :pattern ((list___getitem__%limited s@$ self@23@00 key@24@00))
  :qid |quant-u-2061|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (key@24@00 $Ref)) (!
  (let ((result@25@00 (list___getitem__%limited s@$ self@23@00 key@24@00))) (=>
    (list___getitem__%precondition s@$ self@23@00 key@24@00)
    (and
      (int___unbox__%precondition $Snap.unit key@24@00)
      (ite
        (>= (int___unbox__ $Snap.unit key@24@00) 0)
        (int___unbox__%precondition $Snap.unit key@24@00)
        (and
          (list___len__%precondition ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second s@$)))) self@23@00)
          (int___unbox__%precondition $Snap.unit key@24@00))))))
  :pattern ((list___getitem__%limited s@$ self@23@00 key@24@00))
  :qid |quant-u-2062|)))
(assert (forall ((s@$ $Snap) (self@23@00 $Ref) (key@24@00 $Ref)) (!
  (let ((result@25@00 (list___getitem__%limited s@$ self@23@00 key@24@00))) true)
  :pattern ((list___getitem__%limited s@$ self@23@00 key@24@00))
  :qid |quant-u-2063|)))
(assert (forall ((s@$ $Snap) (self@26@00 Int) (other@27@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@26@00 other@27@00)
    (int___lt__ s@$ self@26@00 other@27@00))
  :pattern ((int___lt__ s@$ self@26@00 other@27@00))
  :qid |quant-u-2013|)))
(assert (forall ((s@$ $Snap) (self@26@00 Int) (other@27@00 Int)) (!
  (int___lt__%stateless self@26@00 other@27@00)
  :pattern ((int___lt__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-2014|)))
(assert (forall ((s@$ $Snap) (self@26@00 Int) (other@27@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@26@00 other@27@00)
    (= (int___lt__ s@$ self@26@00 other@27@00) (< self@26@00 other@27@00)))
  :pattern ((int___lt__ s@$ self@26@00 other@27@00))
  :qid |quant-u-2064|)))
(assert (forall ((s@$ $Snap) (self@26@00 Int) (other@27@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@26@00 other@27@00))
  :qid |quant-u-2065|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-2015|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-2016|)))
(assert (forall ((s@$ $Snap) (val@30@00 $Ref) (id@31@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@30@00 id@31@00)
    (_checkDefined s@$ val@30@00 id@31@00))
  :pattern ((_checkDefined s@$ val@30@00 id@31@00))
  :qid |quant-u-2017|)))
(assert (forall ((s@$ $Snap) (val@30@00 $Ref) (id@31@00 Int)) (!
  (_checkDefined%stateless val@30@00 id@31@00)
  :pattern ((_checkDefined%limited s@$ val@30@00 id@31@00))
  :qid |quant-u-2018|)))
(assert (forall ((s@$ $Snap) (val@30@00 $Ref) (id@31@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@30@00 id@31@00)
    (= (_checkDefined s@$ val@30@00 id@31@00) val@30@00))
  :pattern ((_checkDefined s@$ val@30@00 id@31@00))
  :qid |quant-u-2066|)))
(assert (forall ((s@$ $Snap) (val@30@00 $Ref) (id@31@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@30@00 id@31@00))
  :qid |quant-u-2067|)))
(assert (forall ((s@$ $Snap) (self@33@00 Int) (other@34@00 Int)) (!
  (=
    (int___le__%limited s@$ self@33@00 other@34@00)
    (int___le__ s@$ self@33@00 other@34@00))
  :pattern ((int___le__ s@$ self@33@00 other@34@00))
  :qid |quant-u-2019|)))
(assert (forall ((s@$ $Snap) (self@33@00 Int) (other@34@00 Int)) (!
  (int___le__%stateless self@33@00 other@34@00)
  :pattern ((int___le__%limited s@$ self@33@00 other@34@00))
  :qid |quant-u-2020|)))
(assert (forall ((s@$ $Snap) (self@33@00 Int) (other@34@00 Int)) (!
  (=>
    (int___le__%precondition s@$ self@33@00 other@34@00)
    (= (int___le__ s@$ self@33@00 other@34@00) (<= self@33@00 other@34@00)))
  :pattern ((int___le__ s@$ self@33@00 other@34@00))
  :qid |quant-u-2068|)))
(assert (forall ((s@$ $Snap) (self@33@00 Int) (other@34@00 Int)) (!
  true
  :pattern ((int___le__ s@$ self@33@00 other@34@00))
  :qid |quant-u-2069|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  (= (list___sil_seq__%limited s@$ self@36@00) (list___sil_seq__ s@$ self@36@00))
  :pattern ((list___sil_seq__ s@$ self@36@00))
  :qid |quant-u-2021|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  (list___sil_seq__%stateless self@36@00)
  :pattern ((list___sil_seq__%limited s@$ self@36@00))
  :qid |quant-u-2022|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@75@00)
    (=>
      (list___sil_seq__%precondition s@$ self@36@00)
      (= (list___sil_seq__ s@$ self@36@00) ($SortWrappers.$SnapToSeq<$Ref> s@$))))
  :pattern ((list___sil_seq__ s@$ self@36@00))
  :qid |quant-u-2070|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  true
  :pattern ((list___sil_seq__ s@$ self@36@00))
  :qid |quant-u-2071|)))
(assert (forall ((s@$ $Snap) (prim@38@00 Seq<$Ref>) (cont_type@39@00 PyType)) (!
  (=
    (PSeq___create__%limited s@$ prim@38@00 cont_type@39@00)
    (PSeq___create__ s@$ prim@38@00 cont_type@39@00))
  :pattern ((PSeq___create__ s@$ prim@38@00 cont_type@39@00))
  :qid |quant-u-2023|)))
(assert (forall ((s@$ $Snap) (prim@38@00 Seq<$Ref>) (cont_type@39@00 PyType)) (!
  (PSeq___create__%stateless prim@38@00 cont_type@39@00)
  :pattern ((PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))
  :qid |quant-u-2024|)))
(assert (forall ((s@$ $Snap) (prim@38@00 Seq<$Ref>) (cont_type@39@00 PyType)) (!
  (let ((result@40@00 (PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))) (=>
    (PSeq___create__%precondition s@$ prim@38@00 cont_type@39@00)
    (and
      (= (typeof<PyType> result@40@00) (PSeq<PyType> cont_type@39@00))
      (Seq_equal (PSeq___sil_seq__ $Snap.unit result@40@00) prim@38@00))))
  :pattern ((PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))
  :qid |quant-u-2072|)))
(assert (forall ((s@$ $Snap) (prim@38@00 Seq<$Ref>) (cont_type@39@00 PyType)) (!
  (let ((result@40@00 (PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))) true)
  :pattern ((PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))
  :qid |quant-u-2073|)))
(assert (forall ((s@$ $Snap) (prim@38@00 Seq<$Ref>) (cont_type@39@00 PyType)) (!
  (let ((result@40@00 (PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))) (=>
    (PSeq___create__%precondition s@$ prim@38@00 cont_type@39@00)
    (PSeq___sil_seq__%precondition $Snap.unit result@40@00)))
  :pattern ((PSeq___create__%limited s@$ prim@38@00 cont_type@39@00))
  :qid |quant-u-2074|)))
(assert (forall ((s@$ $Snap) (map@41@00 Seq<Measure$>) (key@42@00 $Ref) (value@43@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@41@00 key@42@00 value@43@00)
    (Measure$check s@$ map@41@00 key@42@00 value@43@00))
  :pattern ((Measure$check s@$ map@41@00 key@42@00 value@43@00))
  :qid |quant-u-2025|)))
(assert (forall ((s@$ $Snap) (map@41@00 Seq<Measure$>) (key@42@00 $Ref) (value@43@00 Int)) (!
  (Measure$check%stateless map@41@00 key@42@00 value@43@00)
  :pattern ((Measure$check%limited s@$ map@41@00 key@42@00 value@43@00))
  :qid |quant-u-2026|)))
(assert (forall ((s@$ $Snap) (map@41@00 Seq<Measure$>) (key@42@00 $Ref) (value@43@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@41@00 key@42@00 value@43@00)
    (=
      (Measure$check s@$ map@41@00 key@42@00 value@43@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@41@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@42@00)))
          (> (Measure$value<Int> m) value@43@00))
        :pattern ((Seq_contains map@41@00 m))
        :pattern ((Seq_contains_trigger map@41@00 m))
        :pattern ((Seq_contains_trigger map@41@00 m))
        ))))
  :pattern ((Measure$check s@$ map@41@00 key@42@00 value@43@00))
  :qid |quant-u-2075|)))
(assert (forall ((s@$ $Snap) (map@41@00 Seq<Measure$>) (key@42@00 $Ref) (value@43@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@41@00 key@42@00 value@43@00))
  :qid |quant-u-2076|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@45@00 other@46@00)
    (str___eq__ s@$ self@45@00 other@46@00))
  :pattern ((str___eq__ s@$ self@45@00 other@46@00))
  :qid |quant-u-2027|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (str___eq__%stateless self@45@00 other@46@00)
  :pattern ((str___eq__%limited s@$ self@45@00 other@46@00))
  :qid |quant-u-2028|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (let ((result@47@00 (str___eq__%limited s@$ self@45@00 other@46@00))) (=>
    (str___eq__%precondition s@$ self@45@00 other@46@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@45@00)
          (str___val__ $Snap.unit other@46@00))
        result@47@00)
      (=>
        result@47@00
        (=
          (str___len__ $Snap.unit self@45@00)
          (str___len__ $Snap.unit other@46@00))))))
  :pattern ((str___eq__%limited s@$ self@45@00 other@46@00))
  :qid |quant-u-2077|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (let ((result@47@00 (str___eq__%limited s@$ self@45@00 other@46@00))) (=>
    (str___eq__%precondition s@$ self@45@00 other@46@00)
    (and
      (str___val__%precondition $Snap.unit self@45@00)
      (str___val__%precondition $Snap.unit other@46@00))))
  :pattern ((str___eq__%limited s@$ self@45@00 other@46@00))
  :qid |quant-u-2078|)))
(assert (forall ((s@$ $Snap) (self@45@00 $Ref) (other@46@00 $Ref)) (!
  (let ((result@47@00 (str___eq__%limited s@$ self@45@00 other@46@00))) (=>
    (and (str___eq__%precondition s@$ self@45@00 other@46@00) result@47@00)
    (and
      (str___len__%precondition $Snap.unit self@45@00)
      (str___len__%precondition $Snap.unit other@46@00))))
  :pattern ((str___eq__%limited s@$ self@45@00 other@46@00))
  :qid |quant-u-2079|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@48@00 other@49@00)
    (int___gt__ s@$ self@48@00 other@49@00))
  :pattern ((int___gt__ s@$ self@48@00 other@49@00))
  :qid |quant-u-2029|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (int___gt__%stateless self@48@00 other@49@00)
  :pattern ((int___gt__%limited s@$ self@48@00 other@49@00))
  :qid |quant-u-2030|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@48@00 other@49@00)
    (= (int___gt__ s@$ self@48@00 other@49@00) (> self@48@00 other@49@00)))
  :pattern ((int___gt__ s@$ self@48@00 other@49@00))
  :qid |quant-u-2080|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@48@00 other@49@00))
  :qid |quant-u-2081|)))
(assert (forall ((s@$ $Snap) (self@51@00 Int) (other@52@00 Int)) (!
  (=
    (int___add__%limited s@$ self@51@00 other@52@00)
    (int___add__ s@$ self@51@00 other@52@00))
  :pattern ((int___add__ s@$ self@51@00 other@52@00))
  :qid |quant-u-2031|)))
(assert (forall ((s@$ $Snap) (self@51@00 Int) (other@52@00 Int)) (!
  (int___add__%stateless self@51@00 other@52@00)
  :pattern ((int___add__%limited s@$ self@51@00 other@52@00))
  :qid |quant-u-2032|)))
(assert (forall ((s@$ $Snap) (self@51@00 Int) (other@52@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@51@00 other@52@00)
    (= (int___add__ s@$ self@51@00 other@52@00) (+ self@51@00 other@52@00)))
  :pattern ((int___add__ s@$ self@51@00 other@52@00))
  :qid |quant-u-2082|)))
(assert (forall ((s@$ $Snap) (self@51@00 Int) (other@52@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@51@00 other@52@00))
  :qid |quant-u-2083|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@54@00 other@55@00)
    (int___sub__ s@$ self@54@00 other@55@00))
  :pattern ((int___sub__ s@$ self@54@00 other@55@00))
  :qid |quant-u-2033|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  (int___sub__%stateless self@54@00 other@55@00)
  :pattern ((int___sub__%limited s@$ self@54@00 other@55@00))
  :qid |quant-u-2034|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  (=>
    (int___sub__%precondition s@$ self@54@00 other@55@00)
    (= (int___sub__ s@$ self@54@00 other@55@00) (- self@54@00 other@55@00)))
  :pattern ((int___sub__ s@$ self@54@00 other@55@00))
  :qid |quant-u-2084|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  true
  :pattern ((int___sub__ s@$ self@54@00 other@55@00))
  :qid |quant-u-2085|)))
(assert (forall ((s@$ $Snap) (self@57@00 $Ref)) (!
  (= (PSeq___len__%limited s@$ self@57@00) (PSeq___len__ s@$ self@57@00))
  :pattern ((PSeq___len__ s@$ self@57@00))
  :qid |quant-u-2035|)))
(assert (forall ((s@$ $Snap) (self@57@00 $Ref)) (!
  (PSeq___len__%stateless self@57@00)
  :pattern ((PSeq___len__%limited s@$ self@57@00))
  :qid |quant-u-2036|)))
(assert (forall ((s@$ $Snap) (self@57@00 $Ref)) (!
  (let ((result@58@00 (PSeq___len__%limited s@$ self@57@00))) (=>
    (PSeq___len__%precondition s@$ self@57@00)
    (= result@58@00 (Seq_length (PSeq___sil_seq__ $Snap.unit self@57@00)))))
  :pattern ((PSeq___len__%limited s@$ self@57@00))
  :qid |quant-u-2086|)))
(assert (forall ((s@$ $Snap) (self@57@00 $Ref)) (!
  (let ((result@58@00 (PSeq___len__%limited s@$ self@57@00))) (=>
    (PSeq___len__%precondition s@$ self@57@00)
    (PSeq___sil_seq__%precondition $Snap.unit self@57@00)))
  :pattern ((PSeq___len__%limited s@$ self@57@00))
  :qid |quant-u-2087|)))
(assert (forall ((s@$ $Snap) (self@59@00 $Ref) (other@60@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@59@00 other@60@00)
    (int___eq__ s@$ self@59@00 other@60@00))
  :pattern ((int___eq__ s@$ self@59@00 other@60@00))
  :qid |quant-u-2037|)))
(assert (forall ((s@$ $Snap) (self@59@00 $Ref) (other@60@00 $Ref)) (!
  (int___eq__%stateless self@59@00 other@60@00)
  :pattern ((int___eq__%limited s@$ self@59@00 other@60@00))
  :qid |quant-u-2038|)))
(assert (forall ((s@$ $Snap) (self@59@00 $Ref) (other@60@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@59@00 other@60@00)
    (=
      (int___eq__ s@$ self@59@00 other@60@00)
      (=
        (int___unbox__ $Snap.unit self@59@00)
        (int___unbox__ $Snap.unit other@60@00))))
  :pattern ((int___eq__ s@$ self@59@00 other@60@00))
  :qid |quant-u-2088|)))
(assert (forall ((s@$ $Snap) (self@59@00 $Ref) (other@60@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@59@00 other@60@00)
    (and
      (int___unbox__%precondition $Snap.unit self@59@00)
      (int___unbox__%precondition $Snap.unit other@60@00)))
  :pattern ((int___eq__ s@$ self@59@00 other@60@00))
  :qid |quant-u-2089|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-2039|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-2040|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- quickSort ----------
(declare-const _cthread_156@0@01 $Ref)
(declare-const _caller_measures_156@1@01 Seq<Measure$>)
(declare-const _residue_156@2@01 $Perm)
(declare-const arr@3@01 $Ref)
(declare-const _current_wait_level_156@4@01 $Perm)
(declare-const _res@5@01 $Ref)
(declare-const _cthread_156@6@01 $Ref)
(declare-const _caller_measures_156@7@01 Seq<Measure$>)
(declare-const _residue_156@8@01 $Perm)
(declare-const arr@9@01 $Ref)
(declare-const _current_wait_level_156@10@01 $Perm)
(declare-const _res@11@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@6@01 $Ref.null)))
(assert (=
  ($Snap.second $t@12@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@01))
    ($Snap.second ($Snap.second $t@12@01)))))
(assert (= ($Snap.first ($Snap.second $t@12@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@6@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@12@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@01))) $Snap.unit))
; [eval] issubtype(typeof(arr), list(int()))
; [eval] typeof(arr)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> arr@9@01) (list<PyType> (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
(assert (not (= arr@9@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  $Snap.unit))
; [eval] int___add__(2, list___len__(arr)) > 0
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(push) ; 2
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> arr@9@01) (list<PyType> (list_arg<PyType> (typeof<PyType> arr@9@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> arr@9@01) (list<PyType> (list_arg<PyType> (typeof<PyType> arr@9@01) 0))))
(declare-const $k@13@01 $Perm)
(assert ($Perm.isReadVar $k@13@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@13@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@13@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> arr@9@01) (list<PyType> (list_arg<PyType> (typeof<PyType> arr@9@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
(set-option :timeout 0)
(push) ; 2
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
(pop) ; 2
; Joined path conditions
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
(assert (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@14@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@01))
    ($Snap.second ($Snap.second $t@14@01)))))
(assert (= ($Snap.first ($Snap.second $t@14@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@14@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@14@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@8@01 _current_wait_level_156@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@11@01) (list<PyType> (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 3
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@15@01 $Perm)
(assert ($Perm.isReadVar $k@15@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@15@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01))
(set-option :timeout 0)
(push) ; 3
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(pop) ; 3
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1) | live]
; [else-branch: 0 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(push) ; 4
(set-option :timeout 10)
(assert (not (= arr@9@01 _res@11@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@11@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@16@01 $Perm)
(assert ($Perm.isReadVar $k@16@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@16@01))
(set-option :timeout 0)
(push) ; 4
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(pop) ; 4
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1) | dead]
; [else-branch: 1 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 1 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 0 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1))]
(assert (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 4
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@17@01 $Perm)
(assert ($Perm.isReadVar $k@17@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@17@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@17@01))
(set-option :timeout 0)
(push) ; 4
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(pop) ; 4
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1) | live]
; [else-branch: 2 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1)) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:($t@14@01)))))), arr@9@01), 1)]
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
; [eval] _res == arr
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1))
(assert (=>
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))) arr@9@01) 1)
  (= _res@11@01 arr@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@18@01 $Ref)
; [exec]
; var less: Ref
(declare-const less@19@01 $Ref)
; [exec]
; var pivotList: Ref
(declare-const pivotList@20@01 $Ref)
; [exec]
; var more: Ref
(declare-const more@21@01 $Ref)
; [exec]
; var pivot: Ref
(declare-const pivot@22@01 $Ref)
; [exec]
; var i: Ref
(declare-const i@23@01 $Ref)
; [exec]
; var arr_0: Ref
(declare-const arr_0@24@01 $Ref)
; [exec]
; var list_0: Ref
(declare-const list_0@25@01 $Ref)
; [exec]
; var list_1: Ref
(declare-const list_1@26@01 $Ref)
; [exec]
; var list_2: Ref
(declare-const list_2@27@01 $Ref)
; [exec]
; var iterable: Ref
(declare-const iterable@28@01 $Ref)
; [exec]
; var iter: Ref
(declare-const iter@29@01 $Ref)
; [exec]
; var loop_target: Ref
(declare-const loop_target@30@01 $Ref)
; [exec]
; var iter_err: Ref
(declare-const iter_err@31@01 $Ref)
; [exec]
; var seqtmp: Seq[Ref]
(declare-const seqtmp@32@01 Seq<$Ref>)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@33@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@34@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@35@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@36@01 $Perm)
; [exec]
; var _residue_157: Perm
(declare-const _residue_157@37@01 $Perm)
; [exec]
; var quickSort_res: Ref
(declare-const quickSort_res@38@01 $Ref)
; [exec]
; var quickSort_res_0: Ref
(declare-const quickSort_res_0@39@01 $Ref)
; [exec]
; var target: Ref
(declare-const target@40@01 $Ref)
; [exec]
; var target_0: Ref
(declare-const target_0@41@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@42@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@43@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq(Measure$create(true, _cthread_156, int___add__(2,
;   list___len__(arr))))
; [eval] Seq(Measure$create(true, _cthread_156, int___add__(2, list___len__(arr))))
; [eval] Measure$create(true, _cthread_156, int___add__(2, list___len__(arr)))
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(push) ; 3
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@44@01 $Perm)
(assert ($Perm.isReadVar $k@44@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@44@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@44@01))
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))))
  1))
(declare-const _method_measures_156@45@01 Seq<Measure$>)
(assert (=
  _method_measures_156@45@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01))))))
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; arr_0 := arr
; [exec]
; _cwl_156, list_0 := list___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@46@01 $Perm)
(declare-const res@47@01 $Ref)
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 ($Snap.combine ($Snap.first $t@48@01) ($Snap.second $t@48@01))))
(assert (= ($Snap.first $t@48@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@48@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@48@01))
    ($Snap.second ($Snap.second $t@48@01)))))
(assert (= ($Snap.first ($Snap.second $t@48@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@48@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@48@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@48@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_156@8@01 _current_wait_level_8@46@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@48@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= arr@9@01 res@47@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@47@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@47@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@47@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@47@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_0), list(int()))
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] issubtype(typeof(list_0), list(int()))
; [eval] typeof(list_0)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@47@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; less := list_0
; [exec]
; inhale _isDefined(1936942444)
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 $Snap.unit))
; [eval] _isDefined(1936942444)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 1936942444))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 1936942444))
(assert (_isDefined $Snap.unit 1936942444))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, list_1 := list___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@51@01 $Perm)
(declare-const res@52@01 $Ref)
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 ($Snap.combine ($Snap.first $t@53@01) ($Snap.second $t@53@01))))
(assert (= ($Snap.first $t@53@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@53@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@53@01))
    ($Snap.second ($Snap.second $t@53@01)))))
(assert (= ($Snap.first ($Snap.second $t@53@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@53@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@53@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@53@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_156@8@01 _current_wait_level_8@51@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@53@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@47@01 res@52@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= arr@9@01 res@52@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@52@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@52@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@52@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@52@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_1), list(int()))
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 $Snap.unit))
; [eval] issubtype(typeof(list_1), list(int()))
; [eval] typeof(list_1)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@52@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; pivotList := list_1
; [exec]
; inhale _isDefined(2148138574800194267504)
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] _isDefined(2148138574800194267504)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 2148138574800194267504))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 2148138574800194267504))
(assert (_isDefined $Snap.unit 2148138574800194267504))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, list_2 := list___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@56@01 $Perm)
(declare-const res@57@01 $Ref)
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 ($Snap.combine ($Snap.first $t@58@01) ($Snap.second $t@58@01))))
(assert (= ($Snap.first $t@58@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@58@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    ($Snap.second ($Snap.second $t@58@01)))))
(assert (= ($Snap.first ($Snap.second $t@58@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@58@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@58@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_156@8@01 _current_wait_level_8@56@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@52@01 res@57@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@47@01 res@57@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= arr@9@01 res@57@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@57@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@57@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@57@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@57@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_2), list(int()))
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 $Snap.unit))
; [eval] issubtype(typeof(list_2), list(int()))
; [eval] typeof(list_2)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@57@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; more := list_2
; [exec]
; inhale _isDefined(1701998445)
(declare-const $t@60@01 $Snap)
(assert (= $t@60@01 $Snap.unit))
; [eval] _isDefined(1701998445)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 1701998445))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 1701998445))
(assert (_isDefined $Snap.unit 1701998445))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] int___le__(list___len__(arr_0), 1)
; [eval] list___len__(arr_0)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@61@01 $Perm)
(assert ($Perm.isReadVar $k@61@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@61@01))
(set-option :timeout 0)
(push) ; 3
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))
(pop) ; 3
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1) | live]
; [else-branch: 3 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)]
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))
; [exec]
; _res := arr_0
; [exec]
; label __end
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 4
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@62@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@62@01))
(set-option :timeout 0)
(push) ; 4
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))
(pop) ; 4
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1) | dead]
; [else-branch: 4 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 4 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1))]
(assert (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1)))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@63@01 $Perm)
(assert ($Perm.isReadVar $k@63@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@63@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@63@01))
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1) | live]
; [else-branch: 5 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 5 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)]
; [eval] _res == arr
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 3 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1)))
(pop) ; 3
; [eval] !int___le__(list___len__(arr_0), 1)
; [eval] int___le__(list___len__(arr_0), 1)
; [eval] list___len__(arr_0)
(push) ; 3
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@64@01))
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)) | live]
; [else-branch: 6 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1)))
; [exec]
; pivot := list___getitem__(arr_0, __prim__int___box__(0))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 4
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@65@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@66@01 $Perm)
(assert ($Perm.isReadVar $k@66@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@66@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@66@01))
(declare-const letvar@67@01 Int)
(assert (=
  (as letvar@67@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit 0)))
(pop) ; 5
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit 0)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 7 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 7 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(assert (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(push) ; 5
; [then-branch: 8 | False | live]
; [else-branch: 8 | True | live]
(push) ; 6
; [then-branch: 8 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 8 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 9 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 9 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))
(push) ; 5
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@65@01))
(assert ($Perm.isReadVar $k@66@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (=
    (as letvar@67@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01))
  (int___unbox__%precondition $Snap.unit (__prim__int___box__ $Snap.unit 0))
  (not (< (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (=>
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))))
(declare-const pivot@68@01 $Ref)
(assert (=
  pivot@68@01
  (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))))
; [exec]
; inhale _isDefined(500086237552)
(declare-const $t@69@01 $Snap)
(assert (= $t@69@01 $Snap.unit))
; [eval] _isDefined(500086237552)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 500086237552))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 500086237552))
(assert (_isDefined $Snap.unit 500086237552))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable := arr_0
; [exec]
; _cwl_156, iter := list___iter__(_cthread_156, _method_measures_156, _residue_156,
;   iterable)
; [eval] _cthread_13 != null
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] issubtype(typeof(_cthread_13), Thread_0())
; [eval] typeof(_cthread_13)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(declare-const _current_wait_level_13@70@01 $Perm)
(declare-const _res@71@01 $Ref)
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 ($Snap.combine ($Snap.first $t@72@01) ($Snap.second $t@72@01))))
(assert (= ($Snap.first $t@72@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_13)
(assert (=
  ($Snap.second $t@72@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@72@01))
    ($Snap.second ($Snap.second $t@72@01)))))
(assert (= ($Snap.first ($Snap.second $t@72@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_13)
(assert (=
  ($Snap.second ($Snap.second $t@72@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@72@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@72@01))) $Snap.unit))
; [eval] _residue_13 <= _current_wait_level_13
(assert (<= _residue_156@8@01 _current_wait_level_13@70@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@72@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@71@01 arr@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@57@01 _res@71@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@52@01 _res@71@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@47@01 _res@71@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= arr@9@01 _res@71@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@71@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == self.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
  arr@9@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@71@01) (Iterator<PyType> (list_arg<PyType> (typeof<PyType> arr@9@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_156, loop_target, iter_err := Iterator___next__(_cthread_156, _method_measures_156,
;   _residue_156, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(declare-const _current_wait_level_149@73@01 $Perm)
(declare-const _res@74@01 $Ref)
(declare-const _err@75@01 $Ref)
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 ($Snap.combine ($Snap.first $t@76@01) ($Snap.second $t@76@01))))
(assert (= ($Snap.first $t@76@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@76@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@76@01))
    ($Snap.second ($Snap.second $t@76@01)))))
(assert (= ($Snap.first ($Snap.second $t@76@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@76@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@76@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@76@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_156@8@01 _current_wait_level_149@73@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@76@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))
  (not (= _err@75@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@75@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | _err@75@01 == Null | live]
; [else-branch: 10 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 10 | _err@75@01 == Null]
(assert (= _err@75@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (= _err@75@01 $Ref.null))
(assert (=>
  (= _err@75@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | _err@75@01 == Null | live]
; [else-branch: 11 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | _err@75@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= _err@75@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | _err@75@01 == Null | live]
; [else-branch: 12 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 12 | _err@75@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= _err@75@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 13 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 13 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 4
; [then-branch: 14 | _err@75@01 != Null | dead]
; [else-branch: 14 | _err@75@01 == Null | live]
(push) ; 5
; [else-branch: 14 | _err@75@01 == Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 4
; [then-branch: 15 | _err@75@01 != Null | dead]
; [else-branch: 15 | _err@75@01 == Null | live]
(push) ; 5
; [else-branch: 15 | _err@75@01 == Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 16 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 16 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 6
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 17 | _res@74@01 != First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 1] | live]
; [else-branch: 17 | _res@74@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 1] | live]
(push) ; 7
; [then-branch: 17 | _res@74@01 != First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 1]]
(assert (not
  (=
    _res@74@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 17 | _res@74@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 1]]
(assert (=
  _res@74@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@74@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)))
  (not
    (=
      _res@74@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (or
    (=
      _res@74@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)))
    (not
      (=
        _res@74@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (and
    (=
      _res@74@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      _res@74@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 18 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 18 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@74@01) (Iterator_arg<PyType> (typeof<PyType> _res@71@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@77@01 $Ref)
(push) ; 4
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 5
; [then-branch: 19 | r@77@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01)))))))))))) | live]
; [else-branch: 19 | !(r@77@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))))))) | live]
(push) ; 6
; [then-branch: 19 | r@77@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
  r@77@01))
(pop) ; 6
(push) ; 6
; [else-branch: 19 | !(r@77@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
    r@77@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 7
; [then-branch: 20 | !(First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1) | live]
; [else-branch: 20 | First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1 | live]
(push) ; 8
; [then-branch: 20 | !(First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)))
(pop) ; 8
(push) ; 8
; [else-branch: 20 | First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 21 | r@77@01 != First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2] | live]
; [else-branch: 21 | r@77@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2] | live]
(push) ; 10
; [then-branch: 21 | r@77@01 != First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2]]
(assert (not
  (=
    r@77@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        2)))))
(pop) ; 10
(push) ; 10
; [else-branch: 21 | r@77@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2]]
(assert (=
  r@77@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      2))))
; [eval] _err == null
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@77@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        2)))
  (not
    (=
      r@77@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          2))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (or
      (=
        r@77@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            2)))
      (not
        (=
          r@77@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1))))
(push) ; 7
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1 && r@77@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2] && _err@75@01 == Null | live]
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1 && r@77@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2] && _err@75@01 == Null) | live]
(push) ; 8
; [then-branch: 22 | First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1 && r@77@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2] && _err@75@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  (and
    (=
      r@77@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          2)))
    (= _err@75@01 $Ref.null))))
(pop) ; 8
(push) ; 8
; [else-branch: 22 | !(First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 1 && r@77@01 == First:(Second:(Second:(Second:(Second:($t@72@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) - 2] && _err@75@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (and
      (=
        r@77@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            2)))
      (= _err@75@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 9
; [then-branch: 23 | !(First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 0) | live]
; [else-branch: 23 | First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 0 | live]
(push) ; 10
; [then-branch: 23 | !(First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    0)))
(pop) ; 10
(push) ; 10
; [else-branch: 23 | First:(Second:(Second:(Second:(Second:(Second:($t@76@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  0))
; [eval] _err != null
(push) ; 11
; [then-branch: 24 | _err@75@01 == Null | live]
; [else-branch: 24 | _err@75@01 != Null | live]
(push) ; 12
; [then-branch: 24 | _err@75@01 == Null]
(assert (= _err@75@01 $Ref.null))
(pop) ; 12
(push) ; 12
; [else-branch: 24 | _err@75@01 != Null]
(assert (not (= _err@75@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@75@01 $Ref.null)) (= _err@75@01 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      0)
    (or (not (= _err@75@01 $Ref.null)) (= _err@75@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      0))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (and
      (=
        r@77@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            2)))
      (= _err@75@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (=
      r@77@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          2)))
    (= _err@75@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)
      (and
        (=
          r@77@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              2)))
        (= _err@75@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)
        (and
          (=
            r@77@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                2)))
          (= _err@75@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          0)
        (or (not (= _err@75@01 $Ref.null)) (= _err@75@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)
      (and
        (=
          r@77@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              2)))
        (= _err@75@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (and
      (=
        r@77@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            2)))
      (= _err@75@01 $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
      r@77@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
        r@77@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)
        (or
          (=
            r@77@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                2)))
          (not
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)
        (and
          (=
            r@77@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                2)))
          (= _err@75@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)
        (=
          r@77@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              2)))
        (= _err@75@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (and
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  2)))
            (= _err@75@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (and
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (= _err@75@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              0)
            (or (not (= _err@75@01 $Ref.null)) (= _err@75@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (and
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  2)))
            (= _err@75@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
          1)
        (and
          (=
            r@77@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                2)))
          (= _err@75@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
      r@77@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
    r@77@01)))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@77@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
          r@77@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
            r@77@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (or
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (not
                (=
                  r@77@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (and
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (= _err@75@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  2)))
            (= _err@75@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                1)
              (and
                (=
                  r@77@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                      2)))
                (= _err@75@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  1)
                (and
                  (=
                    r@77@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                        2)))
                  (= _err@75@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  0)
                (or (not (= _err@75@01 $Ref.null)) (= _err@75@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                1)
              (and
                (=
                  r@77@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                      2)))
                (= _err@75@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (and
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (= _err@75@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
          r@77@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
        r@77@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    r@77@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    r@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@77@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
          r@77@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
            r@77@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (or
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (not
                (=
                  r@77@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (and
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (= _err@75@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  2)))
            (= _err@75@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                1)
              (and
                (=
                  r@77@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                      2)))
                (= _err@75@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  1)
                (and
                  (=
                    r@77@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                        2)))
                  (= _err@75@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  0)
                (or (not (= _err@75@01 $Ref.null)) (= _err@75@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                1)
              (and
                (=
                  r@77@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                      2)))
                (= _err@75@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
              1)
            (and
              (=
                r@77@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                    2)))
              (= _err@75@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
          r@77@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
        r@77@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    r@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@77@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
      r@77@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))))))
        r@77@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            1)
          (and
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  2)))
            (= _err@75@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
            0)
          (and
            (not (= _err@75@01 $Ref.null))
            (=
              r@77@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    r@77@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))
    r@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@75@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | _err@75@01 == Null | live]
; [else-branch: 25 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | _err@75@01 == Null]
(assert (= _err@75@01 $Ref.null))
; [exec]
; i := loop_target
; [exec]
; inhale _isDefined(105)
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 105))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 105))
(assert (_isDefined $Snap.unit 105))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp := iterable.list_acc
(declare-const seqtmp@79@01 Seq<$Ref>)
(assert (=
  seqtmp@79@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_156))
; [eval] perm(MustTerminate(_cthread_156))
(declare-const _loop_original_must_terminate@80@01 $Perm)
(assert (= _loop_original_must_terminate@80@01 $Perm.Write))
; [exec]
; _loop_termination_flag := true
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@81@01 Seq<Measure$>)
(declare-const _cwl_156@82@01 $Perm)
(declare-const loop_target@83@01 $Ref)
(declare-const iter_err@84@01 $Ref)
(declare-const i@85@01 $Ref)
(declare-const _loop_check_before@86@01 Bool)
(set-option :timeout 0)
(push) ; 5
; Loop head block: Check well-definedness of invariant
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_157)
(assert (=
  ($Snap.second $t@87@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@87@01))
    ($Snap.second ($Snap.second $t@87@01)))))
(assert (= ($Snap.first ($Snap.second $t@87@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_157)
(assert (=
  ($Snap.second ($Snap.second $t@87@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@87@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@87@01))) $Snap.unit))
; [eval] _residue_156 <= _residue_157
(assert (<= _residue_156@8@01 _residue_157@37@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@87@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (= arr@9@01 _res@71@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  $Snap.unit))
; [eval] iter.list_acc == iterable.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  $Snap.unit))
; [eval] seqtmp == iterable.list_acc
(assert (Seq_equal
  seqtmp@79@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | iter_err@84@01 == Null | live]
; [else-branch: 26 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 26 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 7
(push) ; 7
; [else-branch: 26 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err@84@01 $Ref.null)) (= iter_err@84@01 $Ref.null)))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | iter_err@84@01 != Null | live]
; [else-branch: 27 | iter_err@84@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 27 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 7
(push) ; 7
; [else-branch: 27 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err@84@01 $Ref.null) (not (= iter_err@84@01 $Ref.null))))
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | iter_err@84@01 == Null | live]
; [else-branch: 28 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 28 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 7
(push) ; 7
; [else-branch: 28 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 29 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 30 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 30 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    loop_target@83@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 31 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 31 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    loop_target@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | iter_err@84@01 == Null | live]
; [else-branch: 32 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 32 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 7
(push) ; 7
; [else-branch: 32 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 33 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@83@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 34 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 34 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 8
; [then-branch: 35 | i@85@01 != loop_target@83@01 | live]
; [else-branch: 35 | i@85@01 == loop_target@83@01 | live]
(push) ; 9
; [then-branch: 35 | i@85@01 != loop_target@83@01]
(assert (not (= i@85@01 loop_target@83@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 35 | i@85@01 == loop_target@83@01]
(assert (= i@85@01 loop_target@83@01))
; [eval] _isDefined(105)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (= i@85@01 loop_target@83@01) (not (= i@85@01 loop_target@83@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= i@85@01 loop_target@83@01) (not (= i@85@01 loop_target@83@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 loop_target@83@01) (_isDefined $Snap.unit 105))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | iter_err@84@01 != Null | live]
; [else-branch: 36 | iter_err@84@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 36 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
; [eval] iter.__previous == iter.list_acc
(pop) ; 7
(push) ; 7
; [else-branch: 36 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
; [eval] _checkDefined(less, 1936942444)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@47@01 1936942444))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@47@01 1936942444))
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@52@01 2148138574800194267504))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@52@01 2148138574800194267504))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@57@01 1701998445))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@57@01 1701998445))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 6
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 6
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))
(push) ; 6
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0))))
(declare-const $k@88@01 $Perm)
(assert ($Perm.isReadVar $k@88@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@88@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0))))
(declare-const $k@89@01 $Perm)
(assert ($Perm.isReadVar $k@89@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@89@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(set-option :timeout 0)
(push) ; 6
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(declare-const $k@90@01 $Perm)
(assert ($Perm.isReadVar $k@90@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@90@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(set-option :timeout 0)
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))), int[PyType])), 0) | live]
; [else-branch: 38 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))), int[PyType])), 0)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 38 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@91@01 $Perm)
(assert ($Perm.isReadVar $k@91@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@91@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(set-option :timeout 0)
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 7
(push) ; 7
; [else-branch: 38 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))), int[PyType])), 0))]
(assert (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
; Joined path conditions
(assert (or
  (not
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@92@01 $Perm)
(assert ($Perm.isReadVar $k@92@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@92@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@92@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01))
(set-option :timeout 0)
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 0))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 0))
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@93@01 $Perm)
(assert ($Perm.isReadVar $k@93@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@93@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@94@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@94@01))
(declare-const letvar@95@01 Int)
(assert (=
  (as letvar@95@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 39 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 39 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 8
; [else-branch: 39 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 40 | False | live]
; [else-branch: 40 | True | live]
(push) ; 8
; [then-branch: 40 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 40 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 41 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 41 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 41 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@94@01))
(assert (and
  (=
    (as letvar@95@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01))
  (=>
    (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
    (<
      (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit pivot@68@01 500086237552))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit pivot@68@01 500086237552))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit pivot@68@01 500086237552)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit pivot@68@01 500086237552)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit pivot@68@01 500086237552)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | iter_err@84@01 == Null | live]
; [else-branch: 42 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 42 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@96@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 42 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@96@01))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (and
    (= iter_err@84@01 $Ref.null)
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))))
; Joined path conditions
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 5
(push) ; 5
; Loop head block: Establish invariant
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_equal
  seqtmp@79@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@79@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | _err@75@01 == Null | live]
; [else-branch: 43 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 43 | _err@75@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (= _err@75@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@75@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 6
; [then-branch: 44 | _err@75@01 != Null | dead]
; [else-branch: 44 | _err@75@01 == Null | live]
(push) ; 7
; [else-branch: 44 | _err@75@01 == Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | _err@75@01 == Null | live]
; [else-branch: 45 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 45 | _err@75@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (= _err@75@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@75@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 6
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 6
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 46 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 46 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 47 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 47 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (=
    _res@74@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (=
    _res@74@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 48 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 48 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    _res@74@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))
    _res@74@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | _err@75@01 == Null | live]
; [else-branch: 49 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 49 | _err@75@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 50 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 50 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@74@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@74@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0 | live]
; [else-branch: 51 | !(|First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 51 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 8
; [then-branch: 52 | False | live]
; [else-branch: 52 | True | live]
(push) ; 9
; [then-branch: 52 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 52 | True]
; [eval] _isDefined(105)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (_isDefined $Snap.unit 105))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)
  (_isDefined $Snap.unit 105)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 6
; [then-branch: 53 | _err@75@01 != Null | dead]
; [else-branch: 53 | _err@75@01 == Null | live]
(push) ; 7
; [else-branch: 53 | _err@75@01 == Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| == 0 | dead]
; [else-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@72@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))
    0)))
; [eval] _checkDefined(less, 1936942444)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@47@01 1936942444))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@47@01 1936942444))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@57@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@52@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@47@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@52@01 2148138574800194267504))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@52@01 2148138574800194267504))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@57@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@52@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@57@01 1701998445))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@57@01 1701998445))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@57@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 6
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 6
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))
(push) ; 6
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0))))
(declare-const $k@97@01 $Perm)
(assert ($Perm.isReadVar $k@97@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@57@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@52@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@47@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@97@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444))))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0))))
(declare-const $k@98@01 $Perm)
(assert ($Perm.isReadVar $k@98@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@57@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@98@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@98@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(set-option :timeout 0)
(push) ; 6
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(declare-const $k@99@01 $Perm)
(assert ($Perm.isReadVar $k@99@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@57@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@52@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@99@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@99@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(set-option :timeout 0)
(push) ; 6
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 6
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@76@01))))))))), int[PyType])), 0) | dead]
; [else-branch: 55 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@76@01))))))))), int[PyType])), 0)) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 55 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@76@01))))))))), int[PyType])), 0))]
(assert (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))) 0)))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(set-option :timeout 0)
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@100@01 $Perm)
(assert ($Perm.isReadVar $k@100@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@100@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@100@01))
(set-option :timeout 0)
(push) ; 6
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 0))
(pop) ; 6
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 0))
(push) ; 6
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 0))
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@101@01 $Perm)
(assert ($Perm.isReadVar $k@101@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@101@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@102@01 $Perm)
(assert ($Perm.isReadVar $k@102@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@102@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@102@01))
(declare-const letvar@103@01 Int)
(assert (=
  (as letvar@103@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 56 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 56 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 8
; [else-branch: 56 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 57 | False | live]
; [else-branch: 57 | True | live]
(push) ; 8
; [then-branch: 57 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 57 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 58 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 58 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@101@01))
(assert ($Perm.isReadVar $k@102@01))
(assert (=
  (as letvar@103@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit pivot@68@01 500086237552))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit pivot@68@01 500086237552))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit pivot@68@01 500086237552)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit pivot@68@01 500086237552)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit pivot@68@01 500086237552)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
        $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552)))
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@75@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | _err@75@01 == Null | live]
; [else-branch: 59 | _err@75@01 != Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 59 | _err@75@01 == Null]
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@104@01 $Perm)
(assert ($Perm.isReadVar $k@104@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@104@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
(assert (=>
  (= _err@75@01 $Ref.null)
  (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))))
(push) ; 6
(assert (not (=>
  (= _err@75@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@75@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))) (as int<PyType>  PyType))))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | True | live]
; [else-branch: 60 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 60 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 6
; [then-branch: 61 | False | dead]
; [else-branch: 61 | True | live]
(push) ; 7
; [else-branch: 61 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert ($Perm.isReadVar $k@88@01))
(assert ($Perm.isReadVar $k@89@01))
(assert ($Perm.isReadVar $k@90@01))
(assert ($Perm.isReadVar $k@91@01))
(assert ($Perm.isReadVar $k@92@01))
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@94@01))
(assert ($Perm.isReadVar $k@96@01))
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
(assert (=
  ($Snap.second $t@87@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@87@01))
    ($Snap.second ($Snap.second $t@87@01)))))
(assert (= ($Snap.first ($Snap.second $t@87@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@87@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@87@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@87@01))) $Snap.unit))
(assert (<= _residue_156@8@01 _residue_157@37@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@87@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  $Snap.unit))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@79@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err@84@01 $Ref.null)) (= iter_err@84@01 $Ref.null)))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err@84@01 $Ref.null) (not (= iter_err@84@01 $Ref.null))))
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    loop_target@83@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    loop_target@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@83@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= i@85@01 loop_target@83@01) (not (= i@85@01 loop_target@83@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 loop_target@83@01) (_isDefined $Snap.unit 105))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (or
  (not
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0))
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01))
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 0))
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  (as letvar@95@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
(assert (=>
  (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0)
  (<
    (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)))
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
      $Snap.unit))) arr@9@01 (__prim__int___box__ $Snap.unit 0)) (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (and
    (= iter_err@84@01 $Ref.null)
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 7
; [eval] iter_err == null
(pop) ; 7
(push) ; 7
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 7
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 62 | iter_err@84@01 == Null | live]
; [else-branch: 62 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 62 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [exec]
; _loop_measures := Seq(Measure$create(true, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int())))))
; [eval] Seq(Measure$create(true, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))))
; [eval] Measure$create(true, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@105@01 $Perm)
(assert ($Perm.isReadVar $k@105@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@105@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@105@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 8
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))
(assert (=
  (Seq_length
    (Seq_singleton (Measure$create<Measure$> true _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType)))))))
  1))
(declare-const _loop_measures@106@01 Seq<Measure$>)
(assert (=
  _loop_measures@106@01
  (Seq_singleton (Measure$create<Measure$> true _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))) (as int<PyType>  PyType))))))))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(_checkDefined(pivot, 500086237552)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@85@01 105))
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@85@01 105))
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@85@01 105)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@85@01 105))))
; [eval] int___unbox__(_checkDefined(pivot, 500086237552))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))
(push) ; 8
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(pop) ; 8
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))) | live]
; [else-branch: 63 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 63 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
; [exec]
; _cwl_156 := list_append(_cthread_156, _method_measures_156, _residue_157, _checkDefined(less,
;   1936942444), _checkDefined(i, 105))
; [eval] _checkDefined(less, 1936942444)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _checkDefined(i, 105)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_9@107@01 $Perm)
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 ($Snap.combine ($Snap.first $t@108@01) ($Snap.second $t@108@01))))
(assert (= ($Snap.first $t@108@01) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@108@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@108@01))
    ($Snap.second ($Snap.second $t@108@01)))))
(assert (= ($Snap.first ($Snap.second $t@108@01)) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@108@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@108@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@108@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@108@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_157@37@01 _current_wait_level_9@107@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@108@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@108@01)))))))
(push) ; 9
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@108@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton (_checkDefined $Snap.unit i@85@01 105))) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit i@85@01 105)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_156, loop_target, iter_err := Iterator___next__(_cthread_156, _method_measures_156,
;   _residue_156, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_149@109@01 $Perm)
(declare-const _res@110@01 $Ref)
(declare-const _err@111@01 $Ref)
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 ($Snap.combine ($Snap.first $t@112@01) ($Snap.second $t@112@01))))
(assert (= ($Snap.first $t@112@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@112@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@112@01))
    ($Snap.second ($Snap.second $t@112@01)))))
(assert (= ($Snap.first ($Snap.second $t@112@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@112@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@112@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@112@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_156@8@01 _current_wait_level_149@109@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@112@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@112@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  (not (= _err@111@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | _err@111@01 == Null | live]
; [else-branch: 64 | _err@111@01 != Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 64 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 10
(push) ; 10
; [else-branch: 64 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@111@01 $Ref.null)) (= _err@111@01 $Ref.null)))
(assert (=>
  (= _err@111@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 65 | _err@111@01 == Null | live]
; [else-branch: 65 | _err@111@01 != Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 65 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 10
(push) ; 10
; [else-branch: 65 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@111@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 66 | _err@111@01 == Null | live]
; [else-branch: 66 | _err@111@01 != Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 66 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 10
(push) ; 10
; [else-branch: 66 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@111@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 67 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 67 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 67 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | _err@111@01 != Null | live]
; [else-branch: 68 | _err@111@01 == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 68 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 10
(push) ; 10
; [else-branch: 68 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= _err@111@01 $Ref.null) (not (= _err@111@01 $Ref.null))))
(assert (=>
  (not (= _err@111@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | _err@111@01 != Null | live]
; [else-branch: 69 | _err@111@01 == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 69 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 10
(push) ; 10
; [else-branch: 69 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@111@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 70 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 70 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 70 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 11
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 71 | _res@110@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 1] | live]
; [else-branch: 71 | _res@110@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 1] | live]
(push) ; 12
; [then-branch: 71 | _res@110@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 1]]
(assert (not
  (=
    _res@110@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)))))
(pop) ; 12
(push) ; 12
; [else-branch: 71 | _res@110@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 1]]
(assert (=
  _res@110@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@110@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)))
  (not
    (=
      _res@110@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or
    (=
      _res@110@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)))
    (not
      (=
        _res@110@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and
    (=
      _res@110@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      _res@110@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 72 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 72 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 72 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@110@01) (Iterator_arg<PyType> (typeof<PyType> _res@71@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@113@01 $Ref)
(push) ; 9
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 10
; [then-branch: 73 | r@113@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))) | live]
; [else-branch: 73 | !(r@113@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) | live]
(push) ; 11
; [then-branch: 73 | r@113@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  r@113@01))
(pop) ; 11
(push) ; 11
; [else-branch: 73 | !(r@113@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@113@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 12
; [then-branch: 74 | !(First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1) | live]
; [else-branch: 74 | First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1 | live]
(push) ; 13
; [then-branch: 74 | !(First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)))
(pop) ; 13
(push) ; 13
; [else-branch: 74 | First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 14
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 75 | r@113@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2] | live]
; [else-branch: 75 | r@113@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2] | live]
(push) ; 15
; [then-branch: 75 | r@113@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2]]
(assert (not
  (=
    r@113@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        2)))))
(pop) ; 15
(push) ; 15
; [else-branch: 75 | r@113@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2]]
(assert (=
  r@113@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      2))))
; [eval] _err == null
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@113@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        2)))
  (not
    (=
      r@113@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          2))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (or
      (=
        r@113@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            2)))
      (not
        (=
          r@113@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1))))
(push) ; 12
; [then-branch: 76 | First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1 && r@113@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2] && _err@111@01 == Null | live]
; [else-branch: 76 | !(First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1 && r@113@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2] && _err@111@01 == Null) | live]
(push) ; 13
; [then-branch: 76 | First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1 && r@113@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2] && _err@111@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (and
    (=
      r@113@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          2)))
    (= _err@111@01 $Ref.null))))
(pop) ; 13
(push) ; 13
; [else-branch: 76 | !(First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 1 && r@113@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) - 2] && _err@111@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (and
      (=
        r@113@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            2)))
      (= _err@111@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 14
; [then-branch: 77 | !(First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 0) | live]
; [else-branch: 77 | First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 0 | live]
(push) ; 15
; [then-branch: 77 | !(First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    0)))
(pop) ; 15
(push) ; 15
; [else-branch: 77 | First:(Second:(Second:(Second:(Second:(Second:($t@112@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  0))
; [eval] _err != null
(push) ; 16
; [then-branch: 78 | _err@111@01 == Null | live]
; [else-branch: 78 | _err@111@01 != Null | live]
(push) ; 17
; [then-branch: 78 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
(pop) ; 17
(push) ; 17
; [else-branch: 78 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 18
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      0))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (and
      (=
        r@113@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            2)))
      (= _err@111@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (=
      r@113@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          2)))
    (= _err@111@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)
      (and
        (=
          r@113@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              2)))
        (= _err@111@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)
        (and
          (=
            r@113@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                2)))
          (= _err@111@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)
      (and
        (=
          r@113@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              2)))
        (= _err@111@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (and
      (=
        r@113@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            2)))
      (= _err@111@01 $Ref.null)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@113@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@113@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)
        (or
          (=
            r@113@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                2)))
          (not
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)
        (and
          (=
            r@113@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                2)))
          (= _err@111@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)
        (=
          r@113@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              2)))
        (= _err@111@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (and
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  2)))
            (= _err@111@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (and
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (= _err@111@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (and
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  2)))
            (= _err@111@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
          1)
        (and
          (=
            r@113@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                2)))
          (= _err@111@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@113@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@113@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@113@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@113@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@113@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (or
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (not
                (=
                  r@113@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (and
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (= _err@111@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  2)))
            (= _err@111@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                1)
              (and
                (=
                  r@113@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                      2)))
                (= _err@111@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  1)
                (and
                  (=
                    r@113@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                        2)))
                  (= _err@111@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                1)
              (and
                (=
                  r@113@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                      2)))
                (= _err@111@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (and
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (= _err@111@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@113@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@113@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    r@113@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    r@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@113@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@113@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@113@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (or
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (not
                (=
                  r@113@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (and
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (= _err@111@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  2)))
            (= _err@111@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                1)
              (and
                (=
                  r@113@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                      2)))
                (= _err@111@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  1)
                (and
                  (=
                    r@113@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                        2)))
                  (= _err@111@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                1)
              (and
                (=
                  r@113@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                      2)))
                (= _err@111@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
              1)
            (and
              (=
                r@113@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                    2)))
              (= _err@111@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@113@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@113@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    r@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@113@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
      r@113@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@113@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            1)
          (and
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  2)))
            (= _err@111@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
            0)
          (and
            (not (= _err@111@01 $Ref.null))
            (=
              r@113@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    r@113@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))
    r@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | _err@111@01 == Null | live]
; [else-branch: 79 | _err@111@01 != Null | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 79 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
; [exec]
; i := loop_target
; [exec]
; inhale _isDefined(105)
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 10
(pop) ; 10
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | True | live]
; [else-branch: 80 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 80 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 12
; [then-branch: 81 | _err@111@01 != Null | live]
; [else-branch: 81 | _err@111@01 == Null | live]
(push) ; 13
; [then-branch: 81 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
(pop) ; 13
(push) ; 13
; [else-branch: 81 | _err@111@01 == Null]
; [eval] Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@115@01 $Perm)
(assert ($Perm.isReadVar $k@115@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@115@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@115@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(push) ; 14
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 14
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 14
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 14
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 14
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@115@01))
(assert (=>
  (= _err@111@01 $Ref.null)
  (and
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@115@01))
(assert (=>
  (= _err@111@01 $Ref.null)
  (and
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))))
(push) ; 10
(assert (not (or
  (not (= _err@111@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@111@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))))
; Loop head block: Re-establish invariant
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 82 | _err@111@01 == Null | live]
; [else-branch: 82 | _err@111@01 != Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 82 | _err@111@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (= _err@111@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@111@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 10
; [then-branch: 83 | _err@111@01 != Null | dead]
; [else-branch: 83 | _err@111@01 == Null | live]
(push) ; 11
; [else-branch: 83 | _err@111@01 == Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 84 | _err@111@01 == Null | live]
; [else-branch: 84 | _err@111@01 != Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 84 | _err@111@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (= _err@111@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@111@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 10
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 10
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 85 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 86 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 86 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 86 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@110@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@110@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 87 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 87 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 87 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@110@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@110@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 88 | _err@111@01 == Null | live]
; [else-branch: 88 | _err@111@01 != Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 88 | _err@111@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 89 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 89 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 89 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@110@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@110@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 90 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 90 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 90 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 12
; [then-branch: 91 | False | live]
; [else-branch: 91 | True | live]
(push) ; 13
; [then-branch: 91 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 91 | True]
; [eval] _isDefined(105)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 105))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 105)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 10
; [then-branch: 92 | _err@111@01 != Null | dead]
; [else-branch: 92 | _err@111@01 == Null | live]
(push) ; 11
; [else-branch: 92 | _err@111@01 == Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 10
; [then-branch: 93 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 93 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 11
; [else-branch: 93 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(less, 1936942444)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(more, 1701998445)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 10
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@116@01 $Perm)
(assert ($Perm.isReadVar $k@116@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@116@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(set-option :timeout 0)
(push) ; 10
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 10
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(set-option :timeout 0)
(push) ; 10
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 10
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@112@01))))))))), int[PyType])), 0) | live]
; [else-branch: 94 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@112@01))))))))), int[PyType])), 0)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 94 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@112@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@119@01 $Perm)
(assert ($Perm.isReadVar $k@119@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@119@01))
(set-option :timeout 0)
(push) ; 12
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 12
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@119@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 10
(assert (not (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@120@01 $Perm)
(assert ($Perm.isReadVar $k@120@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@120@01))
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@122@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(declare-const letvar@123@01 Int)
(assert (=
  (as letvar@123@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 95 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 95 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 12
; [else-branch: 95 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 96 | False | live]
; [else-branch: 96 | True | live]
(push) ; 12
; [then-branch: 96 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 96 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 97 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 97 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 97 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert (=
  (as letvar@123@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 98 | _err@111@01 == Null | live]
; [else-branch: 98 | _err@111@01 != Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 98 | _err@111@01 == Null]
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@124@01 $Perm)
(assert ($Perm.isReadVar $k@124@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@124@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 12
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert (=>
  (= _err@111@01 $Ref.null)
  (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))
(push) ; 10
(assert (not (=>
  (= _err@111@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
    0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@111@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 99 | False | dead]
; [else-branch: 99 | True | live]
(push) ; 11
; [else-branch: 99 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 100 | True | live]
; [else-branch: 100 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 100 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 101 | False | live]
; [else-branch: 101 | True | live]
(push) ; 13
; [then-branch: 101 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 101 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 14
; [then-branch: 102 | False | live]
; [else-branch: 102 | True | live]
(push) ; 15
; [then-branch: 102 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 102 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 103 | False | live]
; [else-branch: 103 | True | live]
(push) ; 17
; [then-branch: 103 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 103 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 79 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
(pop) ; 9
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@111@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 104 | _err@111@01 != Null | live]
; [else-branch: 104 | _err@111@01 == Null | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 104 | _err@111@01 != Null]
(assert (not (= _err@111@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | True | live]
; [else-branch: 105 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 105 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 12
; [then-branch: 106 | _err@111@01 != Null | live]
; [else-branch: 106 | _err@111@01 == Null | live]
(push) ; 13
; [then-branch: 106 | _err@111@01 != Null]
(pop) ; 13
(push) ; 13
; [else-branch: 106 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
; [eval] Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@125@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@125@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 14
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(push) ; 14
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 14
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 14
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 14
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 14
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@125@01))
(assert (=>
  (= _err@111@01 $Ref.null)
  (and
    (= _err@111@01 $Ref.null)
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@125@01))
(assert (=>
  (= _err@111@01 $Ref.null)
  (and
    (= _err@111@01 $Ref.null)
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))))
(push) ; 10
(assert (not (or
  (not (= _err@111@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@111@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))))
; Loop head block: Re-establish invariant
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 10
; [then-branch: 107 | _err@111@01 == Null | dead]
; [else-branch: 107 | _err@111@01 != Null | live]
(push) ; 11
; [else-branch: 107 | _err@111@01 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | _err@111@01 != Null | live]
; [else-branch: 108 | _err@111@01 == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 108 | _err@111@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not (= _err@111@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@111@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 10
; [then-branch: 109 | _err@111@01 == Null | dead]
; [else-branch: 109 | _err@111@01 != Null | live]
(push) ; 11
; [else-branch: 109 | _err@111@01 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 10
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 10
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 110 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 110 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 111 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 111 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@110@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@110@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 112 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 112 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@110@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@110@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 10
; [then-branch: 113 | _err@111@01 == Null | dead]
; [else-branch: 113 | _err@111@01 != Null | live]
(push) ; 11
; [else-branch: 113 | _err@111@01 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 114 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 114 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 11
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@110@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@110@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 115 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 115 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 12
; [then-branch: 116 | i@85@01 != _res@110@01 | live]
; [else-branch: 116 | i@85@01 == _res@110@01 | live]
(push) ; 13
; [then-branch: 116 | i@85@01 != _res@110@01]
(assert (not (= i@85@01 _res@110@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 116 | i@85@01 == _res@110@01]
(assert (= i@85@01 _res@110@01))
; [eval] _isDefined(105)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (= i@85@01 _res@110@01) (not (= i@85@01 _res@110@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= i@85@01 _res@110@01) (not (= i@85@01 _res@110@01)))))
(push) ; 10
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 _res@110@01) (_isDefined $Snap.unit 105)))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 _res@110@01) (_isDefined $Snap.unit 105))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@111@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | _err@111@01 != Null | live]
; [else-branch: 117 | _err@111@01 == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 117 | _err@111@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 10
; [then-branch: 118 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 118 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 11
; [else-branch: 118 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(less, 1936942444)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(more, 1701998445)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 10
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@126@01 $Perm)
(assert ($Perm.isReadVar $k@126@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@126@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@127@01 $Perm)
(assert ($Perm.isReadVar $k@127@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@127@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@127@01))
(set-option :timeout 0)
(push) ; 10
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 10
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@128@01 $Perm)
(assert ($Perm.isReadVar $k@128@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@128@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(set-option :timeout 0)
(push) ; 10
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 10
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@108@01))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@112@01))))))))), int[PyType])), 0) | live]
; [else-branch: 119 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@112@01))))))))), int[PyType])), 0)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 119 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@112@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@129@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@129@01))
(set-option :timeout 0)
(push) ; 12
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 12
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@129@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 10
(assert (not (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@112@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@130@01 $Perm)
(assert ($Perm.isReadVar $k@130@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@130@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@130@01))
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@132@01 $Perm)
(assert ($Perm.isReadVar $k@132@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@132@01))
(declare-const letvar@133@01 Int)
(assert (=
  (as letvar@133@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 120 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 120 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 12
; [else-branch: 120 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 121 | False | live]
; [else-branch: 121 | True | live]
(push) ; 12
; [then-branch: 121 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 121 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 122 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 122 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 122 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@131@01))
(assert ($Perm.isReadVar $k@132@01))
(assert (=
  (as letvar@133@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 10
; [then-branch: 123 | _err@111@01 == Null | dead]
; [else-branch: 123 | _err@111@01 != Null | live]
(push) ; 11
; [else-branch: 123 | _err@111@01 != Null]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 10
; [then-branch: 124 | False | dead]
; [else-branch: 124 | True | live]
(push) ; 11
; [else-branch: 124 | True]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | True | live]
; [else-branch: 125 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 125 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 126 | False | live]
; [else-branch: 126 | True | live]
(push) ; 13
; [then-branch: 126 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 126 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 14
; [then-branch: 127 | False | live]
; [else-branch: 127 | True | live]
(push) ; 15
; [then-branch: 127 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 127 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 16
; [then-branch: 128 | False | live]
; [else-branch: 128 | True | live]
(push) ; 17
; [then-branch: 128 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 128 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 104 | _err@111@01 == Null]
(assert (= _err@111@01 $Ref.null))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 63 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
(pop) ; 8
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(_checkDefined(pivot, 500086237552)))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(_checkDefined(pivot, 500086237552)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
; [eval] int___unbox__(_checkDefined(pivot, 500086237552))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))) | live]
; [else-branch: 129 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 129 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
; [eval] int___gt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(_checkDefined(pivot, 500086237552)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(_checkDefined(pivot, 500086237552))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(pop) ; 9
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))) | live]
; [else-branch: 130 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 130 | int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
; [exec]
; _cwl_156 := list_append(_cthread_156, _method_measures_156, _residue_157, _checkDefined(more,
;   1701998445), _checkDefined(i, 105))
; [eval] _checkDefined(more, 1701998445)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(i, 105)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_9@134@01 $Perm)
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@135@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second $t@135@01)))))
(assert (= ($Snap.first ($Snap.second $t@135@01)) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@135@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@135@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_157@37@01 _current_wait_level_9@134@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton (_checkDefined $Snap.unit i@85@01 105))) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit i@85@01 105)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_156, loop_target, iter_err := Iterator___next__(_cthread_156, _method_measures_156,
;   _residue_156, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_149@136@01 $Perm)
(declare-const _res@137@01 $Ref)
(declare-const _err@138@01 $Ref)
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 ($Snap.combine ($Snap.first $t@139@01) ($Snap.second $t@139@01))))
(assert (= ($Snap.first $t@139@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@139@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@139@01))
    ($Snap.second ($Snap.second $t@139@01)))))
(assert (= ($Snap.first ($Snap.second $t@139@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@139@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@139@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@139@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_156@8@01 _current_wait_level_149@136@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@139@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@139@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  (not (= _err@138@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | _err@138@01 == Null | live]
; [else-branch: 131 | _err@138@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 131 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 11
(push) ; 11
; [else-branch: 131 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@138@01 $Ref.null)) (= _err@138@01 $Ref.null)))
(assert (=>
  (= _err@138@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 132 | _err@138@01 == Null | live]
; [else-branch: 132 | _err@138@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 132 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 11
(push) ; 11
; [else-branch: 132 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@138@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 133 | _err@138@01 == Null | live]
; [else-branch: 133 | _err@138@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 133 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 11
(push) ; 11
; [else-branch: 133 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@138@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 134 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 134 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 134 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 135 | _err@138@01 != Null | live]
; [else-branch: 135 | _err@138@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 135 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 11
(push) ; 11
; [else-branch: 135 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (= _err@138@01 $Ref.null) (not (= _err@138@01 $Ref.null))))
(assert (=>
  (not (= _err@138@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 136 | _err@138@01 != Null | live]
; [else-branch: 136 | _err@138@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 136 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 11
(push) ; 11
; [else-branch: 136 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@138@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 137 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 137 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 137 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 138 | _res@137@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 1] | live]
; [else-branch: 138 | _res@137@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 1] | live]
(push) ; 13
; [then-branch: 138 | _res@137@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 1]]
(assert (not
  (=
    _res@137@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)))))
(pop) ; 13
(push) ; 13
; [else-branch: 138 | _res@137@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 1]]
(assert (=
  _res@137@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@137@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)))
  (not
    (=
      _res@137@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or
    (=
      _res@137@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)))
    (not
      (=
        _res@137@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and
    (=
      _res@137@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      _res@137@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 139 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@137@01) (Iterator_arg<PyType> (typeof<PyType> _res@71@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@140@01 $Ref)
(push) ; 10
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 11
; [then-branch: 140 | r@140@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))) | live]
; [else-branch: 140 | !(r@140@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) | live]
(push) ; 12
; [then-branch: 140 | r@140@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  r@140@01))
(pop) ; 12
(push) ; 12
; [else-branch: 140 | !(r@140@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@140@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 13
; [then-branch: 141 | !(First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1) | live]
; [else-branch: 141 | First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1 | live]
(push) ; 14
; [then-branch: 141 | !(First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)))
(pop) ; 14
(push) ; 14
; [else-branch: 141 | First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 15
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
; [then-branch: 142 | r@140@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2] | live]
; [else-branch: 142 | r@140@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2] | live]
(push) ; 16
; [then-branch: 142 | r@140@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2]]
(assert (not
  (=
    r@140@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        2)))))
(pop) ; 16
(push) ; 16
; [else-branch: 142 | r@140@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2]]
(assert (=
  r@140@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      2))))
; [eval] _err == null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@140@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        2)))
  (not
    (=
      r@140@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          2))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (or
      (=
        r@140@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            2)))
      (not
        (=
          r@140@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1))))
(push) ; 13
; [then-branch: 143 | First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1 && r@140@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2] && _err@138@01 == Null | live]
; [else-branch: 143 | !(First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1 && r@140@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2] && _err@138@01 == Null) | live]
(push) ; 14
; [then-branch: 143 | First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1 && r@140@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2] && _err@138@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (and
    (=
      r@140@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          2)))
    (= _err@138@01 $Ref.null))))
(pop) ; 14
(push) ; 14
; [else-branch: 143 | !(First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 1 && r@140@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) - 2] && _err@138@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (and
      (=
        r@140@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            2)))
      (= _err@138@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 15
; [then-branch: 144 | !(First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 0) | live]
; [else-branch: 144 | First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 0 | live]
(push) ; 16
; [then-branch: 144 | !(First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    0)))
(pop) ; 16
(push) ; 16
; [else-branch: 144 | First:(Second:(Second:(Second:(Second:(Second:($t@139@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  0))
; [eval] _err != null
(push) ; 17
; [then-branch: 145 | _err@138@01 == Null | live]
; [else-branch: 145 | _err@138@01 != Null | live]
(push) ; 18
; [then-branch: 145 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
(pop) ; 18
(push) ; 18
; [else-branch: 145 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 19
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (and
      (=
        r@140@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            2)))
      (= _err@138@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (=
      r@140@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          2)))
    (= _err@138@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)
      (and
        (=
          r@140@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              2)))
        (= _err@138@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)
        (and
          (=
            r@140@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                2)))
          (= _err@138@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)
      (and
        (=
          r@140@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              2)))
        (= _err@138@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (and
      (=
        r@140@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            2)))
      (= _err@138@01 $Ref.null)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@140@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@140@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)
        (or
          (=
            r@140@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                2)))
          (not
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)
        (and
          (=
            r@140@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                2)))
          (= _err@138@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)
        (=
          r@140@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              2)))
        (= _err@138@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (and
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  2)))
            (= _err@138@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (and
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (= _err@138@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (and
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  2)))
            (= _err@138@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
          1)
        (and
          (=
            r@140@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                2)))
          (= _err@138@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@140@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@140@01)))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@140@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@140@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@140@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (or
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (not
                (=
                  r@140@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (and
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (= _err@138@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  2)))
            (= _err@138@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                1)
              (and
                (=
                  r@140@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                      2)))
                (= _err@138@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  1)
                (and
                  (=
                    r@140@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                        2)))
                  (= _err@138@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                1)
              (and
                (=
                  r@140@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                      2)))
                (= _err@138@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (and
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (= _err@138@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@140@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@140@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    r@140@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    r@140@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@140@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@140@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@140@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (or
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (not
                (=
                  r@140@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (and
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (= _err@138@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  2)))
            (= _err@138@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                1)
              (and
                (=
                  r@140@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                      2)))
                (= _err@138@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  1)
                (and
                  (=
                    r@140@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                        2)))
                  (= _err@138@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                1)
              (and
                (=
                  r@140@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                      2)))
                (= _err@138@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
              1)
            (and
              (=
                r@140@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                    2)))
              (= _err@138@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@140@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@140@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    r@140@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@140@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
      r@140@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@140@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            1)
          (and
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  2)))
            (= _err@138@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
            0)
          (and
            (not (= _err@138@01 $Ref.null))
            (=
              r@140@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    r@140@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))
    r@140@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 146 | _err@138@01 == Null | live]
; [else-branch: 146 | _err@138@01 != Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 146 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
; [exec]
; i := loop_target
; [exec]
; inhale _isDefined(105)
(declare-const $t@141@01 $Snap)
(assert (= $t@141@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 11
(pop) ; 11
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 147 | True | live]
; [else-branch: 147 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 147 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 13
; [then-branch: 148 | _err@138@01 != Null | live]
; [else-branch: 148 | _err@138@01 == Null | live]
(push) ; 14
; [then-branch: 148 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
(pop) ; 14
(push) ; 14
; [else-branch: 148 | _err@138@01 == Null]
; [eval] Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@142@01 $Perm)
(assert ($Perm.isReadVar $k@142@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@142@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@142@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(push) ; 15
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@142@01))
(assert (=>
  (= _err@138@01 $Ref.null)
  (and
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@142@01))
(assert (=>
  (= _err@138@01 $Ref.null)
  (and
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))))
(push) ; 11
(assert (not (or
  (not (= _err@138@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@138@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))))
; Loop head block: Re-establish invariant
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 149 | _err@138@01 == Null | live]
; [else-branch: 149 | _err@138@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 149 | _err@138@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (= _err@138@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@138@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 11
; [then-branch: 150 | _err@138@01 != Null | dead]
; [else-branch: 150 | _err@138@01 == Null | live]
(push) ; 12
; [else-branch: 150 | _err@138@01 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 151 | _err@138@01 == Null | live]
; [else-branch: 151 | _err@138@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 151 | _err@138@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (= _err@138@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@138@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 152 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 152 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 152 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 153 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 153 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 153 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@137@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@137@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 154 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 154 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 154 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@137@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@137@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 155 | _err@138@01 == Null | live]
; [else-branch: 155 | _err@138@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 155 | _err@138@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 156 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 156 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 156 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@137@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@137@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 157 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 157 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 157 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 13
; [then-branch: 158 | False | live]
; [else-branch: 158 | True | live]
(push) ; 14
; [then-branch: 158 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 158 | True]
; [eval] _isDefined(105)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 105))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 105)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 11
; [then-branch: 159 | _err@138@01 != Null | dead]
; [else-branch: 159 | _err@138@01 == Null | live]
(push) ; 12
; [else-branch: 159 | _err@138@01 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 11
; [then-branch: 160 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 160 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 12
; [else-branch: 160 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(more, 1701998445)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@143@01 $Perm)
(assert ($Perm.isReadVar $k@143@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@143@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@143@01))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@144@01 $Perm)
(assert ($Perm.isReadVar $k@144@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@144@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@144@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(set-option :timeout 0)
(push) ; 11
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@145@01 $Perm)
(assert ($Perm.isReadVar $k@145@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@145@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@145@01))
(set-option :timeout 0)
(push) ; 11
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 11
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@139@01))))))))), int[PyType])), 0) | live]
; [else-branch: 161 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@139@01))))))))), int[PyType])), 0)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 161 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@139@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@146@01 $Perm)
(assert ($Perm.isReadVar $k@146@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@146@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 13
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@146@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(assert (not (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@147@01 $Perm)
(assert ($Perm.isReadVar $k@147@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@147@01))
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@148@01 $Perm)
(assert ($Perm.isReadVar $k@148@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@149@01 $Perm)
(assert ($Perm.isReadVar $k@149@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@149@01))
(declare-const letvar@150@01 Int)
(assert (=
  (as letvar@150@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 162 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 162 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 13
; [else-branch: 162 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 163 | False | live]
; [else-branch: 163 | True | live]
(push) ; 13
; [then-branch: 163 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 163 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 164 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 164 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 164 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@148@01))
(assert ($Perm.isReadVar $k@149@01))
(assert (=
  (as letvar@150@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 165 | _err@138@01 == Null | live]
; [else-branch: 165 | _err@138@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 165 | _err@138@01 == Null]
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@151@01 $Perm)
(assert ($Perm.isReadVar $k@151@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@151@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@151@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@151@01))
(assert (=>
  (= _err@138@01 $Ref.null)
  (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))
(push) ; 11
(assert (not (=>
  (= _err@138@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@138@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 166 | False | dead]
; [else-branch: 166 | True | live]
(push) ; 12
; [else-branch: 166 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 167 | True | live]
; [else-branch: 167 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 167 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 168 | False | live]
; [else-branch: 168 | True | live]
(push) ; 14
; [then-branch: 168 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 168 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 169 | False | live]
; [else-branch: 169 | True | live]
(push) ; 16
; [then-branch: 169 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 169 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 170 | False | live]
; [else-branch: 170 | True | live]
(push) ; 18
; [then-branch: 170 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 170 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 146 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
(pop) ; 10
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@138@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 171 | _err@138@01 != Null | live]
; [else-branch: 171 | _err@138@01 == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 171 | _err@138@01 != Null]
(assert (not (= _err@138@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 172 | True | live]
; [else-branch: 172 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 172 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 13
; [then-branch: 173 | _err@138@01 != Null | live]
; [else-branch: 173 | _err@138@01 == Null | live]
(push) ; 14
; [then-branch: 173 | _err@138@01 != Null]
(pop) ; 14
(push) ; 14
; [else-branch: 173 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
; [eval] Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@152@01 $Perm)
(assert ($Perm.isReadVar $k@152@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@152@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(push) ; 15
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
(assert (=>
  (= _err@138@01 $Ref.null)
  (and
    (= _err@138@01 $Ref.null)
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
(assert (=>
  (= _err@138@01 $Ref.null)
  (and
    (= _err@138@01 $Ref.null)
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))))
(push) ; 11
(assert (not (or
  (not (= _err@138@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@138@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))))
; Loop head block: Re-establish invariant
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 11
; [then-branch: 174 | _err@138@01 == Null | dead]
; [else-branch: 174 | _err@138@01 != Null | live]
(push) ; 12
; [else-branch: 174 | _err@138@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 175 | _err@138@01 != Null | live]
; [else-branch: 175 | _err@138@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 175 | _err@138@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= _err@138@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@138@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 11
; [then-branch: 176 | _err@138@01 == Null | dead]
; [else-branch: 176 | _err@138@01 != Null | live]
(push) ; 12
; [else-branch: 176 | _err@138@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 177 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 177 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 177 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 178 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 178 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 178 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@137@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@137@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 179 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 179 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 179 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@137@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@137@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 11
; [then-branch: 180 | _err@138@01 == Null | dead]
; [else-branch: 180 | _err@138@01 != Null | live]
(push) ; 12
; [else-branch: 180 | _err@138@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 181 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 181 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 181 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@137@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@137@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 182 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 182 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 182 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 13
; [then-branch: 183 | i@85@01 != _res@137@01 | live]
; [else-branch: 183 | i@85@01 == _res@137@01 | live]
(push) ; 14
; [then-branch: 183 | i@85@01 != _res@137@01]
(assert (not (= i@85@01 _res@137@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 183 | i@85@01 == _res@137@01]
(assert (= i@85@01 _res@137@01))
; [eval] _isDefined(105)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (= i@85@01 _res@137@01) (not (= i@85@01 _res@137@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= i@85@01 _res@137@01) (not (= i@85@01 _res@137@01)))))
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 _res@137@01) (_isDefined $Snap.unit 105)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 _res@137@01) (_isDefined $Snap.unit 105))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@138@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | _err@138@01 != Null | live]
; [else-branch: 184 | _err@138@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 184 | _err@138@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 11
; [then-branch: 185 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 185 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 12
; [else-branch: 185 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(more, 1701998445)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@153@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@153@01))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@154@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@154@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
(set-option :timeout 0)
(push) ; 11
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@155@01 $Perm)
(assert ($Perm.isReadVar $k@155@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@155@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@155@01))
(set-option :timeout 0)
(push) ; 11
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 11
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@139@01))))))))), int[PyType])), 0) | live]
; [else-branch: 186 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@139@01))))))))), int[PyType])), 0)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 186 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@139@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@156@01 $Perm)
(assert ($Perm.isReadVar $k@156@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@156@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@156@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 13
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@156@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(assert (not (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@157@01 $Perm)
(assert ($Perm.isReadVar $k@157@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@157@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@157@01))
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@158@01 $Perm)
(assert ($Perm.isReadVar $k@158@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@158@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@159@01 $Perm)
(assert ($Perm.isReadVar $k@159@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@159@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
(declare-const letvar@160@01 Int)
(assert (=
  (as letvar@160@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 187 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 187 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 13
; [else-branch: 187 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 188 | False | live]
; [else-branch: 188 | True | live]
(push) ; 13
; [then-branch: 188 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 188 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 189 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 189 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 189 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
(assert (=
  (as letvar@160@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 11
; [then-branch: 190 | _err@138@01 == Null | dead]
; [else-branch: 190 | _err@138@01 != Null | live]
(push) ; 12
; [else-branch: 190 | _err@138@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 191 | False | dead]
; [else-branch: 191 | True | live]
(push) ; 12
; [else-branch: 191 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 192 | True | live]
; [else-branch: 192 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 192 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 193 | False | live]
; [else-branch: 193 | True | live]
(push) ; 14
; [then-branch: 193 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 193 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 194 | False | live]
; [else-branch: 194 | True | live]
(push) ; 16
; [then-branch: 194 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 194 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 195 | False | live]
; [else-branch: 195 | True | live]
(push) ; 18
; [then-branch: 195 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 195 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 171 | _err@138@01 == Null]
(assert (= _err@138@01 $Ref.null))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 130 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
(pop) ; 9
; [eval] !int___gt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(_checkDefined(pivot, 500086237552)))
; [eval] int___gt__(int___unbox__(_checkDefined(i, 105)), int___unbox__(_checkDefined(pivot, 500086237552)))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
; [eval] int___unbox__(_checkDefined(pivot, 500086237552))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 196 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))) | live]
; [else-branch: 196 | int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 196 | !(int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552))))]
(assert (not
  (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552)))))
; [exec]
; _cwl_156 := list_append(_cthread_156, _method_measures_156, _residue_157, _checkDefined(pivotList,
;   2148138574800194267504), _checkDefined(i, 105))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _checkDefined(i, 105)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(pop) ; 10
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@85@01 105)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_9@161@01 $Perm)
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 ($Snap.combine ($Snap.first $t@162@01) ($Snap.second $t@162@01))))
(assert (= ($Snap.first $t@162@01) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@162@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@162@01))
    ($Snap.second ($Snap.second $t@162@01)))))
(assert (= ($Snap.first ($Snap.second $t@162@01)) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@162@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@162@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@162@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@162@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_157@37@01 _current_wait_level_9@161@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@162@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@162@01)))))))
(push) ; 10
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _res@71@01 (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@162@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton (_checkDefined $Snap.unit i@85@01 105))) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit i@85@01 105)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_156, loop_target, iter_err := Iterator___next__(_cthread_156, _method_measures_156,
;   _residue_156, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(declare-const _current_wait_level_149@163@01 $Perm)
(declare-const _res@164@01 $Ref)
(declare-const _err@165@01 $Ref)
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@166@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@166@01))
    ($Snap.second ($Snap.second $t@166@01)))))
(assert (= ($Snap.first ($Snap.second $t@166@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@166@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@166@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@166@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_156@8@01 _current_wait_level_149@163@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@166@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  (not (= _err@165@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 197 | _err@165@01 == Null | live]
; [else-branch: 197 | _err@165@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 197 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 11
(push) ; 11
; [else-branch: 197 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@165@01 $Ref.null)) (= _err@165@01 $Ref.null)))
(assert (=>
  (= _err@165@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 198 | _err@165@01 == Null | live]
; [else-branch: 198 | _err@165@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 198 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 11
(push) ; 11
; [else-branch: 198 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@165@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 199 | _err@165@01 == Null | live]
; [else-branch: 199 | _err@165@01 != Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 199 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 11
(push) ; 11
; [else-branch: 199 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@165@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 200 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 200 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 200 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 201 | _err@165@01 != Null | live]
; [else-branch: 201 | _err@165@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 201 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 11
(push) ; 11
; [else-branch: 201 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (= _err@165@01 $Ref.null) (not (= _err@165@01 $Ref.null))))
(assert (=>
  (not (= _err@165@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | _err@165@01 != Null | live]
; [else-branch: 202 | _err@165@01 == Null | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 202 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 11
(push) ; 11
; [else-branch: 202 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@165@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 203 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 203 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 203 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 204 | _res@164@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 1] | live]
; [else-branch: 204 | _res@164@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 1] | live]
(push) ; 13
; [then-branch: 204 | _res@164@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 1]]
(assert (not
  (=
    _res@164@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)))))
(pop) ; 13
(push) ; 13
; [else-branch: 204 | _res@164@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 1]]
(assert (=
  _res@164@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@164@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)))
  (not
    (=
      _res@164@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or
    (=
      _res@164@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)))
    (not
      (=
        _res@164@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and
    (=
      _res@164@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      _res@164@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 205 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 205 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@01) (Iterator_arg<PyType> (typeof<PyType> _res@71@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@167@01 $Ref)
(push) ; 10
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 11
; [then-branch: 206 | r@167@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))) | live]
; [else-branch: 206 | !(r@167@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) | live]
(push) ; 12
; [then-branch: 206 | r@167@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  r@167@01))
(pop) ; 12
(push) ; 12
; [else-branch: 206 | !(r@167@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@167@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 13
; [then-branch: 207 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1) | live]
; [else-branch: 207 | First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1 | live]
(push) ; 14
; [then-branch: 207 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)))
(pop) ; 14
(push) ; 14
; [else-branch: 207 | First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 15
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
; [then-branch: 208 | r@167@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2] | live]
; [else-branch: 208 | r@167@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2] | live]
(push) ; 16
; [then-branch: 208 | r@167@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2]]
(assert (not
  (=
    r@167@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        2)))))
(pop) ; 16
(push) ; 16
; [else-branch: 208 | r@167@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2]]
(assert (=
  r@167@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      2))))
; [eval] _err == null
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@167@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        2)))
  (not
    (=
      r@167@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          2))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (or
      (=
        r@167@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            2)))
      (not
        (=
          r@167@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1))))
(push) ; 13
; [then-branch: 209 | First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1 && r@167@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2] && _err@165@01 == Null | live]
; [else-branch: 209 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1 && r@167@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2] && _err@165@01 == Null) | live]
(push) ; 14
; [then-branch: 209 | First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1 && r@167@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2] && _err@165@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (and
    (=
      r@167@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          2)))
    (= _err@165@01 $Ref.null))))
(pop) ; 14
(push) ; 14
; [else-branch: 209 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 1 && r@167@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) - 2] && _err@165@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (and
      (=
        r@167@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            2)))
      (= _err@165@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 15
; [then-branch: 210 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 0) | live]
; [else-branch: 210 | First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 0 | live]
(push) ; 16
; [then-branch: 210 | !(First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    0)))
(pop) ; 16
(push) ; 16
; [else-branch: 210 | First:(Second:(Second:(Second:(Second:(Second:($t@166@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  0))
; [eval] _err != null
(push) ; 17
; [then-branch: 211 | _err@165@01 == Null | live]
; [else-branch: 211 | _err@165@01 != Null | live]
(push) ; 18
; [then-branch: 211 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
(pop) ; 18
(push) ; 18
; [else-branch: 211 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 19
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      0))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (and
      (=
        r@167@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            2)))
      (= _err@165@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (=
      r@167@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          2)))
    (= _err@165@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)
      (and
        (=
          r@167@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              2)))
        (= _err@165@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)
        (and
          (=
            r@167@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                2)))
          (= _err@165@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)
      (and
        (=
          r@167@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              2)))
        (= _err@165@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (and
      (=
        r@167@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            2)))
      (= _err@165@01 $Ref.null)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@167@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@167@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)
        (or
          (=
            r@167@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                2)))
          (not
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)
        (and
          (=
            r@167@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                2)))
          (= _err@165@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)
        (=
          r@167@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              2)))
        (= _err@165@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (and
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  2)))
            (= _err@165@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (and
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (= _err@165@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (and
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  2)))
            (= _err@165@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
          1)
        (and
          (=
            r@167@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                2)))
          (= _err@165@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@167@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@167@01)))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@167@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@167@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@167@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (or
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (not
                (=
                  r@167@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (and
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (= _err@165@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  2)))
            (= _err@165@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                1)
              (and
                (=
                  r@167@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                      2)))
                (= _err@165@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  1)
                (and
                  (=
                    r@167@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                        2)))
                  (= _err@165@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                1)
              (and
                (=
                  r@167@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                      2)))
                (= _err@165@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (and
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (= _err@165@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@167@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@167@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    r@167@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    r@167@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@167@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@167@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@167@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (or
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (not
                (=
                  r@167@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (and
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (= _err@165@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  2)))
            (= _err@165@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                1)
              (and
                (=
                  r@167@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                      2)))
                (= _err@165@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  1)
                (and
                  (=
                    r@167@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                        2)))
                  (= _err@165@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                1)
              (and
                (=
                  r@167@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                      2)))
                (= _err@165@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
              1)
            (and
              (=
                r@167@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                    2)))
              (= _err@165@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@167@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@167@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    r@167@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@167@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
      r@167@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@167@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            1)
          (and
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  2)))
            (= _err@165@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
            0)
          (and
            (not (= _err@165@01 $Ref.null))
            (=
              r@167@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    r@167@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
    r@167@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 212 | _err@165@01 == Null | live]
; [else-branch: 212 | _err@165@01 != Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 212 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
; [exec]
; i := loop_target
; [exec]
; inhale _isDefined(105)
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 11
(pop) ; 11
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | True | live]
; [else-branch: 213 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 213 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 13
; [then-branch: 214 | _err@165@01 != Null | live]
; [else-branch: 214 | _err@165@01 == Null | live]
(push) ; 14
; [then-branch: 214 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
(pop) ; 14
(push) ; 14
; [else-branch: 214 | _err@165@01 == Null]
; [eval] Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@169@01 $Perm)
(assert ($Perm.isReadVar $k@169@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@169@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@169@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(push) ; 15
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@169@01))
(assert (=>
  (= _err@165@01 $Ref.null)
  (and
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@169@01))
(assert (=>
  (= _err@165@01 $Ref.null)
  (and
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))))
(push) ; 11
(assert (not (or
  (not (= _err@165@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@165@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))))
; Loop head block: Re-establish invariant
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | _err@165@01 == Null | live]
; [else-branch: 215 | _err@165@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 215 | _err@165@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (= _err@165@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@165@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 11
; [then-branch: 216 | _err@165@01 != Null | dead]
; [else-branch: 216 | _err@165@01 == Null | live]
(push) ; 12
; [else-branch: 216 | _err@165@01 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 217 | _err@165@01 == Null | live]
; [else-branch: 217 | _err@165@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 217 | _err@165@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (= _err@165@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@165@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 218 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 218 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 219 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 219 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@164@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@164@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 220 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 220 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@164@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@164@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | _err@165@01 == Null | live]
; [else-branch: 221 | _err@165@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 221 | _err@165@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 222 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 222 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 223 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 223 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 13
; [then-branch: 224 | False | live]
; [else-branch: 224 | True | live]
(push) ; 14
; [then-branch: 224 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 224 | True]
; [eval] _isDefined(105)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 105))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 105)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 11
; [then-branch: 225 | _err@165@01 != Null | dead]
; [else-branch: 225 | _err@165@01 == Null | live]
(push) ; 12
; [else-branch: 225 | _err@165@01 == Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 11
; [then-branch: 226 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 226 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 12
; [else-branch: 226 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(more, 1701998445)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@170@01 $Perm)
(assert ($Perm.isReadVar $k@170@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@170@01))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@171@01 $Perm)
(assert ($Perm.isReadVar $k@171@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@171@01))
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@172@01 $Perm)
(assert ($Perm.isReadVar $k@172@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@172@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(set-option :timeout 0)
(push) ; 11
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 11
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@166@01))))))))), int[PyType])), 0) | live]
; [else-branch: 227 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@166@01))))))))), int[PyType])), 0)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 227 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@166@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@173@01 $Perm)
(assert ($Perm.isReadVar $k@173@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@173@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@173@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 13
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@173@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(assert (not (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@174@01 $Perm)
(assert ($Perm.isReadVar $k@174@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@174@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@174@01))
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@175@01 $Perm)
(assert ($Perm.isReadVar $k@175@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@175@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@176@01 $Perm)
(assert ($Perm.isReadVar $k@176@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@176@01))
(declare-const letvar@177@01 Int)
(assert (=
  (as letvar@177@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 228 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 228 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 13
; [else-branch: 228 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 229 | False | live]
; [else-branch: 229 | True | live]
(push) ; 13
; [then-branch: 229 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 229 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 230 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 230 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 230 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@175@01))
(assert ($Perm.isReadVar $k@176@01))
(assert (=
  (as letvar@177@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 231 | _err@165@01 == Null | live]
; [else-branch: 231 | _err@165@01 != Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 231 | _err@165@01 == Null]
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 13
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(assert (=>
  (= _err@165@01 $Ref.null)
  (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))
(push) ; 11
(assert (not (=>
  (= _err@165@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@165@01 $Ref.null)
  (>
    (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
    0)))
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 232 | False | dead]
; [else-branch: 232 | True | live]
(push) ; 12
; [else-branch: 232 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 233 | True | live]
; [else-branch: 233 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 233 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 234 | False | live]
; [else-branch: 234 | True | live]
(push) ; 14
; [then-branch: 234 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 234 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 235 | False | live]
; [else-branch: 235 | True | live]
(push) ; 16
; [then-branch: 235 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 235 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 236 | False | live]
; [else-branch: 236 | True | live]
(push) ; 18
; [then-branch: 236 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 236 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 212 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
(pop) ; 10
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 10
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= _err@165@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | _err@165@01 != Null | live]
; [else-branch: 237 | _err@165@01 == Null | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 237 | _err@165@01 != Null]
(assert (not (= _err@165@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==>
;   !(iter_err == null) ||
;   Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0),
;   PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] _loop_termination_flag ==> !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 238 | True | live]
; [else-branch: 238 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 238 | True]
; [eval] !(iter_err == null) || Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 13
; [then-branch: 239 | _err@165@01 != Null | live]
; [else-branch: 239 | _err@165@01 == Null | live]
(push) ; 14
; [then-branch: 239 | _err@165@01 != Null]
(pop) ; 14
(push) ; 14
; [else-branch: 239 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
; [eval] Measure$check(_loop_measures, _cthread_156, int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))))
; [eval] int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] list___len__(arr_0)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(set-option :timeout 0)
(push) ; 15
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 15
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(push) ; 15
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 15
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 15
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 15
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 15
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert (=>
  (= _err@165@01 $Ref.null)
  (and
    (= _err@165@01 $Ref.null)
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert (=>
  (= _err@165@01 $Ref.null)
  (and
    (= _err@165@01 $Ref.null)
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
    (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
    (int___sub__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
    (Measure$check%precondition $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))))
(push) ; 11
(assert (not (or
  (not (= _err@165@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (or
  (not (= _err@165@01 $Ref.null))
  (Measure$check $Snap.unit _loop_measures@106@01 _cthread_156@6@01 (int___sub__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))))
; Loop head block: Re-establish invariant
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [eval] iter.list_acc == iterable.list_acc
; [eval] seqtmp == iterable.list_acc
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 11
; [then-branch: 240 | _err@165@01 == Null | dead]
; [else-branch: 240 | _err@165@01 != Null | live]
(push) ; 12
; [else-branch: 240 | _err@165@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 241 | _err@165@01 != Null | live]
; [else-branch: 241 | _err@165@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 241 | _err@165@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= _err@165@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@165@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 11
; [then-branch: 242 | _err@165@01 == Null | dead]
; [else-branch: 242 | _err@165@01 != Null | live]
(push) ; 12
; [else-branch: 242 | _err@165@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 11
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 11
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 243 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 243 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 243 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 244 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 244 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 244 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 13
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@164@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@164@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 245 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 245 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 245 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@164@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@164@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 11
; [then-branch: 246 | _err@165@01 == Null | dead]
; [else-branch: 246 | _err@165@01 != Null | live]
(push) ; 12
; [else-branch: 246 | _err@165@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), int())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 247 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 247 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 247 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), int())
; [eval] typeof(loop_target)
; [eval] int()
(pop) ; 12
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@164@01) (as int<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> i == loop_target && _isDefined(105)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 248 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 248 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 248 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] i == loop_target && _isDefined(105)
; [eval] i == loop_target
(push) ; 13
; [then-branch: 249 | i@85@01 != _res@164@01 | live]
; [else-branch: 249 | i@85@01 == _res@164@01 | live]
(push) ; 14
; [then-branch: 249 | i@85@01 != _res@164@01]
(assert (not (= i@85@01 _res@164@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 249 | i@85@01 == _res@164@01]
(assert (= i@85@01 _res@164@01))
; [eval] _isDefined(105)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (= i@85@01 _res@164@01) (not (= i@85@01 _res@164@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= i@85@01 _res@164@01) (not (= i@85@01 _res@164@01)))))
(push) ; 11
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 _res@164@01) (_isDefined $Snap.unit 105)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= i@85@01 _res@164@01) (_isDefined $Snap.unit 105))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= _err@165@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 250 | _err@165@01 != Null | live]
; [else-branch: 250 | _err@165@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 250 | _err@165@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 11
; [then-branch: 251 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 251 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 12
; [else-branch: 251 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _checkDefined(more, 1701998445)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int()))), __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter.__previous, int())))
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))))
; [eval] __prim__int___box__(int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504))))
; [eval] int___add__(int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445))), list___len__(_checkDefined(pivotList, 2148138574800194267504)))
; [eval] int___add__(list___len__(_checkDefined(less, 1936942444)), list___len__(_checkDefined(more, 1701998445)))
; [eval] list___len__(_checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
; [eval] list___len__(_checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@181@01 $Perm)
(assert ($Perm.isReadVar $k@181@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@181@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@181@01))
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@182@01 $Perm)
(assert ($Perm.isReadVar $k@182@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@182@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))
(set-option :timeout 0)
(push) ; 11
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(pop) ; 11
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType)))) (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___add__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504))))))
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0) ==> int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] int___gt__(PSeq___len__(PSeq___create__(iter.__previous, int())), 0)
; [eval] PSeq___len__(PSeq___create__(iter.__previous, int()))
; [eval] PSeq___create__(iter.__previous, int())
; [eval] int()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
(pop) ; 11
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@166@01))))))))), int[PyType])), 0) | live]
; [else-branch: 252 | !(int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@166@01))))))))), int[PyType])), 0)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 252 | int___gt__(_, PSeq___len__(_, PSeq___create__(_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@166@01))))))))), int[PyType])), 0)]
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
; [eval] int___gt__(list___len__(_checkDefined(pivotList, 2148138574800194267504)), 0)
; [eval] list___len__(_checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@183@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@183@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 13
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@183@01))
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
  (and
    (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
    (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(assert (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0))
(push) ; 11
(assert (not (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (int___gt__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))) (as int<PyType>  PyType))) 0)
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@162@01))))) (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0)))
; [eval] int___gt__(list___len__(arr_0), 0)
; [eval] list___len__(arr_0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@184@01 $Perm)
(assert ($Perm.isReadVar $k@184@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] int___eq__(list___getitem__(arr_0, __prim__int___box__(0)), _checkDefined(pivot, 500086237552))
; [eval] list___getitem__(arr_0, __prim__int___box__(0))
; [eval] __prim__int___box__(0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@185@01 $Perm)
(assert ($Perm.isReadVar $k@185@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@186@01 $Perm)
(assert ($Perm.isReadVar $k@186@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@186@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@186@01))
(declare-const letvar@187@01 Int)
(assert (=
  (as letvar@187@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 253 | int___unbox__(_, __prim__int___box__(_, 0)) < 0 | dead]
; [else-branch: 253 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0) | live]
(push) ; 13
; [else-branch: 253 | !(int___unbox__(_, __prim__int___box__(_, 0)) < 0)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 254 | False | live]
; [else-branch: 254 | True | live]
(push) ; 13
; [then-branch: 254 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 254 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (__prim__int___box__ $Snap.unit 0)) 0))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 255 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0 | live]
; [else-branch: 255 | !(int___unbox__(_, __prim__int___box__(_, 0)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 255 | int___unbox__(_, __prim__int___box__(_, 0)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@185@01))
(assert ($Perm.isReadVar $k@186@01))
(assert (=
  (as letvar@187@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01)))
; [eval] _checkDefined(pivot, 500086237552)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 11
; Joined path conditions
; [eval] iter_err == null ==> int___sub__(list___len__(arr_0), PSeq___len__(PSeq___create__(iter.__previous, int()))) > 0
; [eval] iter_err == null
(push) ; 11
; [then-branch: 256 | _err@165@01 == Null | dead]
; [else-branch: 256 | _err@165@01 != Null | live]
(push) ; 12
; [else-branch: 256 | _err@165@01 != Null]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 11
; [then-branch: 257 | False | dead]
; [else-branch: 257 | True | live]
(push) ; 12
; [else-branch: 257 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 258 | True | live]
; [else-branch: 258 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 258 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 259 | False | live]
; [else-branch: 259 | True | live]
(push) ; 14
; [then-branch: 259 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 259 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 260 | False | live]
; [else-branch: 260 | True | live]
(push) ; 16
; [then-branch: 260 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 260 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 261 | False | live]
; [else-branch: 261 | True | live]
(push) ; 18
; [then-branch: 261 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 261 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 237 | _err@165@01 == Null]
(assert (= _err@165@01 $Ref.null))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 196 | int___gt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 129 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@85@01, 105)), int___unbox__(_, _checkDefined(_, pivot@68@01, 500086237552)))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@85@01 105)) (int___unbox__ $Snap.unit (_checkDefined $Snap.unit pivot@68@01 500086237552))))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 62 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 7
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 7
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | iter_err@84@01 != Null | live]
; [else-branch: 262 | iter_err@84@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 262 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
; [exec]
; exhale perm(MustTerminate(_cthread_156)) > none ==>
;   acc(MustTerminate(_cthread_156), perm(MustTerminate(_cthread_156)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_156)) > none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | True | live]
; [else-branch: 263 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 263 | True]
; [eval] perm(MustTerminate(_cthread_156)) - _loop_original_must_terminate
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 9
(assert (not (or
  (=
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)
    $Perm.No)
  (<
    $Perm.No
    (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))))
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)
  (<
    (-
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; _cwl_156 := Iterator___del__(_cthread_156, _method_measures_156, _residue_157,
;   iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const _current_wait_level_150@188@01 $Perm)
(declare-const $t@189@01 $Snap)
(assert (= $t@189@01 ($Snap.combine ($Snap.first $t@189@01) ($Snap.second $t@189@01))))
(assert (= ($Snap.first $t@189@01) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@189@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@189@01))
    ($Snap.second ($Snap.second $t@189@01)))))
(assert (= ($Snap.first ($Snap.second $t@189@01)) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@189@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@189@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@189@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@189@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_157@37@01 _current_wait_level_150@188@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@189@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@189@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@189@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0))) | live]
; [else-branch: 264 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 264 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0))))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  arr@9@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 265 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 1))) | dead]
; [else-branch: 265 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 265 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 266 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0))) | dead]
; [else-branch: 266 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 266 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@72@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@72@01)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@189@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := null
; [exec]
; label post_loop
; [exec]
; _res := null
; [exec]
; _cwl_156, quickSort_res := quickSort(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(less, 1936942444))
; [eval] _checkDefined(less, 1936942444)
(set-option :timeout 0)
(push) ; 12
; [eval] _isDefined(id)
(push) ; 13
(pop) ; 13
; Joined path conditions
(pop) ; 12
; Joined path conditions
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] issubtype(typeof(arr), list(int()))
; [eval] typeof(arr)
; [eval] list(int())
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@47@01 1936942444)) (list<PyType> (as int<PyType>  PyType))))
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] int___add__(2, list___len__(arr)) > 0
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@190@01 $Perm)
(assert ($Perm.isReadVar $k@190@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@190@01))
(set-option :timeout 0)
(push) ; 12
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))
(pop) ; 12
; Joined path conditions
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))
(push) ; 12
(assert (not (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))
  0))
; [eval] Measure$check(_caller_measures_156, _cthread_156, int___add__(2, list___len__(arr))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_156, _cthread_156, int___add__(2, list___len__(arr)))
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@191@01 $Perm)
(assert ($Perm.isReadVar $k@191@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@191@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@191@01))
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))))
(pop) ; 12
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))))
(push) ; 12
; [then-branch: 267 | Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)))) | live]
; [else-branch: 267 | !(Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444))))) | live]
(push) ; 13
; [then-branch: 267 | Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444))))]
(assert (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))))
(pop) ; 13
(push) ; 13
; [else-branch: 267 | !(Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)))))]
(assert (not
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))))
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 14
; [then-branch: 268 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) != Z | live]
; [else-branch: 268 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) == Z | live]
(push) ; 15
; [then-branch: 268 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)))
(pop) ; 15
(push) ; 15
; [else-branch: 268 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
  $Perm.No))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(push) ; 16
; [then-branch: 269 | False | live]
; [else-branch: 269 | True | live]
(push) ; 17
; [then-branch: 269 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 269 | True]
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(push) ; 18
; [then-branch: 270 | False | live]
; [else-branch: 270 | True | live]
(push) ; 19
; [then-branch: 270 | False]
(assert false)
(pop) ; 19
(push) ; 19
; [else-branch: 270 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(push) ; 20
; [then-branch: 271 | False | live]
; [else-branch: 271 | True | live]
(push) ; 21
; [then-branch: 271 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 271 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)
  (not
    (=
      (-
        (/ (to_real 2) (to_real 1))
        ($Perm.min
          (/ (to_real 2) (to_real 1))
          (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
      $Perm.No))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))))
  (and
    (not
      (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))))
    (or
      (=
        (-
          (/ (to_real 2) (to_real 1))
          ($Perm.min
            (/ (to_real 2) (to_real 1))
            (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
        $Perm.No)
      (not
        (=
          (-
            (/ (to_real 2) (to_real 1))
            ($Perm.min
              (/ (to_real 2) (to_real 1))
              (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
          $Perm.No))))))
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)))))
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))))
(push) ; 12
(assert (not (or
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (or
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444))))
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)))
(declare-const _current_wait_level_156@192@01 $Perm)
(declare-const _res@193@01 $Ref)
(declare-const $t@194@01 $Snap)
(assert (= $t@194@01 ($Snap.combine ($Snap.first $t@194@01) ($Snap.second $t@194@01))))
(assert (= ($Snap.first $t@194@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@194@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@194@01))
    ($Snap.second ($Snap.second $t@194@01)))))
(assert (= ($Snap.first ($Snap.second $t@194@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@194@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@194@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@194@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@8@01 _current_wait_level_156@192@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@194@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@193@01) (list<PyType> (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 12
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@195@01 $Perm)
(assert ($Perm.isReadVar $k@195@01))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@195@01))
(set-option :timeout 0)
(push) ; 12
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(pop) ; 12
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 272 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1) | live]
; [else-branch: 272 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1)) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 272 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(push) ; 13
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) _res@193@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= arr@9@01 _res@193@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) _res@193@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) _res@193@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(assert (not (= _res@193@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@196@01 $Perm)
(assert ($Perm.isReadVar $k@196@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@196@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@196@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(pop) ; 13
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1) | dead]
; [else-branch: 273 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1)) | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 273 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; less := quickSort_res
; [exec]
; inhale _isDefined(1936942444)
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 $Snap.unit))
; [eval] _isDefined(1936942444)
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, quickSort_res_0 := quickSort(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] issubtype(typeof(arr), list(int()))
; [eval] typeof(arr)
; [eval] list(int())
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (as int<PyType>  PyType))))
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] int___add__(2, list___len__(arr)) > 0
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@198@01 $Perm)
(assert ($Perm.isReadVar $k@198@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@198@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 13
; Joined path conditions
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(push) ; 13
(assert (not (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
  0))
; [eval] Measure$check(_caller_measures_156, _cthread_156, int___add__(2, list___len__(arr))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_156, _cthread_156, int___add__(2, list___len__(arr)))
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@199@01 $Perm)
(assert ($Perm.isReadVar $k@199@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@199@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@199@01))
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
(push) ; 13
; [then-branch: 274 | Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)))) | live]
; [else-branch: 274 | !(Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445))))) | live]
(push) ; 14
; [then-branch: 274 | Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445))))]
(assert (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
(pop) ; 14
(push) ; 14
; [else-branch: 274 | !(Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)))))]
(assert (not
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))))
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 15
; [then-branch: 275 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) != Z | live]
; [else-branch: 275 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) == Z | live]
(push) ; 16
; [then-branch: 275 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)))
(pop) ; 16
(push) ; 16
; [else-branch: 275 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
  $Perm.No))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(push) ; 17
; [then-branch: 276 | False | live]
; [else-branch: 276 | True | live]
(push) ; 18
; [then-branch: 276 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 276 | True]
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(push) ; 19
; [then-branch: 277 | False | live]
; [else-branch: 277 | True | live]
(push) ; 20
; [then-branch: 277 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 277 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(push) ; 21
; [then-branch: 278 | False | live]
; [else-branch: 278 | True | live]
(push) ; 22
; [then-branch: 278 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 278 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)
  (not
    (=
      (-
        (/ (to_real 2) (to_real 1))
        ($Perm.min
          (/ (to_real 2) (to_real 1))
          (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
      $Perm.No))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
  (and
    (not
      (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
    (or
      (=
        (-
          (/ (to_real 2) (to_real 1))
          ($Perm.min
            (/ (to_real 2) (to_real 1))
            (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
        $Perm.No)
      (not
        (=
          (-
            (/ (to_real 2) (to_real 1))
            ($Perm.min
              (/ (to_real 2) (to_real 1))
              (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
          $Perm.No))))))
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))))
(push) ; 13
(assert (not (or
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)))
(declare-const _current_wait_level_156@200@01 $Perm)
(declare-const _res@201@01 $Ref)
(declare-const $t@202@01 $Snap)
(assert (= $t@202@01 ($Snap.combine ($Snap.first $t@202@01) ($Snap.second $t@202@01))))
(assert (= ($Snap.first $t@202@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@202@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@202@01))
    ($Snap.second ($Snap.second $t@202@01)))))
(assert (= ($Snap.first ($Snap.second $t@202@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@202@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@202@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@202@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@8@01 _current_wait_level_156@200@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@202@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@202@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@202@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@201@01) (list<PyType> (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@203@01 $Perm)
(assert ($Perm.isReadVar $k@203@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@203@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@203@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(pop) ; 13
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 279 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1) | live]
; [else-branch: 279 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 279 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) _res@201@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 _res@201@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) _res@201@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 _res@201@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) _res@201@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@201@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@204@01 $Perm)
(assert ($Perm.isReadVar $k@204@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@204@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@204@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(pop) ; 14
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1) | dead]
; [else-branch: 280 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 280 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; more := quickSort_res_0
; [exec]
; inhale _isDefined(1701998445)
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] _isDefined(1701998445)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, target := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(less, 1936942444), _checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(less, 1936942444)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@206@01 $Perm)
(declare-const res@207@01 $Ref)
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@208@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@208@01))
    ($Snap.second ($Snap.second $t@208@01)))))
(assert (= ($Snap.first ($Snap.second $t@208@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@208@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@208@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@208@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@206@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@208@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (=
  (typeof<PyType> res@207@01)
  (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 res@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 res@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@207@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@207@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@207@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_156, target_0 := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   target, _checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@201@01 1701998445))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@201@01 1701998445))
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@207@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@207@01) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@207@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@207@01) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0))))
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@207@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@207@01) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@209@01 $Perm)
(declare-const res@210@01 $Ref)
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 ($Snap.combine ($Snap.first $t@211@01) ($Snap.second $t@211@01))))
(assert (= ($Snap.first $t@211@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@211@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@211@01))
    ($Snap.second ($Snap.second $t@211@01)))))
(assert (= ($Snap.first ($Snap.second $t@211@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@211@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@211@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@211@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@209@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@211@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@211@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@211@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (= (typeof<PyType> res@210@01) (typeof<PyType> res@207@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@207@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@207@01 res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@210@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(assert (not (= res@210@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@210@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@201@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@211@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := target_0
; [exec]
; label __end
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@210@01) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@210@01) (list<PyType> (as int<PyType>  PyType))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@212@01 $Perm)
(assert ($Perm.isReadVar $k@212@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@212@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@212@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 14
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | live]
; [else-branch: 281 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 281 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@213@01 $Perm)
(assert ($Perm.isReadVar $k@213@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@213@01))
(set-option :timeout 0)
(push) ; 15
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | dead]
; [else-branch: 282 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 282 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 279 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1))]
(assert (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@214@01 $Perm)
(assert ($Perm.isReadVar $k@214@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@214@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(pop) ; 14
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1) | live]
; [else-branch: 283 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 283 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)]
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
; [eval] _res == arr
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(assert (=>
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)
  (= _res@201@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@202@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; more := quickSort_res_0
; [exec]
; inhale _isDefined(1701998445)
(declare-const $t@215@01 $Snap)
(assert (= $t@215@01 $Snap.unit))
; [eval] _isDefined(1701998445)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, target := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(less, 1936942444), _checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(less, 1936942444)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@216@01 $Perm)
(declare-const res@217@01 $Ref)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 ($Snap.combine ($Snap.first $t@218@01) ($Snap.second $t@218@01))))
(assert (= ($Snap.first $t@218@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@218@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@218@01))
    ($Snap.second ($Snap.second $t@218@01)))))
(assert (= ($Snap.first ($Snap.second $t@218@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@218@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@218@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@218@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@216@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@218@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (=
  (typeof<PyType> res@217@01)
  (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 res@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@217@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@217@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@217@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_156, target_0 := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   target, _checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@201@01 1701998445))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@201@01 1701998445))
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@217@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@217@01) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@217@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@217@01) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0))))
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@217@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@201@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@217@01) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@219@01 $Perm)
(declare-const res@220@01 $Ref)
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 ($Snap.combine ($Snap.first $t@221@01) ($Snap.second $t@221@01))))
(assert (= ($Snap.first $t@221@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@221@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@221@01))
    ($Snap.second ($Snap.second $t@221@01)))))
(assert (= ($Snap.first ($Snap.second $t@221@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@221@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@221@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@221@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@219@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@221@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@221@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@221@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (= (typeof<PyType> res@220@01) (typeof<PyType> res@217@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@217@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@220@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@217@01 res@220@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@220@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@193@01 res@220@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@220@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@220@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(assert (not (= res@220@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@220@01 (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@201@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@221@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := target_0
; [exec]
; label __end
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@220@01) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@220@01) (list<PyType> (as int<PyType>  PyType))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@222@01 $Perm)
(assert ($Perm.isReadVar $k@222@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@222@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@222@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 14
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | live]
; [else-branch: 284 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 284 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@223@01 $Perm)
(assert ($Perm.isReadVar $k@223@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@223@01))
(set-option :timeout 0)
(push) ; 15
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | dead]
; [else-branch: 285 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 285 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 272 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1))]
(assert (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@224@01 $Perm)
(assert ($Perm.isReadVar $k@224@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@224@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(pop) ; 13
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(push) ; 13
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1) | live]
; [else-branch: 286 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 286 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))), _checkDefined(_, res@47@01, 1936942444)), 1)]
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
; [eval] _res == arr
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1))
(assert (=>
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))) (_checkDefined $Snap.unit res@47@01 1936942444)) 1)
  (= _res@193@01 (_checkDefined $Snap.unit res@47@01 1936942444))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; less := quickSort_res
; [exec]
; inhale _isDefined(1936942444)
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 $Snap.unit))
; [eval] _isDefined(1936942444)
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, quickSort_res_0 := quickSort(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 13
; [eval] _isDefined(id)
(push) ; 14
(pop) ; 14
; Joined path conditions
(pop) ; 13
; Joined path conditions
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] issubtype(typeof(arr), list(int()))
; [eval] typeof(arr)
; [eval] list(int())
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@57@01 1701998445)) (list<PyType> (as int<PyType>  PyType))))
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] int___add__(2, list___len__(arr)) > 0
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@226@01 $Perm)
(assert ($Perm.isReadVar $k@226@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@226@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(pop) ; 13
; Joined path conditions
(assert (int___add__%precondition $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
(push) ; 13
(assert (not (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
  0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (>
  (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))
  0))
; [eval] Measure$check(_caller_measures_156, _cthread_156, int___add__(2, list___len__(arr))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] Measure$check(_caller_measures_156, _cthread_156, int___add__(2, list___len__(arr)))
; [eval] int___add__(2, list___len__(arr))
; [eval] list___len__(arr)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@227@01 $Perm)
(assert ($Perm.isReadVar $k@227@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@227@01))
(set-option :timeout 0)
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
(pop) ; 13
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
(push) ; 13
; [then-branch: 287 | Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)))) | live]
; [else-branch: 287 | !(Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445))))) | live]
(push) ; 14
; [then-branch: 287 | Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445))))]
(assert (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
(pop) ; 14
(push) ; 14
; [else-branch: 287 | !(Measure$check(_, _method_measures_156@45@01, _cthread_156@6@01, int___add__(_, 2, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)))))]
(assert (not
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))))
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false) && ((forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false) && ((forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false) && (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 15
; [then-branch: 288 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) != Z | live]
; [else-branch: 288 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) == Z | live]
(push) ; 16
; [then-branch: 288 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) != Z]
(assert (not
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)))
(pop) ; 16
(push) ; 16
; [else-branch: 288 | 2/1 - (min (2/1, 2/1 - _loop_original_must_terminate@80@01)) == Z]
(assert (=
  (-
    (/ (to_real 2) (to_real 1))
    ($Perm.min
      (/ (to_real 2) (to_real 1))
      (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
  $Perm.No))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
(push) ; 17
; [then-branch: 289 | False | live]
; [else-branch: 289 | True | live]
(push) ; 18
; [then-branch: 289 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 289 | True]
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
(push) ; 19
; [then-branch: 290 | False | live]
; [else-branch: 290 | True | live]
(push) ; 20
; [then-branch: 290 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 290 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
(push) ; 21
; [then-branch: 291 | False | live]
; [else-branch: 291 | True | live]
(push) ; 22
; [then-branch: 291 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 291 | True]
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)
  (not
    (=
      (-
        (/ (to_real 2) (to_real 1))
        ($Perm.min
          (/ (to_real 2) (to_real 1))
          (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
      $Perm.No))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
  (and
    (not
      (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
    (or
      (=
        (-
          (/ (to_real 2) (to_real 1))
          ($Perm.min
            (/ (to_real 2) (to_real 1))
            (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
        $Perm.No)
      (not
        (=
          (-
            (/ (to_real 2) (to_real 1))
            ($Perm.min
              (/ (to_real 2) (to_real 1))
              (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
          $Perm.No))))))
(assert (or
  (not
    (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)))))
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))))
(push) ; 13
(assert (not (or
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (or
  (Measure$check $Snap.unit _method_measures_156@45@01 _cthread_156@6@01 (int___add__ $Snap.unit 2 (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445))))
  (=
    (-
      (/ (to_real 2) (to_real 1))
      ($Perm.min
        (/ (to_real 2) (to_real 1))
        (- (/ (to_real 2) (to_real 1)) _loop_original_must_terminate@80@01)))
    $Perm.No)))
(declare-const _current_wait_level_156@228@01 $Perm)
(declare-const _res@229@01 $Ref)
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 ($Snap.combine ($Snap.first $t@230@01) ($Snap.second $t@230@01))))
(assert (= ($Snap.first $t@230@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@230@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@230@01))
    ($Snap.second ($Snap.second $t@230@01)))))
(assert (= ($Snap.first ($Snap.second $t@230@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@230@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@230@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@230@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@8@01 _current_wait_level_156@228@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@230@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@230@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@230@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@229@01) (list<PyType> (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 13
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@231@01 $Perm)
(assert ($Perm.isReadVar $k@231@01))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@231@01))
(set-option :timeout 0)
(push) ; 13
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(pop) ; 13
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 292 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1) | live]
; [else-branch: 292 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 292 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) _res@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) _res@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 _res@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) _res@229@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@229@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(set-option :timeout 0)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@232@01 $Perm)
(assert ($Perm.isReadVar $k@232@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@232@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(pop) ; 14
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1) | dead]
; [else-branch: 293 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 293 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; more := quickSort_res_0
; [exec]
; inhale _isDefined(1701998445)
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 $Snap.unit))
; [eval] _isDefined(1701998445)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, target := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(less, 1936942444), _checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(less, 1936942444)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@234@01 $Perm)
(declare-const res@235@01 $Ref)
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 ($Snap.combine ($Snap.first $t@236@01) ($Snap.second $t@236@01))))
(assert (= ($Snap.first $t@236@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@236@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@236@01))
    ($Snap.second ($Snap.second $t@236@01)))))
(assert (= ($Snap.first ($Snap.second $t@236@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@236@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@236@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@236@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@234@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@236@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@236@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@236@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (=
  (typeof<PyType> res@235@01)
  (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@235@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@235@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 res@235@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@235@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@235@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@235@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@235@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_156, target_0 := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   target, _checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@229@01 1701998445))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@229@01 1701998445))
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@235@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@235@01) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@235@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@235@01) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0))))
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@235@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@235@01) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@237@01 $Perm)
(declare-const res@238@01 $Ref)
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 ($Snap.combine ($Snap.first $t@239@01) ($Snap.second $t@239@01))))
(assert (= ($Snap.first $t@239@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@239@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@239@01))
    ($Snap.second ($Snap.second $t@239@01)))))
(assert (= ($Snap.first ($Snap.second $t@239@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@239@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@239@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@239@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@237@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@239@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@239@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@239@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (= (typeof<PyType> res@238@01) (typeof<PyType> res@235@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@235@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 res@238@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@235@01 res@238@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@238@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@238@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@238@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@238@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(assert (not (= res@238@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@238@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= _res@229@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@236@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := target_0
; [exec]
; label __end
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@238@01) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@238@01) (list<PyType> (as int<PyType>  PyType))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@240@01 $Perm)
(assert ($Perm.isReadVar $k@240@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@240@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@240@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 14
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | live]
; [else-branch: 294 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 294 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@241@01 $Perm)
(assert ($Perm.isReadVar $k@241@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@241@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@241@01))
(set-option :timeout 0)
(push) ; 15
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | dead]
; [else-branch: 295 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 295 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 292 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1))]
(assert (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  $Snap.unit))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@242@01 $Perm)
(assert ($Perm.isReadVar $k@242@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@242@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@242@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(pop) ; 14
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1) | live]
; [else-branch: 296 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 296 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))))))))))))))))))), _checkDefined(_, res@57@01, 1701998445)), 1)]
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
; [eval] _res == arr
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1))
(assert (=>
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@57@01 1701998445)) 1)
  (= _res@229@01 (_checkDefined $Snap.unit res@57@01 1701998445))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; more := quickSort_res_0
; [exec]
; inhale _isDefined(1701998445)
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] _isDefined(1701998445)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, target := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   _checkDefined(less, 1936942444), _checkDefined(pivotList, 2148138574800194267504))
; [eval] _checkDefined(less, 1936942444)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@193@01 1936942444))
; [eval] _checkDefined(pivotList, 2148138574800194267504)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(pop) ; 14
; Joined path conditions
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@52@01 2148138574800194267504)) 0) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444)) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@244@01 $Perm)
(declare-const res@245@01 $Ref)
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 ($Snap.combine ($Snap.first $t@246@01) ($Snap.second $t@246@01))))
(assert (= ($Snap.first $t@246@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@246@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@246@01))
    ($Snap.second ($Snap.second $t@246@01)))))
(assert (= ($Snap.first ($Snap.second $t@246@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@246@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@246@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@246@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@244@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@246@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@246@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@246@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (=
  (typeof<PyType> res@245@01)
  (typeof<PyType> (_checkDefined $Snap.unit _res@193@01 1936942444))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@245@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@245@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@245@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@245@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@245@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@245@01 (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@193@01 1936942444))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_156, target_0 := list___add__(_cthread_156, _method_measures_156, _residue_156,
;   target, _checkDefined(more, 1701998445))
; [eval] _checkDefined(more, 1701998445)
(set-option :timeout 0)
(push) ; 14
; [eval] _isDefined(id)
(push) ; 15
(pop) ; 15
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@229@01 1701998445))
(pop) ; 14
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit _res@229@01 1701998445))
; [eval] _cthread_15 != null
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 14
(pop) ; 14
; Joined path conditions
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@245@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@245@01) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@245@01) (list<PyType> (list_arg<PyType> (typeof<PyType> res@245@01) 0))))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0))))
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@245@01) 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit _res@229@01 1701998445)) 0) (list_arg<PyType> (typeof<PyType> res@245@01) 0)))
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(set-option :timeout 0)
(push) ; 14
(pop) ; 14
; Joined path conditions
(declare-const _current_wait_level_15@247@01 $Perm)
(declare-const res@248@01 $Ref)
(declare-const $t@249@01 $Snap)
(assert (= $t@249@01 ($Snap.combine ($Snap.first $t@249@01) ($Snap.second $t@249@01))))
(assert (= ($Snap.first $t@249@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@249@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@249@01))
    ($Snap.second ($Snap.second $t@249@01)))))
(assert (= ($Snap.first ($Snap.second $t@249@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@249@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@249@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@249@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_156@8@01 _current_wait_level_15@247@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@249@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@249@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (= (typeof<PyType> res@248@01) (typeof<PyType> res@245@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@245@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@52@01 2148138574800194267504)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@47@01 1936942444)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))))
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@57@01 1701998445) res@248@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@245@01 res@248@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@52@01 2148138574800194267504) res@248@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit res@47@01 1936942444) res@248@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= arr@9@01 res@248@01)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@248@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= res@248@01 (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@57@01 1701998445)
  (_checkDefined $Snap.unit _res@229@01 1701998445))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@249@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _res := target_0
; [exec]
; label __end
; [eval] issubtype(typeof(_res), list(int()))
; [eval] typeof(_res)
; [eval] list(int())
; [eval] int()
(set-option :timeout 0)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> res@248@01) (list<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@248@01) (list<PyType> (as int<PyType>  PyType))))
; [eval] int___gt__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 14
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@250@01 $Perm)
(assert ($Perm.isReadVar $k@250@01))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@250@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@250@01))
(set-option :timeout 0)
(push) ; 14
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 14
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (int___gt__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | live]
; [else-branch: 297 | !(int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 297 | int___gt__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)]
(assert (int___gt__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
; [eval] int___le__(list___len__(arr), 1) ==> _res == arr
; [eval] int___le__(list___len__(arr), 1)
; [eval] list___len__(arr)
(push) ; 15
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@251@01 $Perm)
(assert ($Perm.isReadVar $k@251@01))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@251@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@251@01))
(set-option :timeout 0)
(push) ; 15
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(pop) ; 15
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1) | dead]
; [else-branch: 298 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1)) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 298 | !(int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@87@01))))), arr@9@01), 1))]
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (not
  (int___le__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))) arr@9@01) 1)))
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 262 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@75@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | _err@75@01 != Null | dead]
; [else-branch: 299 | _err@75@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 299 | _err@75@01 == Null]
(assert (= _err@75@01 $Ref.null))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 6 | int___le__(_, list___len__((_, First:(Second:(Second:(Second:($t@12@01))))), arr@9@01), 1)]
(assert (int___le__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))) arr@9@01) 1))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_157@252@01 $Ref)
(declare-const _caller_measures_157@253@01 Seq<Measure$>)
(declare-const _residue_158@254@01 $Perm)
(declare-const _current_wait_level_157@255@01 $Perm)
(declare-const _cthread_157@256@01 $Ref)
(declare-const _caller_measures_157@257@01 Seq<Measure$>)
(declare-const _residue_158@258@01 $Perm)
(declare-const _current_wait_level_157@259@01 $Perm)
(push) ; 1
(declare-const $t@260@01 $Snap)
(assert (= $t@260@01 ($Snap.combine ($Snap.first $t@260@01) ($Snap.second $t@260@01))))
(assert (= ($Snap.first $t@260@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@256@01 $Ref.null)))
(assert (=
  ($Snap.second $t@260@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@260@01))
    ($Snap.second ($Snap.second $t@260@01)))))
(assert (= ($Snap.first ($Snap.second $t@260@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@256@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@260@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 ($Snap.combine ($Snap.first $t@261@01) ($Snap.second $t@261@01))))
(assert (= ($Snap.first $t@261@01) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@261@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@261@01))
    ($Snap.second ($Snap.second $t@261@01)))))
(assert (= ($Snap.first ($Snap.second $t@261@01)) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@261@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@261@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@261@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@261@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_157
(assert (<= _residue_158@258@01 _current_wait_level_157@259@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@261@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@262@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@263@01 Set<_Name>)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@264@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@265@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@266@01 Set<_Name>)
(assert (=
  module_names_0@266@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@267@01 $Snap)
(assert (= $t@267@01 ($Snap.combine ($Snap.first $t@267@01) ($Snap.second $t@267@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@267@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@267@01))
    ($Snap.second ($Snap.second $t@267@01)))))
(assert (= ($Snap.first ($Snap.second $t@267@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@267@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@267@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@268@01 Set<_Name>)
(assert (=
  module_names_0@268@01
  (Set_union module_names_0@266@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@269@01 $Snap)
(assert (= $t@269@01 ($Snap.combine ($Snap.first $t@269@01) ($Snap.second $t@269@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@269@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@269@01))
    ($Snap.second ($Snap.second $t@269@01)))))
(assert (= ($Snap.first ($Snap.second $t@269@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@269@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@269@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@269@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@269@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@269@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@269@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@269@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@269@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953720652)))
; [eval] (module_names_0 union Set(_single(1953720652)))
; [eval] Set(_single(1953720652))
; [eval] _single(1953720652)
(declare-const module_names_0@270@01 Set<_Name>)
(assert (=
  module_names_0@270@01
  (Set_union module_names_0@268@01 (Set_singleton (_single<_Name> 1953720652)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953718627)))
; [eval] (module_names_0 union Set(_single(1953718627)))
; [eval] Set(_single(1953718627))
; [eval] _single(1953718627)
(declare-const module_names_0@271@01 Set<_Name>)
(assert (=
  module_names_0@271@01
  (Set_union module_names_0@270@01 (Set_singleton (_single<_Name> 1953718627)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(8038062462289584464661321053517)))
; [eval] (module_names_0 union Set(_single(8038062462289584464661321053517)))
; [eval] Set(_single(8038062462289584464661321053517))
; [eval] _single(8038062462289584464661321053517)
(declare-const module_names_0@272@01 Set<_Name>)
(assert (=
  module_names_0@272@01
  (Set_union module_names_0@271@01 (Set_singleton (_single<_Name> 8038062462289584464661321053517)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2148068213713741116785)))
; [eval] (module_names_0 union Set(_single(2148068213713741116785)))
; [eval] Set(_single(2148068213713741116785))
; [eval] _single(2148068213713741116785)
(declare-const module_names_0@273@01 Set<_Name>)
(assert (=
  module_names_0@273@01
  (Set_union module_names_0@272@01 (Set_singleton (_single<_Name> 2148068213713741116785)))))
; [exec]
; label __end
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- Iterator___next__ ----------
(declare-const _cthread_149@274@01 $Ref)
(declare-const _caller_measures_149@275@01 Seq<Measure$>)
(declare-const _residue_149@276@01 $Perm)
(declare-const self@277@01 $Ref)
(declare-const _current_wait_level_149@278@01 $Perm)
(declare-const _res@279@01 $Ref)
(declare-const _err@280@01 $Ref)
(declare-const _cthread_149@281@01 $Ref)
(declare-const _caller_measures_149@282@01 Seq<Measure$>)
(declare-const _residue_149@283@01 $Perm)
(declare-const self@284@01 $Ref)
(declare-const _current_wait_level_149@285@01 $Perm)
(declare-const _res@286@01 $Ref)
(declare-const _err@287@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 ($Snap.combine ($Snap.first $t@288@01) ($Snap.second $t@288@01))))
(assert (= ($Snap.first $t@288@01) $Snap.unit))
; [eval] _cthread_149 != null
(assert (not (= _cthread_149@281@01 $Ref.null)))
(assert (=
  ($Snap.second $t@288@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@288@01))
    ($Snap.second ($Snap.second $t@288@01)))))
(assert (= ($Snap.first ($Snap.second $t@288@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@282@01 _cthread_149@281@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@282@01 _cthread_149@281@01 1))
(assert (Measure$check $Snap.unit _caller_measures_149@282@01 _cthread_149@281@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@288@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@288@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@288@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_149@281@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@288@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@288@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
(assert (not (= self@284@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(assert (= ($Snap.first $t@289@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@289@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@289@01))
    ($Snap.second ($Snap.second $t@289@01)))))
(assert (= ($Snap.first ($Snap.second $t@289@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@289@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@289@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@289@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_149@283@01 _current_wait_level_149@285@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@289@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
  (not (= _err@287@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@287@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@287@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | _err@287@01 == Null | live]
; [else-branch: 300 | _err@287@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 300 | _err@287@01 == Null]
(assert (= _err@287@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 300 | _err@287@01 != Null]
(assert (not (= _err@287@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@287@01 $Ref.null)) (= _err@287@01 $Ref.null)))
(assert (=>
  (= _err@287@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@287@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@287@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | _err@287@01 == Null | live]
; [else-branch: 301 | _err@287@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 301 | _err@287@01 == Null]
(assert (= _err@287@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 301 | _err@287@01 != Null]
(assert (not (= _err@287@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@287@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@287@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@287@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | _err@287@01 == Null | live]
; [else-branch: 302 | _err@287@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 302 | _err@287@01 == Null]
(assert (= _err@287@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 302 | _err@287@01 != Null]
(assert (not (= _err@287@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@287@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | |First:(Second:(Second:(Second:($t@289@01))))| > 0 | live]
; [else-branch: 303 | !(|First:(Second:(Second:(Second:($t@289@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 303 | |First:(Second:(Second:(Second:($t@289@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 303 | !(|First:(Second:(Second:(Second:($t@289@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
      0))
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@287@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@287@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | _err@287@01 != Null | live]
; [else-branch: 304 | _err@287@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 304 | _err@287@01 != Null]
(assert (not (= _err@287@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 304 | _err@287@01 == Null]
(assert (= _err@287@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (= _err@287@01 $Ref.null) (not (= _err@287@01 $Ref.null))))
(assert (=>
  (not (= _err@287@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@287@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@287@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | _err@287@01 != Null | live]
; [else-branch: 305 | _err@287@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 305 | _err@287@01 != Null]
(assert (not (= _err@287@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 305 | _err@287@01 == Null]
(assert (= _err@287@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@287@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | |First:(Second:(Second:(Second:($t@289@01))))| > 0 | live]
; [else-branch: 306 | !(|First:(Second:(Second:(Second:($t@289@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 306 | |First:(Second:(Second:(Second:($t@289@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 307 | _res@286@01 != First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 1] | live]
; [else-branch: 307 | _res@286@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 307 | _res@286@01 != First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 1]]
(assert (not
  (=
    _res@286@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 307 | _res@286@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 1]]
(assert (=
  _res@286@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@286@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)))
  (not
    (=
      _res@286@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1))))))
(pop) ; 4
(push) ; 4
; [else-branch: 306 | !(|First:(Second:(Second:(Second:($t@289@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)
  (and
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
      0)
    (or
      (=
        _res@286@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)))
      (not
        (=
          _res@286@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1))))))))
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)
  (and
    (=
      _res@286@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
      _res@286@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | |First:(Second:(Second:(Second:($t@289@01))))| > 0 | live]
; [else-branch: 308 | !(|First:(Second:(Second:(Second:($t@289@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 308 | |First:(Second:(Second:(Second:($t@289@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 308 | !(|First:(Second:(Second:(Second:($t@289@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@286@01) (Iterator_arg<PyType> (typeof<PyType> self@284@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@290@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 309 | r@290@01 in First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))) | live]
; [else-branch: 309 | !(r@290@01 in First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))) | live]
(push) ; 5
; [then-branch: 309 | r@290@01 in First:(Second:(Second:(Second:(Second:(Second:($t@288@01))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
  r@290@01))
(pop) ; 5
(push) ; 5
; [else-branch: 309 | !(r@290@01 in First:(Second:(Second:(Second:(Second:(Second:($t@288@01)))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
    r@290@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 310 | !(First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1) | live]
; [else-branch: 310 | First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 310 | !(First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 310 | First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 311 | r@290@01 != First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2] | live]
; [else-branch: 311 | r@290@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 311 | r@290@01 != First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2]]
(assert (not
  (=
    r@290@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 311 | r@290@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2]]
(assert (=
  r@290@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@290@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        2)))
  (not
    (=
      r@290@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1)
    (or
      (=
        r@290@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            2)))
      (not
        (=
          r@290@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1))))
(push) ; 6
; [then-branch: 312 | First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1 && r@290@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2] && _err@287@01 == Null | live]
; [else-branch: 312 | !(First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1 && r@290@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2] && _err@287@01 == Null) | live]
(push) ; 7
; [then-branch: 312 | First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1 && r@290@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2] && _err@287@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  (and
    (=
      r@290@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          2)))
    (= _err@287@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 312 | !(First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 1 && r@290@01 == First:(Second:(Second:(Second:($t@289@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) - 2] && _err@287@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1)
    (and
      (=
        r@290@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            2)))
      (= _err@287@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 313 | !(First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 0) | live]
; [else-branch: 313 | First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 313 | !(First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 313 | First:(Second:(Second:(Second:(Second:(Second:($t@289@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 314 | _err@287@01 == Null | live]
; [else-branch: 314 | _err@287@01 != Null | live]
(push) ; 11
; [then-branch: 314 | _err@287@01 == Null]
(assert (= _err@287@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 314 | _err@287@01 != Null]
(assert (not (= _err@287@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1)
    (and
      (=
        r@290@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            2)))
      (= _err@287@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1)
    (=
      r@290@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          2)))
    (= _err@287@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)
      (and
        (=
          r@290@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              2)))
        (= _err@287@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)
        (and
          (=
            r@290@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                2)))
          (= _err@287@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)
      (and
        (=
          r@290@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              2)))
        (= _err@287@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
      1)
    (and
      (=
        r@290@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            2)))
      (= _err@287@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
      r@290@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
        r@290@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)
        (or
          (=
            r@290@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                2)))
          (not
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)
        (and
          (=
            r@290@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                2)))
          (= _err@287@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)
        (=
          r@290@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              2)))
        (= _err@287@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (and
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  2)))
            (= _err@287@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (and
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (= _err@287@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (and
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  2)))
            (= _err@287@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
          1)
        (and
          (=
            r@290@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                2)))
          (= _err@287@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
      r@290@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
    r@290@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@290@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
          r@290@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
            r@290@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (or
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (not
                (=
                  r@290@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (and
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (= _err@287@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  2)))
            (= _err@287@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                1)
              (and
                (=
                  r@290@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                      2)))
                (= _err@287@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  1)
                (and
                  (=
                    r@290@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                        2)))
                  (= _err@287@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                1)
              (and
                (=
                  r@290@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                      2)))
                (= _err@287@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (and
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (= _err@287@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
          r@290@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
        r@290@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    r@290@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    r@290@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@290@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
          r@290@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
            r@290@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (or
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (not
                (=
                  r@290@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (and
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (= _err@287@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  2)))
            (= _err@287@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                1)
              (and
                (=
                  r@290@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                      2)))
                (= _err@287@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  1)
                (and
                  (=
                    r@290@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                        2)))
                  (= _err@287@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                1)
              (and
                (=
                  r@290@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                      2)))
                (= _err@287@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
              1)
            (and
              (=
                r@290@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                    2)))
              (= _err@287@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
          r@290@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
        r@290@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    r@290@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289-aux|)))
(assert (forall ((r@290@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
      r@290@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@288@01)))))))
        r@290@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            1)
          (and
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  2)))
            (= _err@287@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
            0)
          (and
            (not (= _err@287@01 $Ref.null))
            (=
              r@290@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    r@290@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@289@01))))))))))
    r@290@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplesrosetta_qsort.py.vpr@768@12@768@289|)))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_149: Perm
(declare-const _cwl_149@291@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Iterator___del__ ----------
(declare-const _cthread_150@292@01 $Ref)
(declare-const _caller_measures_150@293@01 Seq<Measure$>)
(declare-const _residue_150@294@01 $Perm)
(declare-const self@295@01 $Ref)
(declare-const _current_wait_level_150@296@01 $Perm)
(declare-const _cthread_150@297@01 $Ref)
(declare-const _caller_measures_150@298@01 Seq<Measure$>)
(declare-const _residue_150@299@01 $Perm)
(declare-const self@300@01 $Ref)
(declare-const _current_wait_level_150@301@01 $Perm)
(push) ; 1
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 ($Snap.combine ($Snap.first $t@302@01) ($Snap.second $t@302@01))))
(assert (= ($Snap.first $t@302@01) $Snap.unit))
; [eval] _cthread_150 != null
(assert (not (= _cthread_150@297@01 $Ref.null)))
(assert (=
  ($Snap.second $t@302@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@302@01))
    ($Snap.second ($Snap.second $t@302@01)))))
(assert (= ($Snap.first ($Snap.second $t@302@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@298@01 _cthread_150@297@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@298@01 _cthread_150@297@01 1))
(assert (Measure$check $Snap.unit _caller_measures_150@298@01 _cthread_150@297@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@302@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@302@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@302@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_150@297@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@302@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@302@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))))
(assert (not (= self@300@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 ($Snap.combine ($Snap.first $t@303@01) ($Snap.second $t@303@01))))
(assert (= ($Snap.first $t@303@01) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@303@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@303@01))
    ($Snap.second ($Snap.second $t@303@01)))))
(assert (= ($Snap.first ($Snap.second $t@303@01)) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@303@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@303@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@303@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_150@299@01 _current_wait_level_150@301@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@303@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))) | live]
; [else-branch: 315 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 315 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1))) | dead]
; [else-branch: 316 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 316 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 317 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))) | dead]
; [else-branch: 317 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 317 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 315 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1))) | live]
; [else-branch: 318 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 318 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
    $Ref.null)))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))) | dead]
; [else-branch: 319 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 319 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 318 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))) | live]
; [else-branch: 320 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 320 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
    $Ref.null)))
(pop) ; 5
(push) ; 5
; [else-branch: 320 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@303@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_150: Perm
(declare-const _cwl_150@304@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___init__ ----------
(declare-const _cthread_8@305@01 $Ref)
(declare-const _caller_measures_8@306@01 Seq<Measure$>)
(declare-const _residue_8@307@01 $Perm)
(declare-const _current_wait_level_8@308@01 $Perm)
(declare-const res@309@01 $Ref)
(declare-const _cthread_8@310@01 $Ref)
(declare-const _caller_measures_8@311@01 Seq<Measure$>)
(declare-const _residue_8@312@01 $Perm)
(declare-const _current_wait_level_8@313@01 $Perm)
(declare-const res@314@01 $Ref)
(push) ; 1
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
(assert (= ($Snap.first $t@315@01) $Snap.unit))
; [eval] _cthread_8 != null
(assert (not (= _cthread_8@310@01 $Ref.null)))
(assert (=
  ($Snap.second $t@315@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@315@01))
    ($Snap.second ($Snap.second $t@315@01)))))
(assert (= ($Snap.first ($Snap.second $t@315@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@311@01 _cthread_8@310@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@311@01 _cthread_8@310@01 1))
(assert (Measure$check $Snap.unit _caller_measures_8@311@01 _cthread_8@310@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@315@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@315@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@315@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_8@310@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@315@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@316@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@316@01))
    ($Snap.second ($Snap.second $t@316@01)))))
(assert (= ($Snap.first ($Snap.second $t@316@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@316@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@316@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@316@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_8@312@01 _current_wait_level_8@313@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@316@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
(assert (not (= res@314@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@314@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@314@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@314@01))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_8: Perm
(declare-const _cwl_8@317@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list_append ----------
(declare-const _cthread_9@318@01 $Ref)
(declare-const _caller_measures_9@319@01 Seq<Measure$>)
(declare-const _residue_9@320@01 $Perm)
(declare-const self@321@01 $Ref)
(declare-const item@322@01 $Ref)
(declare-const _current_wait_level_9@323@01 $Perm)
(declare-const _cthread_9@324@01 $Ref)
(declare-const _caller_measures_9@325@01 Seq<Measure$>)
(declare-const _residue_9@326@01 $Perm)
(declare-const self@327@01 $Ref)
(declare-const item@328@01 $Ref)
(declare-const _current_wait_level_9@329@01 $Perm)
(push) ; 1
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 ($Snap.combine ($Snap.first $t@330@01) ($Snap.second $t@330@01))))
(assert (= ($Snap.first $t@330@01) $Snap.unit))
; [eval] _cthread_9 != null
(assert (not (= _cthread_9@324@01 $Ref.null)))
(assert (=
  ($Snap.second $t@330@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@330@01))
    ($Snap.second ($Snap.second $t@330@01)))))
(assert (= ($Snap.first ($Snap.second $t@330@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@325@01 _cthread_9@324@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@325@01 _cthread_9@324@01 1))
(assert (Measure$check $Snap.unit _caller_measures_9@325@01 _cthread_9@324@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@330@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@330@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@330@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_9@324@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@330@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@330@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@330@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@327@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@327@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))
(assert (not (= self@327@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> item@328@01) (list_arg<PyType> (typeof<PyType> self@327@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
(assert (= ($Snap.first $t@331@01) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@331@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@331@01))
    ($Snap.second ($Snap.second $t@331@01)))))
(assert (= ($Snap.first ($Snap.second $t@331@01)) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@331@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@331@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@331@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_9@326@01 _current_wait_level_9@329@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@331@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton item@328@01)) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
    (Seq_singleton item@328@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_9: Perm
(declare-const _cwl_9@332@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___add__ ----------
(declare-const _cthread_15@333@01 $Ref)
(declare-const _caller_measures_15@334@01 Seq<Measure$>)
(declare-const _residue_15@335@01 $Perm)
(declare-const self@336@01 $Ref)
(declare-const other@337@01 $Ref)
(declare-const _current_wait_level_15@338@01 $Perm)
(declare-const res@339@01 $Ref)
(declare-const _cthread_15@340@01 $Ref)
(declare-const _caller_measures_15@341@01 Seq<Measure$>)
(declare-const _residue_15@342@01 $Perm)
(declare-const self@343@01 $Ref)
(declare-const other@344@01 $Ref)
(declare-const _current_wait_level_15@345@01 $Perm)
(declare-const res@346@01 $Ref)
(push) ; 1
(declare-const $t@347@01 $Snap)
(assert (= $t@347@01 ($Snap.combine ($Snap.first $t@347@01) ($Snap.second $t@347@01))))
(assert (= ($Snap.first $t@347@01) $Snap.unit))
; [eval] _cthread_15 != null
(assert (not (= _cthread_15@340@01 $Ref.null)))
(assert (=
  ($Snap.second $t@347@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@347@01))
    ($Snap.second ($Snap.second $t@347@01)))))
(assert (= ($Snap.first ($Snap.second $t@347@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_15, _cthread_15, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_15@341@01 _cthread_15@340@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_15@341@01 _cthread_15@340@01 1))
(assert (Measure$check $Snap.unit _caller_measures_15@341@01 _cthread_15@340@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@347@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@347@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@347@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_15), Thread_0())
; [eval] typeof(_cthread_15)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_15@340@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@347@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@347@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@347@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@343@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@343@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(other), list(list_arg(typeof(other), 0)))
; [eval] typeof(other)
; [eval] list(list_arg(typeof(other), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
(assert (issubtype<Bool> (typeof<PyType> other@344@01) (list<PyType> (list_arg<PyType> (typeof<PyType> other@344@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))
  $Snap.unit))
; [eval] issubtype(list_arg(typeof(other), 0), list_arg(typeof(self), 0))
; [eval] list_arg(typeof(other), 0)
; [eval] typeof(other)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (list_arg<PyType> (typeof<PyType> other@344@01) 0) (list_arg<PyType> (typeof<PyType> self@343@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))))))
(assert (not (= self@343@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01)))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (= self@343@01 other@344@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= other@344@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@347@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 ($Snap.combine ($Snap.first $t@348@01) ($Snap.second $t@348@01))))
(assert (= ($Snap.first $t@348@01) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second $t@348@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@348@01))
    ($Snap.second ($Snap.second $t@348@01)))))
(assert (= ($Snap.first ($Snap.second $t@348@01)) $Snap.unit))
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: Level(_r_15) <= _current_wait_level_15)
(assert (=
  ($Snap.second ($Snap.second $t@348@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@348@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@348@01))) $Snap.unit))
; [eval] _residue_15 <= _current_wait_level_15
(assert (<= _residue_15@342@01 _current_wait_level_15@345@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@348@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  $Snap.unit))
; [eval] typeof(res) == typeof(self)
; [eval] typeof(res)
; [eval] typeof(self)
(assert (= (typeof<PyType> res@346@01) (typeof<PyType> self@343@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= self@343@01 other@344@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= other@344@01 res@346@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= self@343@01 res@346@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@346@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
  $Snap.unit))
; [eval] res.list_acc == self.list_acc ++ other.list_acc
; [eval] self.list_acc ++ other.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___iter__ ----------
(declare-const _cthread_13@349@01 $Ref)
(declare-const _caller_measures_13@350@01 Seq<Measure$>)
(declare-const _residue_13@351@01 $Perm)
(declare-const self@352@01 $Ref)
(declare-const _current_wait_level_13@353@01 $Perm)
(declare-const _res@354@01 $Ref)
(declare-const _cthread_13@355@01 $Ref)
(declare-const _caller_measures_13@356@01 Seq<Measure$>)
(declare-const _residue_13@357@01 $Perm)
(declare-const self@358@01 $Ref)
(declare-const _current_wait_level_13@359@01 $Perm)
(declare-const _res@360@01 $Ref)
(push) ; 1
(declare-const $t@361@01 $Snap)
(assert (= $t@361@01 ($Snap.combine ($Snap.first $t@361@01) ($Snap.second $t@361@01))))
(assert (= ($Snap.first $t@361@01) $Snap.unit))
; [eval] _cthread_13 != null
(assert (not (= _cthread_13@355@01 $Ref.null)))
(assert (=
  ($Snap.second $t@361@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@361@01))
    ($Snap.second ($Snap.second $t@361@01)))))
(assert (= ($Snap.first ($Snap.second $t@361@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_13, _cthread_13, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_13@356@01 _cthread_13@355@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_13@356@01 _cthread_13@355@01 1))
(assert (Measure$check $Snap.unit _caller_measures_13@356@01 _cthread_13@355@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@361@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@361@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@361@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@361@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_13), Thread_0())
; [eval] typeof(_cthread_13)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_13@355@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@361@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@361@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@361@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@358@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@358@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01))))))))
(assert (not (= self@358@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@361@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 ($Snap.combine ($Snap.first $t@362@01) ($Snap.second $t@362@01))))
(assert (= ($Snap.first $t@362@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_13)
(assert (=
  ($Snap.second $t@362@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@362@01))
    ($Snap.second ($Snap.second $t@362@01)))))
(assert (= ($Snap.first ($Snap.second $t@362@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_13)
(assert (=
  ($Snap.second ($Snap.second $t@362@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@362@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@362@01))) $Snap.unit))
; [eval] _residue_13 <= _current_wait_level_13
(assert (<= _residue_13@357@01 _current_wait_level_13@359@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@362@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@362@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@362@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@360@01 self@358@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))
(assert (not (= _res@360@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= _res@360@01 self@358@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == self.list_acc
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))
  self@358@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@362@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(list_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@360@01) (Iterator<PyType> (list_arg<PyType> (typeof<PyType> self@358@01) 0))))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var _cwl_13: Perm
(declare-const _cwl_13@363@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
